[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 1992 Drew Eckhardt <drew@cs.colorado.edu>, March 28, 1992"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (c) Michael Kerrisk, 2001, 2002, 2005, 2013"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(GPL_NOVERSION_ONELINE)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" May be distributed under the GNU General Public License."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by Michael Haardt <michael@moria.de>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 24 Jul 1993 by Rik Faith <faith@cs.unc.edu>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 21 Aug 1994 by Michael Chastain <mec@shell.portal.com>:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"   New man page (copied from 'fork.2')."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 10 June 1995 by Andries Brouwer <aeb@cwi.nl>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 25 April 1998 by Xavier Leroy <Xavier.Leroy@inria.fr>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 26 Jun 2001 by Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Mostly upgraded to 2.4.x"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Added prototype for sys_clone() plus description"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded CLONE_THREAD with a brief description of thread groups"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded CLONE_PARENT and revised entire page remove ambiguity"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t\tbetween \"calling process\" and \"parent process\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded CLONE_PTRACE and CLONE_VFORK"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded EPERM and EINVAL error codes"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tRenamed \"__clone\" to \"clone\" (which is the prototype in <sched.h>)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tvarious other minor tidy ups and clarifications."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 26 Jun 2001 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tUpdated notes for 2.4.7+ behavior of CLONE_THREAD"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 15 Oct 2002 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded description for CLONE_NEWNS, which was added in 2.4.19"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Slightly rephrased, aeb."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 1 Feb 2003 - added CLONE_SIGHAND restriction, aeb."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 1 Jan 2004 - various updates, aeb"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 2004-09-10 - added CLONE_PARENT_SETTID etc. - aeb."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-04-12, mtk, noted the PID caching behavior of NPTL's getpid()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\twrapper under BUGS."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-05-10, mtk, added CLONE_SYSVSEM, CLONE_UNTRACED, CLONE_STOPPED."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-05-17, mtk, Substantially enhanced discussion of CLONE_THREAD."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-11-18, mtk, order CLONE_* flags alphabetically"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-11-18, mtk, document CLONE_NEWPID"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-11-19, mtk, document CLONE_NEWUTS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-11-19, mtk, document CLONE_NEWIPC"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-11-19, Jens Axboe, mtk, document CLONE_IO"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE 2 2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "clone, __clone2 "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " create a child process"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* Prototype for the glibc wrapper function */"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sched.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int clone(int (*\" \"fn\" \")(void *), void *\" child_stack ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          int \" flags \", void *\" \"arg\" \", ... \""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          /* pid_t *\" ptid \", void *\" newtls "
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "\", pid_t *\" ctid \" */ );\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* For the prototype of the raw system call, see NOTES */"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "creates a new process, in a manner similar to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This page describes both the glibc"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrapper function and the underlying system call on which it is based."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The main text describes the wrapper function;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the differences for the raw system call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are described toward the end of this page."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Unlike"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allows the child process to share parts of its execution context with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process, such as the virtual address space, the table of file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "descriptors, and the table of signal handlers."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Note that on this manual"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "page, \"calling process\" normally corresponds to \"parent process\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "But see the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "below.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "One use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is to implement threads: multiple flows of control in a program that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "run concurrently in a shared address space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When the child process is created with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it commences execution by calling the function pointed to by the argument"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fn ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This differs from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where execution continues in the child from the point"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is passed as the argument of the function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fn ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fn ( arg )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns, the child process terminates."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The integer returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fn"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the exit status for the child process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The child process may also terminate explicitly by calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exit (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or after receiving a fatal signal."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument specifies the location of the stack used by the child process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since the child and calling process may share memory,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is not possible for the child process to execute in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "same stack as the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The calling process must therefore"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set up memory space for the child stack and pass a pointer to this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "space to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Stacks grow downward on all processors that run Linux"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(except the HP PA processors), so"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "usually points to the topmost address of the memory space set up for"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the child stack."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The low byte of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the number of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"termination signal\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sent to the parent when the child dies."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this signal is specified as anything other than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGCHLD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the parent process must specify the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __WALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __WCLONE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "options when waiting for the child with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wait (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If no signal is specified, then the parent process is not signaled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when the child terminates."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may also be bitwise-ORed with zero or more of the following constants,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in order to specify what is shared between the calling process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the child process:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_CHILD_CLEARTID \" (since Linux 2.5.49)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Clear (zero) the child thread ID at the location"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ctid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in child memory when the child exits, and do a wakeup on the futex"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at that address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The address involved may be changed by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " set_tid_address (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is used by threading libraries."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_CHILD_SETTID \" (since Linux 2.5.49)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Store the child thread ID at the location"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ctid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the child's memory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The store operation completes before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns control to user space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FILES \" (since Linux 2.0)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FILES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the calling process and the child process share the same file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "descriptor table."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any file descriptor created by the calling process or by the child"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process is also valid in the other process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Similarly, if one of the processes closes a file descriptor,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or changes its associated flags (using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation), the other process is also affected."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a process sharing a file descriptor table calls"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its file descriptor table is duplicated (unshared)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FILES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, the child process inherits a copy of all file descriptors"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "opened in the calling process at the time of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Subsequent operations that open or close file descriptors,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or change file descriptor flags,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performed by either the calling"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process or the child process do not affect the other process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note, however,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that the duplicated file descriptors in the child refer to the same open file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "descriptions as the corresponding file descriptors in the calling process,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and thus share file offsets and file status flags (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS \" (since Linux 2.0)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the caller and the child process share the same filesystem"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "information."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This includes the root of the filesystem, the current"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "working directory, and the umask."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chroot (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chdir (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " umask (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performed by the calling process or the child process also affects the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "other process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, the child process works on a copy of the filesystem"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "information of the calling process at the time of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chroot (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chdir (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " umask (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performed later by one of the processes do not affect the other process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_IO \" (since Linux 2.6.25)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_IO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then the new process shares an I/O context with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the new process has its own I/O context."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following based on text from Jens Axboe"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The I/O context is the I/O scope of the disk scheduler (i.e.,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "what the I/O scheduler uses to model scheduling of a process's I/O)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If processes share the same I/O context,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "they are treated as one by the I/O scheduler."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "As a consequence, they get to share disk time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For some I/O schedulers,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the anticipatory and CFQ scheduler"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "if two processes share an I/O context,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "they will be allowed to interleave their disk access."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If several threads are doing I/O on behalf of the same process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( aio_read (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for instance), they should employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_IO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to get better I/O performance."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" with CFQ and AS."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the kernel is not configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_BLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option, this flag is a no-op."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWCGROUP \" (since Linux 4.6)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Create the process in a new cgroup namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process is created in the same cgroup namespaces as the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is intended for the implementation of containers."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further information on cgroup namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cgroup_namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWCGROUP ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWIPC \" (since Linux 2.6.19)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWIPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then create the process in a new IPC namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process is created in the same IPC namespace as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is intended for the implementation of containers."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "An IPC namespace provides an isolated view of System"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "V IPC objects (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " svipc (7))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and (since Linux 2.6.30)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 7eafd7c74c3f2e67c27621b987b28397110d643f"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" https://lwn.net/Articles/312232/"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX message queues"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mq_overview (7))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The common characteristic of these IPC mechanisms is that IPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "objects are identified by mechanisms other than filesystem"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pathnames."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Objects created in an IPC namespace are visible to all other processes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that are members of that namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but are not visible to processes in other IPC namespaces."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When an IPC namespace is destroyed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., when the last process that is a member of the namespace terminates),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all IPC objects in the namespace are automatically destroyed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWIPC ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag can't be specified in conjunction with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SYSVSEM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further information on IPC namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNET \" (since Linux 2.6.24)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The implementation of this flag was completed only"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by about kernel version 2.6.29.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then create the process in a new network namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process is created in the same network namespace as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is intended for the implementation of containers."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A network namespace provides an isolated view of the networking stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(network device interfaces, IPv4 and IPv6 protocol stacks,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IP routing tables, firewall rules, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/net"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/class/net"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "directory trees, sockets, etc.)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A physical network device can live in exactly one"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "network namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A virtual network"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( veth (4))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "device pair provides a pipe-like abstraction"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that can be used to create tunnels between network namespaces,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and can be used to create a bridge to a physical network device"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in another namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a network namespace is freed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., when the last process in the namespace terminates),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its physical network devices are moved back to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initial network namespace (not to the parent of the process)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For further information on network namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNET ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS \" (since Linux 2.4.19)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the cloned child is started in a new mount namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initialized with a copy of the namespace of the parent."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, the child lives in the same mount"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "namespace as the parent."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is not permitted to specify both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See https://lwn.net/Articles/543273/"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "in the same"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further information on mount namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mount_namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID \" (since Linux 2.6.24)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This explanation draws a lot of details from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://lwn.net/Articles/259217/"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Authors: Pavel Emelyanov <xemul@openvz.org>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Kir Kolyshkin <kir@openvz.org>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The primary kernel commit is 30e49c263e36341b60b735cbef5ca37912549264"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Author: Pavel Emelyanov <xemul@openvz.org>"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then create the process in a new PID namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process is created in the same PID namespace as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is intended for the implementation of containers."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further information on PID namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid_namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag can't be specified in conjunction with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This flag first became meaningful for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in Linux 2.6.23,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the current"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "semantics were merged in Linux 3.5,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the final pieces to make the user namespaces completely usable were"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "merged in Linux 3.8.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then create the process in a new user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process is created in the same user namespace as the calling process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Before Linux 3.8, use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "required that the caller have three capabilities:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETUID ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETGID ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Before Linux 2.6.29, it appears that only CAP_SYS_ADMIN was needed"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting with Linux 3.8,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "no privileges are needed to create a user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This flag can't be specified in conjunction with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For security reasons,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" https://lwn.net/Articles/543273/"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The fix actually went into 3.9 and into 3.8.3. However, user namespaces"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" were, for practical purposes, unusable in earlier 3.8.x because of the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" various filesystems that didn't support userns."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cannot be specified in conjunction with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further information on user namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " user_namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUTS \" (since Linux 2.6.19)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then create the process in a new UTS namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whose identifiers are initialized by duplicating the identifiers"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the UTS namespace of the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process is created in the same UTS namespace as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is intended for the implementation of containers."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A UTS namespace is the set of identifiers returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uname (2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "among these, the domain name and the hostname can be modified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setdomainname (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sethostname (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "respectively."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Changes made to the identifiers in a UTS namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are visible to all other processes in the same namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but are not visible to processes in other UTS namespaces."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUTS ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further information on UTS namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT \" (since Linux 2.3.12)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then the parent of the new child (as returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getppid (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be the same as that of the calling process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, then (as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the child's parent is the calling process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that it is the parent process, as returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getppid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is signaled when the child terminates, so that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then the parent of the calling process, rather than the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calling process itself, will be signaled."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT_SETTID \" (since Linux 2.5.49)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Store the child thread ID at the location"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ptid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the parent's memory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(In Linux 2.5.32-2.5.48 there was a flag"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SETTID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that did this.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The store operation completes before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns control to user space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PID \" (Linux 2.0 to 2.5.15)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the child process is created with the same process ID as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is good for hacking the system, but otherwise"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of not much use."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "From Linux 2.3.21 onward, this flag could be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified only by the system boot process (PID 0)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The flag disappeared completely from the kernel sources in Linux 2.5.16."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since then, the kernel silently ignores this bit if it is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PTRACE \" (since Linux 2.2)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PTRACE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified, and the calling process is being traced,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then trace the child also (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ptrace (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SETTLS \" (since Linux 2.5.32)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The TLS (Thread Local Storage) descriptor is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " newtls ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The interpretation of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " newtls"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the resulting effect is architecture dependent."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On x86,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " newtls"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is interpreted as a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct user_desc"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "*\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " set_thread_area (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On x86-64 it is the new value to be set for the %fs base register"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ARCH_SET_FS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arch_prctl (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On architectures with a dedicated TLS register, it is the new value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of that register."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND \" (since Linux 2.0)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the calling process and the child process share the same table of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal handlers."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the calling process or child process calls"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaction (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to change the behavior associated with a signal, the behavior is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "changed in the other process as well."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, the calling process and child"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "processes still have distinct signal masks and sets of pending"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "So, one of them may block or unblock signals using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigprocmask (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without affecting the other process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, the child process inherits a copy of the signal handlers"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the calling process at the time"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaction (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performed later by one of the processes have no effect on the other"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 2.6.0,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Precisely: Linux 2.6.0-test6"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must also include"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_STOPPED \" (since Linux 2.6.0)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Precisely: Linux 2.6.0-test2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_STOPPED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then the child is initially stopped (as though it was sent a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGSTOP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal), and must be resumed by sending it a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGCONT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This flag was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " deprecated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from Linux 2.6.25 onward,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " removed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "altogether in Linux 2.6.38."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since then, the kernel silently ignores it without error."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" glibc 2.8 removed this defn from bits/sched.h"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting with Linux 4.6, the same bit was reused for the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWCGROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SYSVSEM \" (since Linux 2.5.10)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SYSVSEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then the child and the calling process share"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a single list of System V semaphore adjustment"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( semadj )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " semop (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, the shared list accumulates"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " semadj"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values across all processes sharing the list,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and semaphore adjustments are performed only when the last process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that is sharing the list terminates (or ceases sharing the list using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is not set, then the child has a separate"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " semadj"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "list that is initially empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD \" (since Linux 2.4.0)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Precisely: Linux 2.6.0-test8"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the child is placed in the same thread group as the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To make the remainder of the discussion of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "more readable, the term \"thread\" is used to refer to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "processes within a thread group."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Thread groups were a feature added in Linux 2.4 to support the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "POSIX threads notion of a set of threads that share a single PID."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Internally, this shared PID is the so-called"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread group identifier (TGID) for the thread group."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since Linux 2.4, calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return the TGID of the caller."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The threads within a group can be distinguished by their (system-wide)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unique thread IDs (TID)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A new thread's TID is available as the function result"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returned to the caller of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and a thread can obtain"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its own TID using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gettid (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a call is made to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the resulting thread is placed in a new thread group"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whose TGID is the same as the thread's TID."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This thread is the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the new thread group."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A new thread created with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has the same parent process as the caller of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., like"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getppid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return the same value for all of the threads in a thread group."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread terminates, the thread that created it using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not sent a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGCHLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or other termination) signal;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nor can the status of such a thread be obtained"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wait (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The thread is said to be"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " detached .)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "After all of the threads in a thread group terminate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the parent process of the thread group is sent a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGCHLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or other termination) signal."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If any of the threads in a thread group performs an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then all threads other than the thread group leader are terminated,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the new program is executed in the thread group leader."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If one of the threads in a thread group creates a child using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then any thread in the group can"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wait (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for that child."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 2.5.35,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must also include"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(and note that, since Linux 2.6.0,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Precisely: Linux 2.6.0-test6"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "also requires"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to be included)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Signal dispositions and actions are process-wide:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if an unhandled signal is delivered to a thread, then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it will affect (terminate, stop, continue, be ignored in)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all members of the thread group."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each thread has its own signal mask, as set by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigprocmask (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A signal may be process-directed or thread-directed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A process-directed signal is targeted at a thread group (i.e., a TGID),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and is delivered to an arbitrarily selected thread from among those"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that are not blocking the signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A signal may be process directed because it was generated by the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for reasons other than a hardware exception, or because it was sent using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kill (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigqueue (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A thread-directed signal is targeted at (i.e., delivered to)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a specific thread."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A signal may be thread directed because it was sent using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tgkill (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_sigqueue (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or because the thread executed a machine language instruction that triggered"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a hardware exception"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(e.g., invalid memory access triggering"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGSEGV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or a floating-point exception triggering"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGFPE )."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigpending (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a signal set that is the union of the pending process-directed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals and the signals that are pending for the calling thread."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If a process-directed signal is delivered to a thread group,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the thread group has installed a handler for the signal, then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the handler will be invoked in exactly one, arbitrarily selected"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "member of the thread group that has not blocked the signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If multiple threads in a group are waiting to accept the same signal using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigwaitinfo (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel will arbitrarily select one of these threads"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to receive the signal."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_UNTRACED \" (since Linux 2.5.46)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_UNTRACED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified, then a tracing process cannot force"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PTRACE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on this child process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VFORK \" (since Linux 2.2)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VFORK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the execution of the calling process is suspended"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "until the child releases its virtual memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resources via a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _exit (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " vfork (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VFORK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, then both the calling process and the child are schedulable"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after the call, and an application should not rely on execution occurring"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in any particular order."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM \" (since Linux 2.0)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, the calling process and the child process run in the same memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "space."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In particular, memory writes performed by the calling process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or by the child process are also visible in the other process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Moreover, any memory mapping or unmapping performed with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " munmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by the child or calling process also affects the other process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set, the child process runs in a separate copy of the memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "space of the calling process at the time of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Memory writes or file mappings/unmappings performed by one of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "processes do not affect the other, as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that the glibc"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrapper function makes some changes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the memory pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(changes required to set the stack up correctly for the child)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " before"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "invoking the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "So, in cases where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used to recursively create children,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "do not use the buffer employed for the parent's stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as the stack of the child."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " C library/kernel differences"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The raw"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call corresponds more closely to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in that execution in the child continues from the point of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "As such, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fn"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arguments of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrapper function are omitted."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Another difference for the raw"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call is that the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument may be NULL,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in which case the child uses a duplicate of the parent's stack."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Copy-on-write semantics ensure that the child gets separate copies"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of stack pages when either process modifies the stack.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, for correct operation, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option should not be specified."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(If the child"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " shares"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the parent's memory because of the use of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then no copy-on-write duplication occurs and chaos is likely to result.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The order of the arguments also differs in the raw system call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and there are variations in the arguments across architectures,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as detailed in the following paragraphs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The raw system call interface on x86-64 and some other architectures"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(including sh, tile, ia-64, and alpha) is:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long clone(unsigned long \" flags \", void *\" child_stack ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           int *\" ptid \", int *\" ctid ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           unsigned long \" newtls );"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On x86-32, and several other common architectures"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(including score, ARM, ARM 64, PA-RISC, arc, Power PC, xtensa,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and MIPS),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" CONFIG_CLONE_BACKWARDS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the order of the last two arguments is reversed:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long clone(unsigned long \" flags \", void *\" child_stack ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          int *\" ptid \", unsigned long \" newtls ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          int *\" ctid );"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On the cris and s390 architectures,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" CONFIG_CLONE_BACKWARDS2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the order of the first two arguments is reversed:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long clone(void *\" child_stack \", unsigned long \" flags ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           int *\" ptid \", int *\" ctid ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           unsigned long \" newtls );"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On the microblaze architecture,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" CONFIG_CLONE_BACKWARDS3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "an additional argument is supplied:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long clone(unsigned long \" flags \", void *\" child_stack ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           int \" stack_size , \""
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "R         /* Size of stack */\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           int *\" ptid \", int *\" ctid ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           unsigned long \" newtls );"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " blackfin, m68k, and sparc"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Mike Frysinger noted in a 2013 mail:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     these arches don't define __ARCH_WANT_SYS_CLONE:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     blackfin ia64 m68k sparc"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument-passing conventions on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blackfin, m68k, and sparc are different from the descriptions above."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For details, see the kernel (and glibc) source."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ia64"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On ia64, a different interface is used:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int __clone2(int (*\" \"fn\" \")(void *), \""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"             void *\" child_stack_base \", size_t \" stack_size ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"             int \" flags \", void *\" \"arg\" \", ... \""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          /* pid_t *\" ptid \", struct user_desc *\" tls "
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "\", pid_t *\" ctid \" */ );\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The prototype shown above is for the glibc wrapper function;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the system call itself,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the prototype can be described as follows (it is identical to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "prototype on microblaze):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long clone2(unsigned long \" flags \", void *\" child_stack_base ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"            int \" stack_size , \""
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "R         /* Size of stack */\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"            int *\" ptid \", int *\" ctid ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"            unsigned long \" tls );"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __clone2 ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operates in the same way as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "except that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack_base"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to the lowest address of the child's stack area,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stack_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies the size of the stack pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack_base ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Linux 2.4 and earlier"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In Linux 2.4 and earlier,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not take arguments"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ptid ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tls ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ctid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" gettid(2) returns current->pid;"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" getpid(2) returns current->tgid;"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success, the thread ID of the child process is returned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the caller's thread of execution."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On failure, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the caller's context, no child process will be created, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be set appropriately."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Too many processes are already running; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified, but"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Since Linux 2.6.0.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Precisely: Linux 2.6.0-test6"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified, but"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SIGHAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Since Linux 2.5.35.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B EINVAL"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Precisely one of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B CLONE_DETACHED"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B CLONE_THREAD"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" was specified."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" (Since Linux 2.6.0-test6.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified, but the current process previously called"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag or used"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to reassociate itself with a PID namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e66eded8309ebf679d3d3c1f5820d1f2ca332c71"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "were specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL \" (since Linux 3.9)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "were specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWIPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_SYSVSEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "were specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "One (or both) of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and one (or both) of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "were specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned by the glibc"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrapper function when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fn"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified as NULL."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWIPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the kernel was not configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_SYSVIPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_IPC_NS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "options."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the kernel was not configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_NET_NS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the kernel was not configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_PID_NS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the kernel was not configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_USER_NS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the kernel was not configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_UTS_NS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not aligned to a suitable boundary for this architecture."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, on aarch64,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " child_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be a multiple of 16."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Cannot allocate sufficient memory to allocate a task structure for the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "child, or to copy those parts of the caller's context that need to be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "copied."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f2302505775fd13ba93f034206f1e2a587017929"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in flags,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the limit on the nesting depth of PID namespaces"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would have been exceeded; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid_namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC \" (since Linux 4.9; beforehand \" EUSERS )"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the call would cause the limit on the number of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nested user namespaces to be exceeded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " user_namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "From Linux 3.11 to Linux 4.8, the error diagnosed in this case was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EUSERS ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC \" (since Linux 4.9)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "One of the values in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified the creation of a new user namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but doing so would have caused the limit defined by the corresponding file in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to be exceeded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For further details, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWCGROUP ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWIPC ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNET ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWNS ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWPID ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified by an unprivileged process (process without "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BCAP_SYS_ADMIN"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified by a process other than process 0."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This error occurs only on Linux 2.5.15 and earlier.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but either the effective user ID or the effective group ID of the caller"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not have a mapping in the parent namespace (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " user_namespaces (7))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM \" (since Linux 3.9)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 3151527ee007b73a0ebd296010f1c0454a919c7d"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the caller is in a chroot environment"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME What is the rationale for this restriction?"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(i.e., the caller's root directory does not match the root directory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the mount namespace in which it resides)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ERESTARTNOINTR \" (since Linux 2.6.17)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 4a2c7a7837da1b91468e50426066d988050e4d56"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "System call was interrupted by a signal and will be restarted."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This can be seen only during a trace.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EUSERS \" (Linux 3.11 to Linux 4.8)\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the limit on the number of nested user namespaces would be exceeded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the discussion of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "error above."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH VERSIONS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" There is no entry for"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR clone ()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in libc5."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" glibc2 provides"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR clone ()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as described in this manual page."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is Linux-specific and should not be used in programs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "intended to be portable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kcmp (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call can be used to test whether two processes share various"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resources such as a file descriptor table,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "System V semaphore undo operations, or a virtual address space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Handlers registered using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_atfork (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are not executed during a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the Linux 2.4.x series,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "generally does not make the parent of the new thread the same"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as the parent of the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, for kernel versions 2.4.7 to 2.4.18 the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag implied the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_PARENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag (as in Linux 2.6.0 and later)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For a while there was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_DETACHED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(introduced in 2.5.32):"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parent wants no child-exit signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In Linux 2.6.2, the need to give this flag together with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "disappeared."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is still defined, but has no effect."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On i386,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should not be called through vsyscall, but directly through"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int $0x80\" ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "GNU C library versions 2.3.4 up to and including 2.24"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contained a wrapper function for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that performed caching of PIDs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This caching relied on support in the glibc wrapper for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but limitations in the implementation"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "meant that the cache was not up to date in some circumstances."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In particular,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if a signal was delivered to the child immediately after the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call, then a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a handler for the signal could return the PID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the calling process (\"the parent\"),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the clone wrapper had not yet had a chance to update the PID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cache in the child."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This discussion ignores the case where the child was created using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_THREAD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " should"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return the same value in the child and in the process that called"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since the caller and the child are in the same thread group."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The stale-cache problem also does not occur if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument includes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_VM .)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To get the truth, it was sometimes necessary to use code such as the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <syscall.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "pid_t mypid;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "mypid = syscall(SYS_getpid);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See also the following bug reports"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" https://bugzilla.redhat.com/show_bug.cgi?id=417521"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://sourceware.org/bugzilla/show_bug.cgi?id=6910"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Because of the stale-cache problem, as well as other problems noted in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the PID caching feature was removed in glibc 2.25."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following program demonstrates the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to create a child process that executes in a separate UTS namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The child changes the hostname in its UTS namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Both parent and child then display the system hostname,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "making it possible to see that the hostname"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "differs in the UTS namespaces of the parent and child."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For an example of the use of this program, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/wait.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/utsname.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sched.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int              /* Start function for cloned child */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "childFunc(void *arg)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct utsname uts;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Change hostname in UTS namespace of child */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (sethostname(arg, strlen(arg)) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"sethostname\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Retrieve and display hostname */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (uname(&uts) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"uname\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"uts.nodename in child:  %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", uts.nodename);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Keep the namespace open for a while, by sleeping."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       This allows some experimentation"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "for example, another"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       process might join the namespace. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sleep(200);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return 0;           /* Child terminates now */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define STACK_SIZE (1024 * 1024)    /* Stack size for cloned child */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *stack;                    /* Start of stack buffer */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *stackTop;                 /* End of stack buffer */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pid_t pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct utsname uts;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc < 2) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Usage: %s <child"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "hostname>"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Allocate stack for child */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    stack = malloc(STACK_SIZE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (stack == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"malloc\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    stackTop = stack + STACK_SIZE;  /* Assume stack grows downward */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Create child that has its own UTS namespace;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       child commences execution in childFunc() */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    pid = clone(childFunc, stackTop, CLONE_NEWUTS | SIGCHLD, argv[1]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (pid == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"clone\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"clone() returned %ld"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", (long) pid);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Parent falls through to here */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sleep(1);           /* Give child time to change its hostname */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Display hostname in parent"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s UTS namespace. This will be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       different from hostname in child"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s UTS namespace. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (uname(&uts) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"uname\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"uts.nodename in parent: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", uts.nodename);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (waitpid(pid, NULL, 0) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)    /* Wait for child */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"waitpid\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"child has terminated"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " futex (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gettid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kcmp (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " set_thread_area (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " set_tid_address (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tkill (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wait (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthreads (7)"
        }
      ]
    ]
  }
]
