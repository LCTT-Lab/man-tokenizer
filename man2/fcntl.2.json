[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": "'\\\" t"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This manpage is Copyright (C) 1992 Drew Eckhardt;"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 1993 Michael Haardt, Ian Jackson;"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 1998 Jamie Lokier;"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 2002-2010, 2014 Michael Kerrisk;"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 2014 Jeff Layton"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 2014 David Herrmann"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 2017 Jens Axboe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 1993-07-24 by Rik Faith <faith@cs.unc.edu>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 1995-09-26 by Andries Brouwer <aeb@cwi.nl>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and again on 960413 and 980804 and 981223."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 1998-12-11 by Jamie Lokier <jamie@imbolc.ucc.ie>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Applied correction by Christian Ehrhardt - aeb, 990712"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 2002-04-23 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded note on F_SETFL and O_DIRECT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tComplete rewrite + expansion of material on file locking"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tIncorporated description of F_NOTIFY, drawing on"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t\tStephen Rothwell's notes in Documentation/dnotify.txt."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded description of F_SETLEASE and F_GETLEASE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Corrected and polished, aeb, 020527."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 2004-03-03 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Modified description of file leases: fixed some errors of detail"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Replaced the term \"lease contestant\" by \"lease breaker\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Added notes on capability requirements"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 2004-12-08, added O_NOATIME after note from Martin Pool"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2004-12-10, mtk, noted F_GETOWN bug after suggestion from aeb."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-04-08 Jamie Lokier <jamie@shareable.org>, mtk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tDescribed behavior of F_SETOWN/F_SETSIG in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tmultithreaded processes, and generally cleaned"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tup the discussion of F_SETOWN."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-05-20, Johannes Nicolai <johannes.nicolai@hpi.uni-potsdam.de>,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tmtk: Noted F_SETOWN bug for socket file descriptor in Linux 2.4"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tand earlier.  Added text on permissions required to send signal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2009-09-30, Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Note obsolete F_SETOWN behavior with threads."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Document F_SETOWN_EX and F_GETOWN_EX"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2010-06-17, Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tDocument F_SETPIPE_SZ and F_GETPIPE_SZ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2014-07-08, David Herrmann <dh.herrmann@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Document F_ADD_SEALS and F_GET_SEALS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2017-06-26, Jens Axboe <axboe@kernel.dk>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Document F_{GET,SET}_RW_HINT and F_{GET,SET}_FILE_RW_HINT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FCNTL 2 2018-02-02 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "fcntl "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " manipulate file descriptor"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <unistd.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <fcntl.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int fcntl(int \" fd \", int \" cmd \", ... /* \" arg \" */ );\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performs one of the operations described below on the open file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The operation is determined by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can take an optional third argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Whether or not this argument is required is determined by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The required argument type is indicated in parentheses after each"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "name (in most cases, the required type is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " int ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and we identify the argument using the name"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified if the argument is not required."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Certain of the operations below are supported only since a particular"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux kernel version."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The preferred method of checking whether the host kernel supports"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a particular operation is to invoke"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the desired"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value and then test whether the call failed with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicating that the kernel does not recognize this value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Duplicating a file descriptor"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Duplicate the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the lowest-numbered available file descriptor greater than or equal to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is different from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup2 (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which uses exactly the file descriptor specified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success, the new file descriptor is returned."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for further details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD_CLOEXEC \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 2.6.24)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "As for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but additionally set the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "close-on-exec flag for the duplicate file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Specifying this flag permits a program to avoid an additional"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_CLOEXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For an explanation of why this flag is useful,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_CLOEXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " File descriptor flags"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following commands manipulate the flags associated with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Currently, only one such flag is defined:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_CLOEXEC ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the close-on-exec flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_CLOEXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit is set,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file descriptor will automatically be closed during a successful"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fails, the file descriptor is left open.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_CLOEXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit is not set, the file descriptor will remain open across an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETFD \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return (as the function result) the file descriptor flags;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFD \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set the file descriptor flags to the value specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In multithreaded programs, using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to set the close-on-exec flag at the same time as another thread performs a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "plus"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is vulnerable to a race condition that may unintentionally leak"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file descriptor to the program executed in the child process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the discussion of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_CLOEXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details and a remedy to the problem."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " File status flags"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each open file description has certain associated status flags,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initialized by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR creat (2),"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and possibly modified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Duplicated file descriptors"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(made with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (F_DUPFD),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "etc.) refer to the same open file description, and thus"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "share the same file status flags."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The file status flags and their semantics are described in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETFL \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return (as the function result)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file access mode and the file status flags;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFL \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set the file status flags to the value specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "File access mode"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( O_RDONLY \", \" O_WRONLY \", \" O_RDWR )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and file creation flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_CREAT \", \" O_EXCL \", \" O_NOCTTY \", \" O_TRUNC )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are ignored."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On Linux, this command can change only the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_APPEND ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_ASYNC ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_DIRECT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NOATIME ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flags."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is not possible to change the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_DSYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_SYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flags; see BUGS, below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Advisory record locking"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Linux implements traditional (\"process-associated\") UNIX record locks,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as standardized by POSIX."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For a Linux-specific alternative with better semantics,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see the discussion of open file description locks below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are used to acquire, release, and test for the existence of record"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "locks (also known as byte-range, file-segment, or file-region locks)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The third argument,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a pointer to a structure that has at least the following fields"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(in unspecified order)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct flock {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    short l_type;    /* Type of lock: F_RDLCK,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        F_WRLCK, F_UNLCK */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    short l_whence;  /* How to interpret l_start:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        SEEK_SET, SEEK_CUR, SEEK_END */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    off_t l_start;   /* Starting offset for lock */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    off_t l_len;     /* Number of bytes to lock */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pid_t l_pid;     /* PID of process blocking our lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        (set by F_GETLK and F_OFD_GETLK) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence \", \" l_start \", and \" l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields of this structure specify the range of bytes we wish to lock."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bytes past the end of the file may be locked,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but not bytes before the start of the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_start"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the starting offset for the lock, and is interpreted"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "relative to either:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the start of the file (if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SEEK_SET );"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the current file offset (if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SEEK_CUR );"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the end of the file (if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SEEK_END )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the final two cases,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_start"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be a negative number provided the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "offset does not lie before the start of the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies the number of bytes to be locked."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is positive, then the range to be locked covers bytes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_start"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "up to and including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_start + l_len "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Specifying 0 for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has the special meaning: lock all bytes starting at the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "location specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence \" and \" l_start"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "through to the end of file, no matter how large the file grows."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX.1-2001 allows (but does not require)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an implementation to support a negative"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value; if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is negative, the interval described by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "covers bytes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_start + l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "up to and including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_start "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is supported by Linux since kernel versions 2.4.21 and 2.5.49."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field can be used to place a read"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( F_RDLCK )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or a write"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( F_WRLCK )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lock on a file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any number of processes may hold a read lock (shared lock)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on a file region, but only one process may hold a write lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(exclusive lock)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An exclusive lock excludes all other locks,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "both shared and exclusive."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A single process can hold only one type of lock on a file region;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if a new lock is applied to an already-locked region,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the existing lock is converted to the new lock type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Such conversions may involve splitting, shrinking, or coalescing with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an existing lock if the byte range specified by the new lock does not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "precisely coincide with the range of the existing lock.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct flock *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Acquire a lock (when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_RDLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_WRLCK )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or release a lock (when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the bytes specified by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence \", \" l_start \", and \" l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a conflicting lock is held by another process,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this call returns "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 and sets"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EACCES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The error returned in this case differs across implementations,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so POSIX requires a portable application to check for both errors.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct flock *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "As for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but if a conflicting lock is held on the file, then wait for that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lock to be released."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a signal is caught while waiting, then the call is interrupted"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and (after the signal handler has returned)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns immediately (with return value "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINTR ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " signal (7))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct flock *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On input to this call,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "describes a lock we would like to place on the file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the lock could be placed,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not actually place it, but returns"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and leaves the other fields of the structure unchanged."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If one or more incompatible locks would prevent"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this lock being placed, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns details about one of those locks in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type \", \" l_whence \", \" l_start \", and \" l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the conflicting lock is a traditional (process-associated) record lock,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is set to the PID of the process holding that lock."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the conflicting lock is an open file description lock, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that the returned information"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may already be out of date by the time the caller inspects it."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In order to place a read lock,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be open for reading."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In order to place a write lock,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be open for writing."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To place both types of lock, open a file read-write."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When placing locks with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel detects"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " deadlocks ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whereby two or more processes have their"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lock requests mutually blocked by locks held by the other processes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, suppose process A holds a write lock on byte 100 of a file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and process B holds a write lock on byte 200."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If each process then attempts to lock the byte already"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "locked by the other process using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then, without deadlock detection,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "both processes would remain blocked indefinitely."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the kernel detects such deadlocks,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it causes one of the blocking lock requests to immediately fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EDEADLK ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an application that encounters such an error should release"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "some of its locks to allow other applications to proceed before"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attempting regain the locks that it requires."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Circular deadlocks involving more than two processes are also detected."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note, however, that there are limitations to the kernel's"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "deadlock-detection algorithm; see BUGS."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As well as being removed by an explicit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "record locks are automatically released when the process terminates."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Record locks are not inherited by a child created via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but are preserved across an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Because of the buffering performed by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stdio (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "library, the use of record locking with routines in that package"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should be avoided; use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instead."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The record locks described above are associated with the process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(unlike the open file description locks described below)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This has some unfortunate consequences:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If a process closes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor referring to a file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then all of the process's locks on that file are released,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "regardless of the file descriptor(s) on which the locks were obtained."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" (Additional file descriptors referring to the same file"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" may have been obtained by calls to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR open \"(2), \" dup \"(2), \" dup2 \"(2), or \" fcntl ().)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is bad: it means that a process can lose its locks on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a file such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /etc/passwd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /etc/mtab"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when for some reason a library function decides to open, read,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and close the same file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The threads in a process share locks."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a multithreaded program can't use record locking to ensure"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that threads don't simultaneously access the same region of a file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Open file description locks solve both of these problems."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Open file description locks (non-POSIX)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Open file description locks are advisory byte-range locks whose operation is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in most respects identical to the traditional record locks described above."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This lock type is Linux-specific,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and available since Linux 3.15."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(There is a proposal with the Austin Group"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . Review progress into POSIX"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://austingroupbugs.net/view.php?id=768"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "to include this lock type in the next revision of POSIX.1.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For an explanation of open file descriptions, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The principal difference between the two lock types"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is that whereas traditional record locks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are associated with a process,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "open file description locks are associated with the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "open file description on which they are acquired,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "much like locks acquired with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently (and unlike traditional advisory record locks),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "open file description locks are inherited across"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FILES ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and are only automatically released on the last close"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the open file description,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instead of being released on any close of the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Conflicting lock combinations"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., a read lock and a write lock or two write locks)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where one lock is an open file description lock and the other"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a traditional record lock conflict"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "even when they are acquired by the same process on the same file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Open file description locks placed via the same open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., via the same file descriptor,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or via a duplicate of the file descriptor created by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and so on) are always compatible:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if a new lock is placed on an already locked region,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the existing lock is converted to the new lock type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Such conversions may result in splitting, shrinking, or coalescing with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an existing lock as discussed above.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On the other hand, open file description locks may conflict with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "each other when they are acquired via different open file descriptions."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, the threads in a multithreaded program can use"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "open file description locks to synchronize access to a file region"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by having each thread perform its own"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the file and applying locks via the resulting file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As with traditional advisory locks, the third argument to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a pointer to an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "By contrast with traditional record locks, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of that structure must be set to zero"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when using the commands described below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The commands for working with open file description locks are analogous"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to those used with traditional locks:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLK \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct flock *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Acquire an open file description lock (when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_RDLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_WRLCK )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or release an open file description lock (when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the bytes specified by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_whence \", \" l_start \", and \" l_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a conflicting lock is held by another process,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this call returns "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 and sets"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLKW \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct flock *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "As for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but if a conflicting lock is held on the file, then wait for that lock to be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "released."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a signal is caught while waiting, then the call is interrupted"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and (after the signal handler has returned) returns immediately"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(with return value "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINTR ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " signal (7))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_GETLK \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct flock *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On input to this call,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "describes an open file description lock we would like to place on the file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the lock could be placed,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not actually place it, but returns"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and leaves the other fields of the structure unchanged."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If one or more incompatible locks would prevent this lock being placed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then details about one of these locks are returned via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as described above for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the current implementation,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 57b65325fe34ec4c917bc4e555144b4a94d9e1f7"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "no deadlock detection is performed for open file description locks."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This contrasts with process-associated record locks,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for which the kernel does perform deadlock detection.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Mandatory locking"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Warning :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the Linux implementation of mandatory locking is unreliable."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See BUGS below."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Because of these bugs,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the fact that the feature is believed to be little used,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since Linux 4.5, mandatory locking has been made an optional feature,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "governed by a configuration option"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CONFIG_MANDATORY_FILE_LOCKING )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is an initial step toward removing this feature completely."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "By default, both traditional (process-associated) and open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "record locks are advisory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Advisory locks are not enforced and are useful only between"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cooperating processes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Both lock types can also be mandatory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Mandatory locks are enforced for all processes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a process tries to perform an incompatible access (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on a file region that has an incompatible mandatory lock,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the result depends upon whether the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is enabled for its open file description."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is not enabled, then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the system call is blocked until the lock is removed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or converted to a mode that is compatible with the access."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is enabled, then the system call fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To make use of mandatory locks, mandatory locking must be enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "both on the filesystem that contains the file to be locked,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and on the file itself."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Mandatory locking is enabled on a filesystem"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the \""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "o mand\" option to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mount (8),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MS_MANDLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mount (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Mandatory locking is enabled on a file by disabling"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "group execute permission on the file and enabling the set-group-ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "permission bit (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chmod (1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chmod (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Mandatory locking is not specified by POSIX."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Some other systems also support mandatory locking,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "although the details of how to enable it vary across systems."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Lost locks"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When an advisory lock is obtained on a networked filesystem such as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "NFS it is possible that the lock might get lost."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This may happen due to administrative action on the server, or due to a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "network partition (i.e., loss of network connectivity with the server)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which lasts long enough for the server to assume"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that the client is no longer functioning."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When the filesystem determines that a lock has been lost, future"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requests may fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EIO ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This error will persist until the lock is removed or the file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "descriptor is closed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since Linux 3.12,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ef1820f9be27b6ad158f433ab38002ab8131db4d"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "this happens at least for NFSv4 (including all minor versions)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Some versions of UNIX send a signal"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SIGLOST )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in this circumstance."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux does not define this signal, and does not provide any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "asynchronous notification of lost locks."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Managing signals"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN_EX ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are used to manage I/O availability signals:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return (as the function result)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process ID or process group currently receiving"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals for events on file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Process IDs are returned as positive values;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process group IDs are returned as negative values (but see BUGS below)."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set the process ID or process group ID that will receive"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals for events on the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The target process or process group ID is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A process ID is specified as a positive value;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a process group ID is specified as a negative value."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Most commonly, the calling process specifies itself as the owner"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(that is,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As well as setting the file descriptor owner,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "one must also enable generation of signals on the file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is done by using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_ASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file status flag on the file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Subsequently, a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal is sent whenever input or output becomes possible"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command can be used to obtain delivery of a signal other than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Sending a signal to the owner process (group) specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is subject to the same permissions checks as are described for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kill (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where the sending process is the one that employs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(but see BUGS below)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this permission check fails, then the signal is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "silently discarded."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation records the caller's credentials at the time of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and it is these saved credentials that are used for the permission checks."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "refers to a socket,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "also selects"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the recipient of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals that are delivered when out-of-band"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data arrives on that socket."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is sent in any situation where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would report the socket as having an \"exceptional condition\".)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following appears to be rubbish.  It doesn't seem to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" be true according to the kernel source, and I can write"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" a program that gets a terminal-generated SIGIO even though"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" it is not the foreground process group of the terminal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" -- MTK, 8 Apr 05"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If the file descriptor"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I fd"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" refers to a terminal device, then SIGIO"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" signals are sent to the foreground process group of the terminal."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following was true in 2.6.x kernels up to and including"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "kernel 2.6.11:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If a nonzero value is given to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a multithreaded process running with a threading library"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that supports thread groups (e.g., NPTL),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then a positive value given to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has a different meaning:"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The relevant place in the (2.6) kernel source is the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 'switch' in fs/fcntl.c::send_sigio_to_task() -- MTK, Apr 2005"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "instead of being a process ID identifying a whole process,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is a thread ID identifying a specific thread within a process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently, it may be necessary to pass"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the result of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gettid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instead of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to get sensible results when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(In current Linux threading implementations,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a main thread's thread ID is the same as its process ID."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means that a single-threaded program can equally use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gettid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in this scenario.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note, however, that the statements in this paragraph do not apply"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal generated for out-of-band data on a socket:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this signal is always sent to either a process or a process group,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depending on the value given to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" send_sigurg()/send_sigurg_to_task() bypasses"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" kill_fasync()/send_sigio()/send_sigio_to_task()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to directly call send_group_sig_info()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t-- MTK, Apr 2005 (kernel 2.6.11)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The above behavior was accidentally dropped in Linux 2.6.12,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and won't be restored."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "From Linux 2.6.32 onward, use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to target"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals at a particular thread."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN_EX \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct f_owner_ex *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P) (since Linux 2.6.32)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return the current file descriptor owner settings"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as defined by a previous"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The information is returned in the structure pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which has the following form:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct f_owner_ex {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int   type;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pid_t pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field will have one of the values"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OWNER_TID ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OWNER_PID ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OWNER_PGRP ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is a positive integer representing a thread ID, process ID,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or process group ID."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for more details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct f_owner_ex *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P) (since Linux 2.6.32)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This operation performs a similar task to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It allows the caller to direct I/O availability signals"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to a specific thread, process, or process group."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The caller specifies the target of signals via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is a pointer to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " f_owner_ex"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field has one of the following values, which define how"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is interpreted:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OWNER_TID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Send the signal to the thread whose thread ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the value returned by a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gettid (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OWNER_PID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Send the signal to the process whose ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OWNER_PGRP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Send the signal to the process group whose ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Note that, unlike with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a process group ID is specified as a positive value here.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETSIG \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return (as the function result)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the signal sent when input or output becomes possible."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A value of zero means"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is sent."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any other value (including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal sent instead, and in this case additional info is available to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the signal handler if installed with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SA_SIGINFO ."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set the signal sent when input or output becomes possible"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the value given in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A value of zero means to send the default"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any other value (including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the signal to send instead, and in this case additional info"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is available to the signal handler if installed with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SA_SIGINFO ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following was true only up until 2.6.11:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Additionally, passing a nonzero value to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B F_SETSIG"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" changes the signal recipient from a whole process to a specific thread"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" within a process."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See the description of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B F_SETOWN"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" for more details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "By using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a nonzero value, and setting"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SA_SIGINFO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal handler (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaction (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "extra information about I/O events is passed to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the handler in a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " siginfo_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_code"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field indicates the source is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SI_SIGIO ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field gives the file descriptor associated with the event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there is no indication which file descriptors are pending, and you"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should use the usual mechanisms"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( select (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set etc.) to determine which file descriptors are available for I/O."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that the file descriptor provided in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the one that was specified during the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can lead to an unusual corner case."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the file descriptor is duplicated"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( dup (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or similar), and the original file descriptor is closed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then I/O events will continue to be generated, but the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field will contain the number of the now closed file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "By selecting a real time signal (value >="
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGRTMIN ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "multiple I/O events may be queued using the same signal numbers."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Queuing is dependent on available memory.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Extra information is available"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SA_SIGINFO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set for the signal handler, as above."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that Linux imposes a limit on the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "number of real-time signals that may be queued to a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getrlimit (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " signal (7))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and if this limit is reached, then the kernel reverts to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "delivering"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and this signal is delivered to the entire"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process rather than to a specific thread."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See fs/fcntl.c::send_sigio_to_task() (2.4/2.6) sources -- MTK, Apr 05"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Using these mechanisms, a program can implement fully asynchronous I/O"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "most of the time."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_ASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specific to BSD and Linux."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The only use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified in POSIX.1 is in conjunction with the use of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal on sockets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(POSIX does not specify the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal.)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN_EX ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETSIG ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are Linux-specific."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "POSIX has asynchronous I/O and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aio_sigevent"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure to achieve similar things; these are also available"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in Linux as part of the GNU C Library (Glibc)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Leases"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Linux 2.4 onward) are used to establish a new lease,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and retrieve the current lease, on the open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A file lease provides a mechanism whereby the process holding"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the lease (the \"lease holder\") is notified (via delivery of a signal)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when a process (the \"lease breaker\") tries to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file referred to by that file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLEASE \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set or remove a file lease according to which of the following"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values is specified in the integer"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_RDLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Take out a read lease."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This will cause the calling process to be notified when"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file is opened for writing or is truncated."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following became true in kernel 2.6.10:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See the man-pages-2.09 Changelog for further info."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A read lease can be placed only on a file descriptor that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is opened read-only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_WRLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Take out a write lease."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This will cause the caller to be notified when"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file is opened for reading or writing or is truncated."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A write lease may be placed on a file only if there are no"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "other open file descriptors for the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remove our lease from the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Leases are associated with an open file description (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means that duplicate file descriptors (created by, for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "refer to the same lease, and this lease may be modified"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or released using any of these descriptors."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Furthermore, the lease is released by either an explicit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation on any of these duplicate file descriptors, or when all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "such file descriptors have been closed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Leases may be taken out only on regular files."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An unprivileged process may take out a lease only on a file whose"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "UID (owner) matches the filesystem UID of the process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A process with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_LEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability may take out leases on arbitrary files."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLEASE \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Indicates what type of lease is associated with the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by returning either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_RDLCK \", \" F_WRLCK \", or \" F_UNLCK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicating, respectively, a read lease , a write lease, or no lease."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a process (the \"lease breaker\") performs an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that conflicts with a lease established via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLEASE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the system call is blocked by the kernel and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel notifies the lease holder by sending it a signal"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by default)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The lease holder should respond to receipt of this signal by doing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whatever cleanup is required in preparation for the file to be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "accessed by another process (e.g., flushing cached buffers) and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then either remove or downgrade its lease."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A lease is removed by performing an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the lease holder currently holds a write lease on the file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the lease breaker is opening the file for reading,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then it is sufficient for the lease holder to downgrade"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the lease to a read lease."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is done by performing an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_RDLCK ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the lease holder fails to downgrade or remove the lease within"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the number of seconds specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/fs/lease-break-time ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the kernel forcibly removes or downgrades the lease holder's lease."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once a lease break has been initiated,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the target lease type (either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_RDLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_UNLCK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depending on what would be compatible with the lease breaker)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "until the lease holder voluntarily downgrades or removes the lease or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel forcibly does so after the lease break timer expires."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once the lease has been voluntarily or forcibly removed or downgraded,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and assuming the lease breaker has not unblocked its system call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel permits the lease breaker's system call to proceed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the lease breaker's blocked"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is interrupted by a signal handler,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the system call fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINTR ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the other steps still occur as described above."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the lease breaker is killed by a signal while blocked in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the other steps still occur as described above."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the lease breaker specifies the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag when calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the call immediately fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EWOULDBLOCK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the other steps still occur as described above."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default signal used to notify the lease holder is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but this can be changed using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command is performed (even one specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the signal"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "handler is established using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SA_SIGINFO ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the handler will receive a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " siginfo_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure as its second argument, and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of this argument will hold the file descriptor of the leased file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that has been accessed by another process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This is useful if the caller holds leases against multiple files.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " File and directory change notification (dnotify)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_NOTIFY \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Linux 2.4 onward)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Provide notification when the directory referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or any of the files that it contains is changed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The events to be notified are specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is a bit mask specified by ORing together zero or more of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the following bits:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 12"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_ACCESS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A file was accessed"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pread (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " readv (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and similar)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_MODIFY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A file was modified"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( write (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pwrite (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " writev (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ftruncate (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and similar)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_CREATE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A file was created"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( open (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " creat (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mknod (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mkdir (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " link (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " symlink (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rename (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "into this directory)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_DELETE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A file was unlinked"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( unlink (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rename (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to another directory,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rmdir (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_RENAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A file was renamed within this directory"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( rename (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_ATTRIB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The attributes of a file were changed"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( chown (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chmod (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " utime (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " utimensat (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and similar)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(In order to obtain these definitions, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "feature test macro must be defined before including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "header files.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Directory notifications are normally \"one-shot\", and the application"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must reregister to receive further notifications."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Alternatively, if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_MULTISHOT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is included in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then notification will remain in effect until explicitly removed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following does seem a poor API-design choice..."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A series of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_NOTIFY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requests is cumulative, with the events in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being added to the set already monitored."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To disable notification of all events, make an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_NOTIFY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Notification occurs via delivery of a signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default signal is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but this can be changed using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Note that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is one of the nonqueuing standard signals;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "switching to the use of a real-time signal means that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "multiple notifications can be queued to the process.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the latter case, the signal handler receives a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " siginfo_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure as its second argument (if the handler was"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "established using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SA_SIGINFO )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of this structure contains the file descriptor which"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "generated the notification (useful when establishing notification"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on multiple directories)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Especially when using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DN_MULTISHOT ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a real time signal should be used for notification,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that multiple notifications can be queued."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NOTE:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New applications should use the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inotify"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interface (available since kernel 2.6.13),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which provides a much superior interface for obtaining notifications of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "filesystem events."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inotify (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Changing the capacity of a pipe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETPIPE_SZ \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 2.6.35)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Change the capacity of the pipe referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to be at least"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An unprivileged process can adjust the pipe capacity to any value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "between the system page size and the limit defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/fs/pipe-max-size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " proc (5))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Attempts to set the pipe capacity below the page size are silently"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "rounded up to the page size."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Attempts by an unprivileged process to set the pipe capacity above the limit in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/fs/pipe-max-size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "yield the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a privileged process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_RESOURCE )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can override the limit."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When allocating the buffer for the pipe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel may use a capacity larger than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if that is convenient for the implementation."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(In the current implementation,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the allocation is the next higher power-of-two page-size multiple"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the requested size.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The actual capacity (in bytes) that is set is returned as the function result."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Attempting to set the pipe capacity smaller than the amount"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of buffer space currently used to store data produces the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBUSY ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that because of the way the pages of the pipe buffer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are employed when data is written to the pipe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the number of bytes that can be written may be less than the nominal size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depending on the size of the writes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETPIPE_SZ \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 2.6.35)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return (as the function result) the capacity of the pipe referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " File Sealing"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "File seals limit the set of allowed operations on a given file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For each seal that is set on a file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a specific set of operations will fail with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on this file from now on."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The file is said to be sealed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default set of seals depends on the type of the underlying"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file and filesystem."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For an overview of file sealing, a discussion of its purpose,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and some code examples, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " memfd_create (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Currently,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file seals can be applied only to a file descriptor returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " memfd_create (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MFD_ALLOW_SEALING"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was employed)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On other filesystems, all"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operations that operate on seals will return"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Seals are a property of an inode."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, all open file descriptors referring to the same inode share"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the same set of seals."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Furthermore, seals can never be removed, only added."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iint"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 3.17)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Add the seals given in the bit-mask argument"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the set of seals of the inode referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Seals cannot be removed again."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Once this call succeeds, the seals are enforced by the kernel immediately."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the current set of seals includes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_SEAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see below), then this call will be rejected with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Adding a seal that is already set is a no-op, in case"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_SEAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set already."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In order to place a seal, the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be writable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GET_SEALS \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ivoid"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 3.17)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return (as the function result) the current set of seals"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the inode referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If no seals are set, 0 is returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the file does not support sealing, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following seals are available:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_SEAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this seal is set, any further call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Therefore, this seal prevents any modifications to the set of seals itself."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the initial set of seals of a file includes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_SEAL ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then this effectively causes the set of seals to be constant and locked."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_SHRINK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this seal is set, the file in question cannot be reduced in size."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This affects"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_TRUNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag as well as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ftruncate (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Those calls fail with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if you try to shrink the file in question."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Increasing the file size is still possible."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_GROW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this seal is set, the size of the file in question cannot be increased."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This affects"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "beyond the end of the file,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ftruncate (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fallocate (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These calls fail with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if you use them to increase the file size."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If you keep the size or shrink it, those calls still work as expected."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_WRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this seal is set, you cannot modify the contents of the file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that shrinking or growing the size of the file is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "still possible and allowed."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" One or more other seals are typically used with F_SEAL_WRITE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" because, given a file with the F_SEAL_WRITE seal set, then,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" while it would no longer be possible to (say) write zeros into"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the last 100 bytes of a file, it would still be possible"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to (say) shrink the file by 100 bytes using ftruncate(), and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" then increase the file size by 100 bytes, which would have"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the effect of replacing the last hundred bytes by zeros."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Thus, this seal is normally used in combination with one of the other seals."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This seal affects"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fallocate (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(only in combination with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FALLOC_FL_PUNCH_HOLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Those calls fail with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if this seal is set."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Furthermore, trying to create new shared, writable memory-mappings via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will also fail with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_WRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "seal fails with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBUSY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if any writable, shared mapping exists."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Such mappings must be unmapped before you can add this seal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Furthermore, if there are any asynchronous I/O operations"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( io_submit (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pending on the file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all outstanding writes will be discarded."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " File read/write hints"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Write lifetime hints can be used to inform the kernel about the relative"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "expected lifetime of writes on a given inode or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "via a particular open file description."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for an explanation of open file descriptions.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this context, the term \"write lifetime\" means"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the expected time the data will live on media, before"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being overwritten or erased."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "An application may use the different hint values specified below to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "separate writes into different write classes,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that multiple users or applications running on a single storage back-end"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can aggregate their I/O patterns in a consistent manner."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, there are no functional semantics implied by these flags,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and different I/O classes can use the write lifetime hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in arbitrary ways, so long as the hints are used consistently."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following operations can be applied to the file descriptor,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GET_RW_HINT \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iuint64_t *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 4.13)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returns the value of the read/write hint associated with the underlying inode"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SET_RW_HINT \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iuint64_t *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 4.13)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sets the read/write hint value associated with the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "underlying inode referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This hint persists until either it is explicitly modified or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the underlying filesystem is unmounted."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GET_FILE_RW_HINT \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iuint64_t *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 4.13)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returns the value of the read/write hint associated with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the open file description referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SET_FILE_RW_HINT \" ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iuint64_t *"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P; since Linux 4.13)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sets the read/write hint value associated with the open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If an open file description has not been assigned a read/write hint,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then it shall use the value assigned to the inode, if any."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following read/write"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "hints are valid since Linux 4.13:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_NOT_SET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "No specific hint has been set."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is the default value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_NONE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "No specific write lifetime is associated with this file or inode."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_SHORT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Data written to this inode or via this open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is expected to have a short lifetime."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_MEDIUM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Data written to this inode or via this open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is expected to have a lifetime longer than"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data written with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_SHORT ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_LONG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Data written to this inode or via this open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is expected to have a lifetime longer than"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data written with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_MEDIUM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_EXTREME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Data written to this inode or via this open file description"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is expected to have a lifetime longer than"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data written with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RWH_WRITE_LIFE_LONG ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All the write-specific hints are relative to each other,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and no individual absolute meaning should be attributed to them."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For a successful call, the return value depends on the operation:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0.9i"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The new file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Value of file descriptor flags."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETFL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Value of file status flags."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Type of lease held on file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Value of file descriptor owner."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Value of signal sent when read or write becomes possible, or zero"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for traditional"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "behavior."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETPIPE_SZ \", \" F_SETPIPE_SZ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The pipe capacity."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GET_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A bit mask identifying the seals that have been set"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the inode referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All other commands"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On error, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set appropriately."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EACCES \" or \" EAGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Operation is prohibited by locks held by other processes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The operation is prohibited because the file has been memory-mapped by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "another process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBADF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not an open file descriptor"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBADF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the file descriptor open mode doesn't match with the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "type of lock requested."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBUSY"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETPIPE_SZ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the new pipe capacity specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is smaller than the amount of buffer space currently"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "used to store data in the pipe."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBUSY"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "includes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_WRITE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and there exists a writable, shared mapping on the file referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EDEADLK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It was detected that the specified"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command would cause a deadlock."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is outside your accessible address space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINTR"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLKW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the operation was interrupted by a signal; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " signal (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINTR"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_GETLK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the operation was interrupted by a signal before the lock was checked or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "acquired."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Most likely when locking a remote file (e.g., locking over"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "NFS), but can sometimes happen locally."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not recognized by this kernel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "includes an unrecognized sealing bit."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GET_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the filesystem containing the inode referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not support sealing."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is negative or is greater than the maximum allowable value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see the discussion of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RLIMIT_NOFILE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getrlimit (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not an allowable signal number."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLK ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLKW ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_GETLK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not specified as zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EMFILE"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the per-process limit on the number of open file descriptors"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has been reached."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOLCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Too many segment locks open, lock table is full, or a remote locking"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "protocol failed (e.g., locking over NFS)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOTDIR"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_NOTIFY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not refer to a directory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETPIPE_SZ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the soft or hard user pipe limit has been reached; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pipe (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Attempted to clear the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_APPEND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag on a file that has the append-only attribute set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not open for writing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the current set of seals on the file already includes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SEAL_SEAL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "SVr4, 4.3BSD, POSIX.1-2001."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Only the operations"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETFD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETFL ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFL ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are specified in POSIX.1-2001."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are specified in POSIX.1-2001."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(To get their definitions, define either"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR _BSD_SOURCE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _XOPEN_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the value 500 or greater, or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _POSIX_C_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the value 200809L or greater.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD_CLOEXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified in POSIX.1-2008."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(To get this definition, define"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _POSIX_C_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the value 200809L or greater, or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _XOPEN_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the value 700 or greater.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN_EX ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETPIPE_SZ ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETPIPE_SZ ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETSIG ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_NOTIFY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLEASE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLEASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are Linux-specific."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Define the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro to obtain these definitions.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .PP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SVr4 documents additional EIO, ENOLINK and EOVERFLOW error conditions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLK ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_SETLKW ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_OFD_GETLK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are Linux-specific (and one must define"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to obtain their definitions),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but work is being done to have them included in the next version of POSIX.1."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_ADD_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GET_SEALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are Linux-specific."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . Once glibc adds support, add a note about FTM requirements"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The errors returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup2 (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are different from those returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_DUPFD ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " File locking"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The original Linux"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call was not designed to handle large file offsets"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently, an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl64 ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call was added in Linux 2.4."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The newer system call employs a different structure for file locking,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock64 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and corresponding commands,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK64 ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK64 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW64 ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, these details can be ignored by applications using glibc, whose"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrapper function transparently employs the more recent system call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where it is available."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Record locks"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since kernel 2.0, there is no interaction between the types of lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "placed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Several systems have more fields in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct flock\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "such as, for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_sysid ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" e.g., Solaris 8 documents this field in fcntl(2), and Irix 6.5"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" documents it in fcntl(5).  mtk, May 2007"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Also, FreeBSD documents it (Apr 2014)."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Clearly,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l_pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "alone is not going to be very useful if the process holding the lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may live on a different machine."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The original Linux"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call was not designed to handle large file offsets"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently, an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl64 ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call was added in Linux 2.4."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The newer system call employs a different structure for file locking,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock64 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and corresponding commands,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETLK64 ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLK64 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW64 ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, these details can be ignored by applications using glibc, whose"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrapper function transparently employs the more recent system call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where it is available."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Record locking and NFS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Before Linux 3.12, if an NFSv4 client"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "loses contact with the server for a period of time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(defined as more than 90 seconds with no communication),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Neil Brown: With NFSv3 the failure mode is the reverse.  If"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     the server loses contact with a client then any lock stays in place"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     indefinitely (\"why can't I read my mail\"... I remember it well)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "it might lose and regain a lock without ever being aware of the fact."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The period of time after which contact is assumed lost is known as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the NFSv4 leasetime."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On a Linux NFS server, this can be determined by looking at"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/fs/nfsd/nfsv4leasetime ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which expresses the period in seconds."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default value for this file is 90.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Jeff Layton:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Note that this is not a firm timeout. The server runs a job"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     periodically to clean out expired stateful objects, and it's likely"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     that there is some time (maybe even up to another whole lease period)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     between when the timeout expires and the job actually runs. If the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     client gets a RENEW in there within that window, its lease will be"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     renewed and its state preserved."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This scenario potentially risks data corruption,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since another process might acquire a lock in the intervening period"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and perform file I/O."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 3.12,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ef1820f9be27b6ad158f433ab38002ab8131db4d"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "if an NFSv4 client loses contact with the server,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "any I/O to the file by a process which \"thinks\" it holds"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a lock will fail until that process closes and reopens the file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A kernel parameter,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nfs.recover_lost_locks ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be set to 1 to obtain the pre-3.12 behavior,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whereby the client will attempt to recover lost locks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when contact is reestablished with the server."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Because of the attendant risk of data corruption,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f6de7a39c181dfb8a2c534661a53c73afb3081cd"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "this parameter defaults to 0 (disabled)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " F_SETFL"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "It is not possible to use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETFL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to change the state of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_DSYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_SYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flags."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . According to POSIX.1-2001, O_SYNC should also be modifiable"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" via fcntl(2), but currently Linux does not permit this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See http://bugzilla.kernel.org/show_bug.cgi?id=5994"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Attempts to change the state of these flags are silently ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A limitation of the Linux system call conventions on some"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "architectures (notably i386) means that if a (negative)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process group ID to be returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "falls in the range "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 to "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "4095, then the return value is wrongly"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interpreted by glibc as an error in the system call;"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" glibc source: sysdeps/unix/sysv/linux/i386/sysdep.h"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "that is, the return value of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will contain the (positive) process group ID."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The Linux-specific"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN_EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation avoids this problem."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" mtk, Dec 04: some limited testing on alpha and ia64 seems to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" indicate that ANY negative PGID value will cause F_GETOWN"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to misinterpret the return as an error. Some other architectures"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" seem to have the same range check as i386."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since glibc version 2.11, glibc makes the kernel"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "problem invisible by implementing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_GETOWN_EX ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In Linux 2.4 and earlier, there is bug that can occur"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when an unprivileged process uses"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to specify the owner"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of a socket file descriptor"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as a process (group) other than the caller."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "even when the owner process (group) is one that the caller"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has permission to send signals to."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Despite this error return, the file descriptor owner is set,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and signals will be sent to the owner."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Deadlock detection"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The deadlock-detection algorithm employed by the kernel when dealing with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETLKW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requests can yield both"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "false negatives (failures to detect deadlocks,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "leaving a set of deadlocked processes blocked indefinitely)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and false positives"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( EDEADLK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "errors when there is no deadlock)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel limits the lock depth of its dependency search to 10 steps,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "meaning that circular deadlock chains that exceed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that size will not be detected."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition, the kernel may falsely indicate a deadlock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when two or more processes created using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_FILES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag place locks that appear (to the kernel) to conflict."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Mandatory locking"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The Linux implementation of mandatory locking"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is subject to race conditions which render it unreliable:"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://marc.info/?l=linux-kernel&m=119013491707153&w=2"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Reconfirmed by Jeff Layton"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     From: Jeff Layton <jlayton <at> redhat.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Subject: Re: Status of fcntl() mandatory locking"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Newsgroups: gmane.linux.file-systems"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Date: 2014-04-28 10:07:57 GMT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     http://thread.gmane.org/gmane.linux.file-systems/84481/focus=84518"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call that overlaps with a lock may modify data after the mandatory lock is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "acquired;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call that overlaps with a lock may detect changes to data that were made"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only after a write lock was acquired."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Similar races exist between mandatory locks and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is therefore inadvisable to rely on mandatory locking."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup2 (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flock (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lockf (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " feature_test_macros (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lslocks (8)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " locks.txt ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mandatory-locking.txt ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dnotify.txt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the Linux kernel source directory"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Documentation/filesystems/"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(on older kernels, these files are directly under the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Documentation/"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "directory, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mandatory-locking.txt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mandatory.txt )"
        }
      ]
    ]
  }
]
