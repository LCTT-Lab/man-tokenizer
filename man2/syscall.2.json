[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 1980, 1991, 1993"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tThe Regents of the University of California.  All rights reserved."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Redistribution and use in source and binary forms, with or without"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modification, are permitted provided that the following conditions"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" are met:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 1. Redistributions of source code must retain the above copyright"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    notice, this list of conditions and the following disclaimer."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2. Redistributions in binary form must reproduce the above copyright"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    notice, this list of conditions and the following disclaimer in the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    documentation and/or other materials provided with the distribution."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 3. All advertising materials mentioning features or use of this software"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    must display the following acknowledgement:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tThis product includes software developed by the University of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tCalifornia, Berkeley and its contributors."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 4. Neither the name of the University nor the names of its contributors"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    may be used to endorse or promote products derived from this software"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    without specific prior written permission."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SUCH DAMAGE."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     @(#)syscall.2\t8.1 (Berkeley) 6/16/93"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2002-03-20  Christoph Hellwig <hch@infradead.org>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t- adopted for Linux"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2015-01-17, Kees Cook <keescook@chromium.org>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded mips and arm64."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SYSCALL 2 2018-04-30 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "syscall "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " indirect system call"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"#define _GNU_SOURCE\" \"         /* See feature_test_macros(7) */\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <unistd.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"#include <sys/syscall.h>   \"  \"/* For SYS_xxx definitions */\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long syscall(long \" number \", ...);\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a small library function that invokes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the system call whose assembly language"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interface has the specified"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " number"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the specified arguments."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Employing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is useful, for example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when invoking a system call that has no wrapper function in the C library."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "saves CPU registers before making the system call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "restores the registers upon return from the system call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and stores any error code returned by the system call in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if an error occurs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Symbolic constants for system call numbers can be found in the header file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <sys/syscall.h> ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The return value is defined by the system call being invoked."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In general, a 0 return value indicates success."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 return value indicates an error,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and an error code is stored in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "first appeared in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "4BSD."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Architecture-specific requirements"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each architecture ABI has its own requirements on how"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call arguments are passed to the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For system calls that have a glibc wrapper (e.g., most system calls),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "glibc handles the details of copying arguments to the right registers"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a manner suitable for the architecture."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, when using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to make a system call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the caller might need to handle architecture-dependent details;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this requirement is most commonly encountered on certain 32-bit architectures."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For example, on the ARM architecture Embedded ABI (EABI), a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "64-bit value (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"long long\" )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be aligned to an even register pair."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instead of the wrapper provided by glibc,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " readahead ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call would be invoked as follows on the ARM architecture with the EABI"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in little endian mode:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "syscall(SYS_readahead, fd, 0,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        (unsigned int) (offset & 0xFFFFFFFF),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        (unsigned int) (offset >> 32),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        count);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since the offset argument is 64 bits, and the first argument"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( fd )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is passed in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " r0 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the caller must manually split and align the 64-bit value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that it is passed in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " r2 / r3"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "register pair."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "That means inserting a dummy value into"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " r1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the second argument of 0)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Care also must be taken so that the split follows endian conventions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(according to the C ABI for the platform)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Similar issues can occur on MIPS with the O32 ABI,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on PowerPC and parisc with the 32-bit ABI, and on Xtensa."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Mike Frysinger: this issue ends up forcing MIPS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" O32 to take 7 arguments to syscall()"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See arch/parisc/kernel/sys_parisc.c."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that while the parisc C ABI also uses aligned register pairs,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it uses a shim layer to hide the issue from user space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The affected system calls are"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fadvise64_64 (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ftruncate64 (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " posix_fadvise (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pread64 (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pwrite64 (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " readahead (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sync_file_range (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " truncate64 (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" You need to look up the syscalls directly in the kernel source to see if"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" they should be in this list.  For example, look at fs/read_write.c and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the function signatures that do:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ..., unsigned long, pos_l, unsigned long, pos_h, ..."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If they use off_t, then they most likely do not belong in this list."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This does not affect syscalls that manually split and assemble 64-bit values"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _llseek (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " preadv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " preadv2 (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pwritev (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pwritev2 (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Welcome to the wonderful world of historical baggage."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Architecture calling conventions"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Every architecture has its own way of invoking and passing arguments to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The details for various architectures are listed in the two tables below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The first table lists the instruction used to transition to kernel mode"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(which might not be the fastest or best way to transition to the kernel,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so you might have to refer to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " vdso (7)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the register used to indicate the system call number,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the register used to return the system call result,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the register used to signal an error."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".if",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " t "
        },
        {
          "type": "ESCAPE",
          "content": "\\{"
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ft",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CW"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\}"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "l2\tl2\tl2\tl2\tl2\tl."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arch/ABI\tinstruction\tsyscall #\tretval\terror\tNotes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "alpha\tcallsys\tv0\ta0\ta3\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arc\ttrap0\tr8\tr0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arm/OABI\tswi NR\t-\ta1\t-\t[2]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arm/EABI\tswi 0x0\tr7\tr0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arm64\tsvc #0\tx8\tx0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blackfin\texcpt 0x0\tP0\tR0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "i386\tint $0x80\teax\teax\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ia64\tbreak 0x100000\tr15\tr8\tr10\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "m68k\ttrap #0\td0\td0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "microblaze\tbrki r14,8\tr12\tr3\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mips\tsyscall\tv0\tv0\ta3\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nios2\ttrap\tr2\tr2\tr7"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parisc\tble 0x100(%sr2, %r0)\tr20\tr28\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "powerpc\tsc\tr0\tr3\tr0\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "riscv\tscall\ta7\ta0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "s390\tsvc 0\tr1\tr2\t-\t[3]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "s390x\tsvc 0\tr1\tr2\t-\t[3]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "superh\ttrap #0x17\tr3\tr0\t-\t[4]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sparc/32\tt 0x10\tg1\to0\tpsr/csr\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sparc/64\tt 0x6d\tg1\to0\tpsr/csr\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tile\tswint1\tR10\tR00\tR01\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x86-64\tsyscall\trax\trax\t-\t[5]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x32\tsyscall\trax\trax\t-\t[5]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "xtensa\tsyscall\ta2\ta2\t-"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Notes:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " [1] 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On a few architectures,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a register is used as a boolean"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(0 indicating no error, and "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 indicating an error) to signal that the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call failed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The actual error value is still contained in the return register."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On sparc, the carry bit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( csr )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the processor status register"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( psr )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used instead of a full register."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " [2]"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the system call number."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " [3]"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For s390 and s390x,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the system call number) may be passed directly with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"svc"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "NR\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if it is less than 256."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " [4]"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On SuperH, the trap number controls the maximum number of arguments passed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"trap"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "#0x10\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used with only 0-argument system calls, a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"trap"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "#0x11\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used with 0- or 1-argument system calls,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and so on up to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"trap #0x17\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for 7-argument system calls."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " [5]"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The x32 ABI shares syscall table with x86-64 ABI, but there are some"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nuances:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(bu"
        },
        {
          "type": "TEXT",
          "content": " 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In order to indicate that a system call is called under the x32 ABI,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an additional bit,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __X32_SYSCALL_BIT ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is bitwise-ORed with the system call number."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The ABI used by a process affects some process behaviors,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "including signal handling or system call restarting."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(bu"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since x32 has different sizes for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " long"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and pointer types, layouts of some (but not all;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct timeval"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct rlimit"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are 64-bit, for example) structures are different."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In order to handle this,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "additional system calls are added to the system call table,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "starting from number 512"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(without the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __X32_SYSCALL_BIT )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __NR_readv"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is defined as 19 for the x86-64 ABI and as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __X32_SYSCALL_BIT \" | \" "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B515"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the x32 ABI."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Most of these additional system calls are actually identical"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the system calls used for providing i386 compat."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There are some notable exceptions, however, such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " preadv2 (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which uses"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct iovec"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "entities with 4-byte pointers and sizes (\"compat_iovec\" in kernel terms),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but passes an 8-byte"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pos"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument in a single register and not two, as is done in every other ABI."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".if",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " t "
        },
        {
          "type": "ESCAPE",
          "content": "\\{"
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ft",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " P"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\}"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The second table shows the registers used to pass the system call arguments."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".if",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " t "
        },
        {
          "type": "ESCAPE",
          "content": "\\{"
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ft",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CW"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\}"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "l\tl2\tl2\tl2\tl2\tl2\tl2\tl2\tl."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arch/ABI\targ1\targ2\targ3\targ4\targ5\targ6\targ7\tNotes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "alpha\ta0\ta1\ta2\ta3\ta4\ta5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arc\tr0\tr1\tr2\tr3\tr4\tr5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arm/OABI\ta1\ta2\ta3\ta4\tv1\tv2\tv3"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arm/EABI\tr0\tr1\tr2\tr3\tr4\tr5\tr6"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arm64\tx0\tx1\tx2\tx3\tx4\tx5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blackfin\tR0\tR1\tR2\tR3\tR4\tR5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "i386\tebx\tecx\tedx\tesi\tedi\tebp\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ia64\tout0\tout1\tout2\tout3\tout4\tout5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "m68k\td1\td2\td3\td4\td5\ta0\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "microblaze\tr5\tr6\tr7\tr8\tr9\tr10\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mips/o32\ta0\ta1\ta2\ta3\t-\t-\t-\t[1]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mips/n32,64\ta0\ta1\ta2\ta3\ta4\ta5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nios2\tr4\tr5\tr6\tr7\tr8\tr9\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parisc\tr26\tr25\tr24\tr23\tr22\tr21\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "powerpc\tr3\tr4\tr5\tr6\tr7\tr8\tr9"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "riscv\ta0\ta1\ta2\ta3\ta4\ta5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "s390\tr2\tr3\tr4\tr5\tr6\tr7\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "s390x\tr2\tr3\tr4\tr5\tr6\tr7\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "superh\tr4\tr5\tr6\tr7\tr0\tr1\tr2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sparc/32\to0\to1\to2\to3\to4\to5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sparc/64\to0\to1\to2\to3\to4\to5\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tile\tR00\tR01\tR02\tR03\tR04\tR05\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x86-64\trdi\trsi\trdx\tr10\tr8\tr9\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x32\trdi\trsi\trdx\tr10\tr8\tr9\t-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "xtensa\ta6\ta3\ta4\ta5\ta8\ta9\t-"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Notes:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " [1] 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The mips/o32 system call convention passes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arguments 5 through 8 on the user stack."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".if",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " t "
        },
        {
          "type": "ESCAPE",
          "content": "\\{"
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ft",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " P"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\}"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that these tables don't cover the entire calling convention"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "some"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "architectures may indiscriminately clobber other registers not listed here."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/syscall.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/types.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <signal.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pid_t tid;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    tid = syscall(SYS_gettid);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    syscall(SYS_tgkill, getpid(), tid, SIGHUP);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _syscall (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " intro (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscalls (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " vdso (7)"
        }
      ]
    ]
  }
]
