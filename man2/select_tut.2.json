[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This manpage is copyright (C) 2001 Paul Sheer."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" very minor changes, aeb"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified 5 June 2002, Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2006-05-13, mtk, removed much material that is redundant with select.2"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"             various other changes"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-01-26, mtk, substantial changes and rewrites"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SELECT_TUT 2 2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "synchronous I/O multiplexing"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* According to POSIX.1-2001, POSIX.1-2008 */"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/select.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* According to earlier standards */"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/time.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/types.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <unistd.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int select(int \" nfds \", fd_set *\" readfds \", fd_set *\" writefds ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"           fd_set *\" exceptfds \", struct timeval *\" utimeout );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void FD_CLR(int \" fd \", fd_set *\" set );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int  FD_ISSET(int \" fd \", fd_set *\" set );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void FD_SET(int \" fd \", fd_set *\" set );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void FD_ZERO(fd_set *\" set );"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/select.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int pselect(int \" nfds \", fd_set *\" readfds \", fd_set *\" writefds ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"            fd_set *\" exceptfds \", const struct timespec *\" ntimeout ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"            const sigset_t *\" sigmask );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Feature Test Macro Requirements for glibc (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " feature_test_macros (7)):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ():"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "_POSIX_C_SOURCE"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": ">="
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "200112L"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ())"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used to efficiently monitor multiple file descriptors,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to see if any of them is, or becomes, \"ready\";"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that is, to see whether I/O becomes possible,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or an \"exceptional condition\" has occurred on any of the file descriptors."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Its principal arguments are three \"sets\" of file descriptors:"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ireadfds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P, "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iwritefds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P, and "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iexceptfds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each set is declared as type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd_set ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and its contents can be manipulated with the macros"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_CLR (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_ISSET (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_SET (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_ZERO ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A newly declared set should first be cleared using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_ZERO ()."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "modifies the contents of the sets according to the rules"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "described below; after calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "you can test if a file descriptor is still present in a set with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_ISSET ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_ISSET ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns nonzero if a specified file descriptor is present in a set"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and zero if it is not."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FD_CLR ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes a file descriptor from a set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Arguments"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ireadfds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This set is watched to see if data is available for reading from any of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its file descriptors."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has returned, "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ireadfds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P will be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cleared of all file descriptors except for those that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are immediately available for reading."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iwritefds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This set is watched to see if there is space to write data to any of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its file descriptors."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has returned, "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iwritefds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P will be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cleared of all file descriptors except for those that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are immediately available for writing."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iexceptfds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This set is watched for \"exceptional conditions\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In practice, only one such exceptional condition is common:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the availability of "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iout-of-band"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P (OOB) data for reading"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from a TCP socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tcp (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for more details about OOB data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(One other less common case where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicates an exceptional condition occurs with pseudoterminals"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in packet mode; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl_tty (2).)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has returned,"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iexceptfds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P will be cleared of all file descriptors except for those"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for which an exceptional condition has occurred."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Infds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is an integer one more than the maximum of any file descriptor in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "any of the sets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words, while adding file descriptors to each of the sets,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "you must calculate the maximum integer value of all of them,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then increment this value by one, and then pass this as "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Infds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iutimeout"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is the longest time"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may wait before returning, even if nothing interesting happened."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this value is passed as NULL, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blocks indefinitely waiting for a file descriptor to become ready."
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Iutimeout"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P can be set to zero seconds, which causes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to return immediately, with information about the readiness"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of file descriptors at the time of the call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The structure "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct timeval"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P is defined as:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct timeval {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    time_t tv_sec;    /* seconds */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    long tv_usec;     /* microseconds */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Intimeout"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This argument for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has the same meaning as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " utimeout ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct timespec\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has nanosecond precision as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct timespec {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    long tv_sec;    /* seconds */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    long tv_nsec;   /* nanoseconds */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Isigmask"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This argument holds a set of signals that the kernel should unblock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., remove from the signal mask of the calling thread),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while the caller is blocked inside the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaddset (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigprocmask (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It may be NULL,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in which case the call does not modify the signal mask on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "entry and exit to the function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will then behave just like"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Combining signal and data events"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is useful if you are waiting for a signal as well as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for file descriptor(s) to become ready for I/O."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Programs that receive signals"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "normally use the signal handler only to raise a global flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The global flag will indicate that the event must be processed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the main loop of the program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A signal will cause the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ())"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call to return with "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ierrno"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P set to "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BEINTR"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This behavior is essential so that signals can be processed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the main loop of the program, otherwise"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would block indefinitely."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Now, somewhere"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the main loop will be a conditional to check the global flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "So we must ask:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "what if a signal arrives after the conditional, but before the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call?"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The answer is that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would block indefinitely, even though an event is actually pending."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This race condition is solved by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This call can be used to set the signal mask to a set of signals"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that are to be received only within the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For instance, let us say that the event in question"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was the exit of a child process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Before the start of the main loop, we"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would block "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BSIGCHLD"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigprocmask (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Our"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call would enable"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGCHLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by using an empty signal mask."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Our program would look like:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static volatile sig_atomic_t got_SIGCHLD = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "child_sig_handler(int sig)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    got_SIGCHLD = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sigset_t sigmask, empty_mask;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sigaction sa;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fd_set readfds, writefds, exceptfds;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int r;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sigemptyset(&sigmask);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sigaddset(&sigmask, SIGCHLD);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"sigprocmask\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sa.sa_flags = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sa.sa_handler = child_sig_handler;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sigemptyset(&sa.sa_mask);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (sigaction(SIGCHLD, &sa, NULL) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"sigaction\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sigemptyset(&empty_mask);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (;;) {          /* main loop */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        /* Initialize readfds, writefds, and exceptfds"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           before the pselect() call. (Code omitted.) */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        r = pselect(nfds, &readfds, &writefds, &exceptfds,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    NULL, &empty_mask);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (r == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 && errno != EINTR) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            /* Handle error */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (got_SIGCHLD) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            got_SIGCHLD = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            /* Handle signalled event here; e.g., wait() for all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               terminated children. (Code omitted.) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* main body of program */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Practical"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "So what is the point of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()?"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Can't I just read and write to my file descriptors whenever I want?"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The point of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is that it watches"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "multiple descriptors at the same time and properly puts the process to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sleep if there is no activity."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "UNIX programmers often find"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "themselves in a position where they have to handle I/O from more than one"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor where the data flow may be intermittent."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If you were to merely create a sequence of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls, you would"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "find that one of your calls may block waiting for data from/to a file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "descriptor, while another file descriptor is unused though ready for I/O."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "efficiently copes with this situation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Select law"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Many people who try to use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "come across behavior that is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "difficult to understand and produces nonportable or borderline results."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For instance, the above program is carefully written not to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "block at any point, even though it does not set its file descriptors to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nonblocking mode."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is easy to introduce"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "subtle errors that will remove the advantage of using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so here is a list of essentials to watch for when using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "You should always try to use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without a timeout."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Your program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should have nothing to do if there is no data available."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Code that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depends on timeouts is not usually portable and is difficult to debug."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "2."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Infds"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P must be properly calculated for efficiency as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "explained above."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "3."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "No file descriptor must be added to any set if you do not intend"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to check its result after the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call, and respond appropriately."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See next rule."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "4."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns, all file descriptors in all sets"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should be checked to see if they are ready."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "5."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The functions"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "do "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Inot"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P necessarily read/write the full amount of data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that you have requested."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If they do read/write the full amount, it's"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because you have a low traffic load and a fast stream."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is not always going to be the case."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "You should cope with the case of your"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions managing to send or receive only a single byte."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "6."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Never read/write only in single bytes at a time unless you are really"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sure that you have a small amount of data to process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is extremely"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inefficient not to read/write as much data as you can buffer each time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The buffers in the example below are 1024 bytes although they could"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "easily be made larger."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "7."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can fail with the error"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BEINTR"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can fail with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BEAGAIN"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P ("
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BEWOULDBLOCK"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These results must be properly managed (not done properly above)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If your program is not going to receive any signals, then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is unlikely you will get "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BEINTR"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If your program does not set nonblocking I/O,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "you will not get "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BEAGAIN"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Nonetheless, you should still cope with these errors for completeness."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "8."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Never call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a buffer length of zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "9."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the functions"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fail with errors other than those listed in "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B7."
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or one of the input functions returns 0, indicating end of file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then you should "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Inot"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P pass that file descriptor to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "again."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the example below,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "I close the file descriptor immediately, and then set it to "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to prevent it being included in a set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "10."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The timeout value must be initialized with each new call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since some operating systems modify the structure."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "however does not modify its timeout structure."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "11."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "modifies its file descriptor sets,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the call is being used in a loop,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the sets must be reinitialized before each call."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \"I have heard\" does not fill me with confidence, and doesn't"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" belong in a man page, so I've commented this point out."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 11."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" I have heard that the Windows socket layer does not cope with OOB data"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" properly."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" It also does not cope with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR select ()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" calls when no file descriptors are set at all."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Having no file descriptors set is a useful"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" way to sleep the process with subsecond precision by using the timeout."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" (See further on.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Usleep emulation"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On systems that do not have a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " usleep (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function, you can call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a finite timeout and no file descriptors as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct timeval tv;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tv.tv_sec = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tv.tv_usec = 200000;  /* 0.2 seconds */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "select(0, NULL, NULL, NULL, &tv);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is guaranteed to work only on UNIX systems, however."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the total number of file descriptors"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "still present in the file descriptor sets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "timed out, then the return value will be zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The file descriptors set should be all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "empty (but may not be on some systems)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A return value of "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 indicates an error, with "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Ierrno"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P being"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set appropriately."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the case of an error, the contents of the returned sets and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Istruct timeout"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P contents are undefined and should not be used."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pselect ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "however never modifies "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Intimeout"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Generally speaking,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all operating systems that support sockets also support"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used to solve"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "many problems in a portable and efficient way that naive programmers try"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to solve in a more complicated manner using"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "threads, forking, IPCs, signals, memory sharing, and so on."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call has the same functionality as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and is somewhat more efficient when monitoring sparse"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor sets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is nowadays widely available, but historically was less portable than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The Linux-specific"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " epoll (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "API provides an interface that is more efficient than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when monitoring large numbers of file descriptors."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Here is an example that better demonstrates the true utility of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The listing below is a TCP forwarding program that forwards"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from one TCP port to another."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/time.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/types.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <signal.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <netinet/in.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <arpa/inet.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <errno.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int forward_port;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#undef max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define max(x,y) ((x) > (y) ? (x) : (y))"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "listen_socket(int listen_port)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr_in addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int lfd;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int yes;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    lfd = socket(AF_INET, SOCK_STREAM, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (lfd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"socket\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    yes = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            &yes, sizeof(yes)) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"setsockopt\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        close(lfd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&addr, 0, sizeof(addr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    addr.sin_port = htons(listen_port);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    addr.sin_family = AF_INET;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (bind(lfd, (struct sockaddr *) &addr, sizeof(addr)) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"bind\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        close(lfd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"accepting connections on port %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", listen_port);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    listen(lfd, 10);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    return lfd;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "connect_socket(int connect_port, char *address)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr_in addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int cfd;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    cfd = socket(AF_INET, SOCK_STREAM, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (cfd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"socket\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&addr, 0, sizeof(addr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    addr.sin_port = htons(connect_port);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    addr.sin_family = AF_INET;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (!inet_aton(address, (struct in_addr *) &addr.sin_addr.s_addr)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"inet_aton(): bad IP address format"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        close(cfd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (connect(cfd, (struct sockaddr *) &addr, sizeof(addr)) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"connect()\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        shutdown(cfd, SHUT_RDWR);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        close(cfd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    return cfd;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define SHUT_FD1 do {                                "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                     if (fd1 >= 0) {                 "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         shutdown(fd1, SHUT_RDWR);   "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         close(fd1);                 "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         fd1 = "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;                   "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                     }                               "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                 } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define SHUT_FD2 do {                                "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                     if (fd2 >= 0) {                 "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         shutdown(fd2, SHUT_RDWR);   "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         close(fd2);                 "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         fd2 = "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;                   "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                     }                               "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                 } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define BUF_SIZE 1024"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int h;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int fd1 = "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1, fd2 = "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char buf1[BUF_SIZE], buf2[BUF_SIZE];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int buf1_avail = 0, buf1_written = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int buf2_avail = 0, buf2_written = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc != 4) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Usage"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "tfwd <listen"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "port> \""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                 \"<forward"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "to"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "port> <forward"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "to"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ip"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "address>"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    signal(SIGPIPE, SIG_IGN);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    forward_port = atoi(argv[2]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    h = listen_socket(atoi(argv[1]));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (h == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (;;) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        int ready, nfds = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ssize_t nbytes;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fd_set readfds, writefds, exceptfds;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        FD_ZERO(&readfds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        FD_ZERO(&writefds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        FD_ZERO(&exceptfds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        FD_SET(h, &readfds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        nfds = max(nfds, h);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 > 0 && buf1_avail < BUF_SIZE)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            FD_SET(fd1, &readfds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            /* Note: nfds is updated below, when fd1 is added to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               exceptfds. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 > 0 && buf2_avail < BUF_SIZE)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            FD_SET(fd2, &readfds);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 > 0 && buf2_avail "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf2_written > 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            FD_SET(fd1, &writefds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 > 0 && buf1_avail "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf1_written > 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            FD_SET(fd2, &writefds);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 > 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            FD_SET(fd1, &exceptfds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            nfds = max(nfds, fd1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 > 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            FD_SET(fd2, &exceptfds);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            nfds = max(nfds, fd2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        ready = select(nfds + 1, &readfds, &writefds, &exceptfds, NULL);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (ready == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 && errno == EINTR)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (ready == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"select()\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (FD_ISSET(h, &readfds)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            socklen_t addrlen;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            struct sockaddr_in client_addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            int fd;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            addrlen = sizeof(client_addr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            memset(&client_addr, 0, addrlen);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fd = accept(h, (struct sockaddr *) &client_addr, &addrlen);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (fd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                perror(\"accept()\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            } else {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                buf1_avail = buf1_written = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                buf2_avail = buf2_written = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                fd1 = fd;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                fd2 = connect_socket(forward_port, argv[3]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                if (fd2 == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    SHUT_FD1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    printf(\"connect from %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                            inet_ntoa(client_addr.sin_addr));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "                /* Skip any events on the old, closed file descriptors. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                continue;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* NB: read OOB data before normal reads */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 > 0 && FD_ISSET(fd1, &exceptfds)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            char c;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            nbytes = recv(fd1, &c, 1, MSG_OOB);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (nbytes < 1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                send(fd2, &c, 1, MSG_OOB);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 > 0 && FD_ISSET(fd2, &exceptfds)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            char c;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            nbytes = recv(fd2, &c, 1, MSG_OOB);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (nbytes < 1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                send(fd1, &c, 1, MSG_OOB);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 > 0 && FD_ISSET(fd1, &readfds)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            nbytes = read(fd1, buf1 + buf1_avail,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                      BUF_SIZE "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf1_avail);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (nbytes < 1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                buf1_avail += nbytes;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 > 0 && FD_ISSET(fd2, &readfds)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            nbytes = read(fd2, buf2 + buf2_avail,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                      BUF_SIZE "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf2_avail);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (nbytes < 1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                buf2_avail += nbytes;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 > 0 && FD_ISSET(fd1, &writefds) && buf2_avail > 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            nbytes = write(fd1, buf2 + buf2_written,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       buf2_avail "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf2_written);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (nbytes < 1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                buf2_written += nbytes;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 > 0 && FD_ISSET(fd2, &writefds) && buf1_avail > 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            nbytes = write(fd2, buf1 + buf1_written,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       buf1_avail "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf1_written);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (nbytes < 1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                SHUT_FD2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                buf1_written += nbytes;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* Check if write data has caught read data */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (buf1_written == buf1_avail)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            buf1_written = buf1_avail = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (buf2_written == buf2_avail)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            buf2_written = buf2_avail = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* One side has closed the connection, keep"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           writing to the other side until empty */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (fd1 < 0 && buf1_avail "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf1_written == 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            SHUT_FD2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (fd2 < 0 && buf2_avail "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " buf2_written == 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            SHUT_FD1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The above program properly forwards most kinds of TCP connections"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "including OOB signal data transmitted by "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Btelnet"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P servers."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It handles the tricky problem of having data flow in both directions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "simultaneously."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "You might think it more efficient to use a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call and devote a thread to each stream."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This becomes more tricky than you might suspect."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Another idea is to set nonblocking I/O using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This also has its problems because you end up using"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inefficient timeouts."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program does not handle more than one simultaneous connection at a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "time, although it could easily be extended to do this with a linked list"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of buffers"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "one for each connection."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "At the moment, new"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "connections cause the current connection to be dropped."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigprocmask (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaddset (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigdelset (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigemptyset (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigfillset (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigismember (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " epoll (7)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH AUTHORS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This man page was written by Paul Sheer."
        }
      ]
    ]
  }
]
