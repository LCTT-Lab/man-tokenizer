[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This man page is Copyright (C) 2006 Andi Kleen <ak@muc.de>."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM_ONE_PARA)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to distribute possibly modified copies"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of this page provided the header is included verbatim,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and in case of nontrivial modification author and date"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of the modification is added to the header."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008, mtk, various edits"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GETCPU 2 2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "getcpu "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " determine CPU and NUMA node on which the calling thread is running"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <linux/getcpu.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int getcpu(unsigned *\" cpu \", unsigned *\" node "
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "\", struct getcpu_cache *\" tcache );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There is no glibc wrapper for this system call; see NOTES."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getcpu ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call identifies the processor and node on which the calling"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread or process is currently running and writes them into the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "integers pointed to by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arguments."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The processor is a unique small integer identifying a CPU."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The node is a unique small identifier identifying a NUMA node."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL nothing is written to the respective pointer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The third argument to this system call is nowadays unused,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and should be specified as NULL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unless portability to Linux 2.6.23 or earlier is required (see NOTES)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The information placed in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is guaranteed to be current only at the time of the call:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unless the CPU affinity has been fixed using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sched_setaffinity (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel might change the CPU at any time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Normally this does not happen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because the scheduler tries to minimize movements between CPUs to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "keep caches hot, but it is possible.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The caller must allow for the possibility that the information returned in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is no longer current by the time the call returns."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success, 0 is returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On error, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set appropriately."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Arguments point outside the calling process's address space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getcpu ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was added in kernel 2.6.19 for x86-64 and i386."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getcpu ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is Linux-specific."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Linux makes a best effort to make this call as fast as possible."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(On some architectures, this is done via an implementation in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " vdso (7).)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The intention of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getcpu ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is to allow programs to make optimizations with per-CPU data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or for NUMA optimization."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Glibc does not provide a wrapper for this system call; call it using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall (2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sched_getcpu (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instead."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tcache"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is unused since Linux 2.6.24."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 4307d1e5ada595c87f9a4d16db16ba5edb70dcb1"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Author: Ingo Molnar <mingo@elte.hu>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Date:   Wed Nov 7 18:37:48 2007 +0100"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" x86: ignore the sys_getcpu() tcache parameter"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In earlier kernels,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if this argument was non-NULL,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then it specified a pointer to a caller-allocated buffer in thread-local"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "storage that was used to provide a caching mechanism for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getcpu ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Use of the cache could speed"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getcpu ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls, at the cost that there was a very small chance that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the returned information would be out of date."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The caching mechanism was considered to cause problems when"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "migrating threads between CPUs, and so the argument is now ignored."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ===== Before kernel 2.6.24: ====="
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I tcache"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is a pointer to a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR \"struct getcpu_cache\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" that is used as a cache by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getcpu ()."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The caller should put the cache into a thread-local variable"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" if the process is multithreaded,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" because the cache cannot be shared between different threads."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I tcache"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" can be NULL."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If it is not NULL"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getcpu ()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" will use it to speed up operation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The information inside the cache is private to the system call"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and should not be accessed by the user program."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The information placed in the cache can change between kernel releases."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" When no cache is specified"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getcpu ()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" will be slower,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but always retrieve the current CPU and node information."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" With a cache"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getcpu ()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is faster."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, the cached information is updated only once per jiffy (see"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR time (7))."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This means that the information could theoretically be out of date,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" although in practice the scheduler's attempt to maintain"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" soft CPU affinity means that the information is unlikely to change"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" over the course of the caching interval."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mbind (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sched_setaffinity (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " set_mempolicy (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sched_getcpu (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpuset (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " vdso (7)"
        }
      ]
    ]
  }
]
