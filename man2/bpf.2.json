[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (C) 2015 Alexei Starovoitov <ast@kernel.org>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 2015 Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF 2 2018-02-02 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "bpf "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " perform a command on an extended BPF map or program"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <linux/bpf.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int bpf(int \" cmd \", union bpf_attr *\" attr \", unsigned int \" size \");"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call performs a range of operations related to extended"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Berkeley Packet Filters."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Extended BPF (or eBPF) is similar to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the original (\"classic\") BPF (cBPF) used to filter network packets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For both cBPF and eBPF programs,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel statically analyzes the programs before loading them,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in order to ensure that they cannot harm the running system."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "eBPF extends cBPF in multiple ways, including the ability to call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a fixed set of in-kernel helper functions"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See 'enum bpf_func_id' in include/uapi/linux/bpf.h"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(via the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_CALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "opcode extension provided by eBPF)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and access shared data structures such as eBPF maps."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Extended BPF Design/Architecture"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "eBPF maps are a generic data structure for storage of different data types."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Data types are generally treated as binary blobs, so a user just specifies"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the size of the key and the size of the value at map-creation time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words, a key/value for a given map can have an arbitrary structure."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A user process can create multiple maps (with key/value-pairs being"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "opaque bytes of data) and access them via file descriptors."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Different eBPF programs can access the same maps in parallel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It's up to the user process and eBPF program to decide what they store"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inside maps."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There's one special map type, called a program array."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This type of map stores file descriptors referring to other eBPF programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a lookup in the map is performed, the program flow is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "redirected in-place to the beginning of another eBPF program and does not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return back to the calling program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The level of nesting has a fixed limit of 32,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Defined by the kernel constant MAX_TAIL_CALL_CNT in include/linux/bpf.h"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "so that infinite loops cannot be crafted."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "At run time, the program file descriptors stored in the map can be modified,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so program functionality can be altered based on specific requirements."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "All programs referred to in a program-array map must"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "have been previously loaded into the kernel via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a map lookup fails, the current program continues its execution."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_TYPE_PROG_ARRAY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "below for further details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Generally, eBPF programs are loaded by the user process and automatically"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unloaded when the process exits."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In some cases, for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tc-bpf (8),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the program will continue to stay alive inside the kernel even after the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process that loaded the program exits."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In that case,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the tc subsystem holds a reference to the eBPF program after the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor has been closed by the user-space program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, whether a specific program continues to live inside the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depends on how it is further attached to a given kernel subsystem"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after it was loaded via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each eBPF program is a set of instructions that is safe to run until"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its completion."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An in-kernel verifier statically determines that the eBPF program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "terminates and is safe to execute."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "During verification, the kernel increments reference counts for each of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the maps that the eBPF program uses,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that the attached maps can't be removed until the program is unloaded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "eBPF programs can be attached to different events."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These events can be the arrival of network packets, tracing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "events, classification events by network queueing  disciplines"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(for eBPF programs attached to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tc (8)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "classifier), and other types that may be added in the future."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A new event triggers execution of the eBPF program, which"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may store information about the event in eBPF maps."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Beyond storing data, eBPF programs may call a fixed set of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in-kernel helper functions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The same eBPF program can be attached to multiple events and different"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF programs can access the same map:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tracing     tracing    tracing    packet      packet     packet"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event A     event B    event C    on eth0     on eth1    on eth2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " |             |         |          |           |          ^"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " |             |         |          |           v          |"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " --> tracing <--     tracing      socket    tc ingress   tc egress"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "      prog_1          prog_2      prog_3    classifier    action"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "      |  |              |           |         prog_4      prog_5"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   |---  -----|  |------|          map_3        |           |"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " map_1       map_2                              --| map_4 |--"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Arguments"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The operation to be performed by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call is determined by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each operation takes an accompanying argument,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "provided via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attr ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is a pointer to a union of type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see below)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is the size of the union pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attr ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The value provided in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is one of the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_CREATE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Create a map and return a file descriptor that refers to the map."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The close-on-exec file descriptor flag (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is automatically enabled for the new file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_LOOKUP_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Look up an element by key in a specified map and return its value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_UPDATE_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Create or update an element (key/value pair) in a specified map."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_DELETE_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Look up and delete an element by key in a specified map."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_GET_NEXT_KEY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Look up an element by key in a specified map and return the key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the next element."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Verify and load an eBPF program,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returning a new file descriptor associated with the program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The close-on-exec file descriptor flag (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is automatically enabled for the new file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "union consists of various anonymous structures that are used by different"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "commands:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "union bpf_attr {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct {    /* Used by BPF_MAP_CREATE */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         map_type;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         key_size;    /* size of key in bytes */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         value_size;  /* size of value in bytes */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         max_entries; /* maximum number of entries"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                      in a map */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    struct {    /* Used by BPF_MAP_*_ELEM and BPF_MAP_GET_NEXT_KEY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   commands */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         map_fd;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __aligned_u64 key;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            __aligned_u64 value;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            __aligned_u64 next_key;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        };"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64         flags;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    struct {    /* Used by BPF_PROG_LOAD */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         prog_type;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         insn_cnt;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __aligned_u64 insns;      /* 'const struct bpf_insn *' */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __aligned_u64 license;    /* 'const char *' */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         log_level;  /* verbosity level of verifier */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         log_size;   /* size of user buffer */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __aligned_u64 log_buf;    /* user supplied 'char *'"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                     buffer */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32         kern_version;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                  /* checked when prog_type=kprobe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                     (since Linux 4.1) */"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"                 commit 2541517c32be2531e0da59dfd7efc1ce844644f5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} __attribute__((aligned(8)));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " eBPF maps"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Maps are a generic data structure for storage of different types of data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "They allow sharing of data between eBPF kernel programs,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and also between kernel and user-space applications."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each map type has the following attributes:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "type"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "maximum number of elements"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "key size in bytes"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "value size in bytes"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following wrapper functions demonstrate how various"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "commands can be used to access the maps."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The functions use the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument to invoke different operations."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_CREATE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_CREATE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command creates a new map,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returning a new file descriptor that refers to the map."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_create_map(enum bpf_map_type map_type,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               unsigned int key_size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               unsigned int value_size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               unsigned int max_entries)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union bpf_attr attr = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .map_type    = map_type,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .key_size    = key_size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .value_size  = value_size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .max_entries = max_entries"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return bpf(BPF_MAP_CREATE, &attr, sizeof(attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The new map has the type specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_type ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and attributes as specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key_size ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " max_entries ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On success, this operation returns a file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On error, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attributes will be used by the verifier during program loading"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to check that the program is calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_map_*_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "helper functions with a correctly initialized"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and to check that the program doesn't access the map element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "beyond the specified"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, when a map is created with a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of 8 and the eBPF program calls"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_map_lookup_elem(map_fd, fp - 4)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the program will be rejected,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since the in-kernel helper function"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    bpf_map_lookup_elem(map_fd, void *key)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "expects to read 8 bytes from the location pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"fp"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "-"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "4\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the top of the stack)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "starting address will cause out-of-bounds stack access."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Similarly, when a map is created with a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of 1 and the eBPF program contains"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value = bpf_map_lookup_elem(...);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "*(u32 *) value = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the program will be rejected, since it accesses the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer beyond the specified 1 byte"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "limit."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Currently, the following values are supported for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_type :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enum bpf_map_type {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_UNSPEC,  /* Reserve 0 as invalid map type */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_HASH,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_ARRAY,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_PROG_ARRAY,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_PERF_EVENT_ARRAY,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_PERCPU_HASH,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_PERCPU_ARRAY,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_STACK_TRACE,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_CGROUP_ARRAY,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_LRU_HASH,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_LRU_PERCPU_HASH,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_LPM_TRIE,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_ARRAY_OF_MAPS,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_HASH_OF_MAPS,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_DEVMAP,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_SOCKMAP,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_MAP_TYPE_CPUMAP,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "selects one of the available map implementations in the kernel."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME We need an explanation of why one might choose each of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" these map implementations"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For all map types,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF programs access maps with the same"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_map_lookup_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_map_update_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "helper functions."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Further details of the various map types are given below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_LOOKUP_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_LOOKUP_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command looks up an element with a given"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the map referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_lookup_elem(int fd, const void *key, void *value)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union bpf_attr attr = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .map_fd = fd,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .key    = ptr_to_u64(key),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .value  = ptr_to_u64(value),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return bpf(BPF_MAP_LOOKUP_ELEM, &attr, sizeof(attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If an element is found,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the operation returns zero and stores the element's value into"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which must point to a buffer of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If no element is found, the operation returns "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 and sets"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_UPDATE_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_UPDATE_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "creates or updates an element with a given"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key/value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the map referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_update_elem(int fd, const void *key, const void *value,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                uint64_t flags)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union bpf_attr attr = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .map_fd = fd,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .key    = ptr_to_u64(key),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .value  = ptr_to_u64(value),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .flags  = flags,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return bpf(BPF_MAP_UPDATE_ELEM, &attr, sizeof(attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument should be specified as one of the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_ANY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Create a new element or update an existing element."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_NOEXIST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Create a new element only if it did not exist."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_EXIST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Update an existing element."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success, the operation returns zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On error, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " E2BIG ."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " E2BIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicates that the number of elements in the map reached the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " max_entries"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "limit specified at map creation time."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EEXIST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be returned if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_NOEXIST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the element with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "already exists in the map."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be returned if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_EXIST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the element with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "doesn't exist in the map."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_DELETE_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_DELETE_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "deleted the element whose key is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the map referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_delete_elem(int fd, const void *key)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union bpf_attr attr = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .map_fd = fd,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .key    = ptr_to_u64(key),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return bpf(BPF_MAP_DELETE_ELEM, &attr, sizeof(attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success, zero is returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the element is not found, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_GET_NEXT_KEY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_GET_NEXT_KEY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command looks up an element by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the map referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and sets the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " next_key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer to the key of the next element."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_get_next_key(int fd, const void *key, void *next_key)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union bpf_attr attr = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .map_fd   = fd,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .key      = ptr_to_u64(key),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .next_key = ptr_to_u64(next_key),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return bpf(BPF_MAP_GET_NEXT_KEY, &attr, sizeof(attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is found, the operation returns zero and sets the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " next_key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer to the key of the next element."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not found, the operation returns zero and sets the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " next_key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer to the key of the first element."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the last element, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Other possible"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values are"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This method can be used to iterate over all elements in the map."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " close(map_fd)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Delete the map referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_fd ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the user-space program that created a map exits, all maps will"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be deleted automatically (but see NOTES)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " eBPF map types"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following map types are supported:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_TYPE_HASH"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 0f8e4bd8a1fc8c4185f1630061d0a1f2d197a475"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Hash-table maps have the following characteristics:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Maps are created and destroyed by user-space programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Both user-space and eBPF programs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can perform lookup, update, and delete operations."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The kernel takes care of allocating and freeing key/value pairs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_update_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "helper will fail to insert new element when the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " max_entries"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "limit is reached."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This ensures that eBPF programs cannot exhaust memory.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_update_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "replaces existing elements atomically."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Hash-table maps are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "optimized for speed of lookup."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_TYPE_ARRAY"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 28fbcfa08d8ed7c5a50d41a0433aad222835e8e3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Array maps have the following characteristics:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Optimized for fastest possible lookup."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the future the verifier/JIT compiler"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may recognize lookup() operations that employ a constant key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and optimize it into constant pointer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is possible to optimize a non-constant"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "key into direct pointer arithmetic as well, since pointers and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are constant for the life of the eBPF program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " array_map_lookup_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may be 'inlined' by the verifier/JIT compiler"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while preserving concurrent access to this map from user space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All array elements pre-allocated and zero initialized at init time"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The key is an array index, and must be exactly four bytes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_delete_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since elements cannot be deleted."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_update_elem ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "replaces elements in a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nonatomic"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fashion;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for atomic updates, a hash-table map should be used instead."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There is however one special case that can also be used with arrays:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the atomic built-in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __sync_fetch_and_add()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used on 32 and 64 bit atomic counters."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, it can be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "applied on the whole value itself if it represents a single counter,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or in case of a structure containing multiple counters, it could be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "used on individual counters."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is quite often useful for aggregation and accounting of events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Among the uses for array maps are the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As \"global\" eBPF variables: an array of 1 element whose key is (index) 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and where the value is a collection of 'global' variables which"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF programs can use to keep state between events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Aggregation of tracing events into a fixed set of buckets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Accounting of networking events, for example, number of packets and packet"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sizes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_TYPE_PROG_ARRAY \" (since Linux 4.2)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A program array map is a special kind of array map whose map values"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contain only file descriptors referring to other eBPF programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, both the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be exactly four bytes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This map is used in conjunction with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_tail_call ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "helper."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This means that an eBPF program with a program array map attached to it"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can call from kernel side into"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "void bpf_tail_call(void *context, void *prog_map,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   unsigned int index);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and therefore replace its own program flow with the one from the program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the given program array slot, if present."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be regarded as kind of a jump table to a different eBPF program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The invoked program will then reuse the same stack."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a jump into the new program has been performed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it won't return to the old program anymore."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If no eBPF program is found at the given index of the program array"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(because the map slot doesn't contain a valid program file descriptor,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the specified lookup index/key is out of bounds,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the limit of 32"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MAX_TAIL_CALL_CNT"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "nested calls has been exceed),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "execution continues with the current eBPF program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used as a fall-through for default cases."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A program array map is useful, for example, in tracing or networking, to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "handle individual system calls or protocols in their own subprograms and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use their identifiers as an individual map index."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This approach may result in performance benefits,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and also makes it possible to overcome the maximum"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction limit of a single eBPF program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In dynamic environments,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a user-space daemon might atomically replace individual subprograms"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at run-time with newer versions to alter overall program behavior,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for instance, if global policies change."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " eBPF programs"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command is used to load an eBPF program into the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The return value for this command is a new file descriptor associated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with this eBPF program."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "char bpf_log_buf[LOG_BUF_SIZE];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_prog_load(enum bpf_prog_type type,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "              const struct bpf_insn *insns, int insn_cnt,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "              const char *license)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union bpf_attr attr = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .prog_type = type,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .insns     = ptr_to_u64(insns),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .insn_cnt  = insn_cnt,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .license   = ptr_to_u64(license),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .log_buf   = ptr_to_u64(bpf_log_buf),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .log_size  = LOG_BUF_SIZE,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        .log_level = 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return bpf(BPF_PROG_LOAD, &attr, sizeof(attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prog_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is one of the available program types:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enum bpf_prog_type {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_PROG_TYPE_UNSPEC,        /* Reserve 0 as invalid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                    program type */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_PROG_TYPE_SOCKET_FILTER,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_PROG_TYPE_KPROBE,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_PROG_TYPE_SCHED_CLS,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    BPF_PROG_TYPE_SCHED_ACT,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further details of eBPF program types, see below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The remaining fields of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are set as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " insns"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is an array of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct bpf_insn\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instructions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " insn_cnt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the number of instructions in the program referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " insns ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " license"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a license string, which must be GPL compatible to call helper functions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "marked"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gpl_only ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The licensing rules are the same as for kernel modules,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that also dual licenses, such as \"Dual BSD/GPL\", may be used.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_buf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a pointer to a caller-allocated buffer in which the in-kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "verifier can store the verification log."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This log is a multi-line string that can be checked by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the program author in order to understand how the verifier came to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the conclusion that the eBPF program is unsafe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The format of the output can change at any time as the verifier evolves."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "size of the buffer pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_buf ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the size of the buffer is not large enough to store all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "verifier messages, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_level"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "verbosity level of the verifier."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A value of zero means that the verifier will not provide a log;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in this case,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_buf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be a NULL pointer, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Applying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " close (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the file descriptor returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will unload the eBPF program (but see NOTES)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Maps are accessible from eBPF programs and are used to exchange data between"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF programs and between eBPF programs and user-space programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF programs can process various events (like kprobe, packets) and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "store their data into a map,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and user-space programs can then fetch data from the map."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Conversely, user-space programs can use a map as a configuration mechanism,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "populating the map with values checked by the eBPF program,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which then modifies its behavior on the fly according to those values."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " eBPF program types"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The eBPF program type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( prog_type )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "determines the subset of kernel helper functions that the program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The program type also determines the program input (context)"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "format of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct bpf_context\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(which is the data blob passed into the eBPF program as the first argument)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Somewhere in this page we need a general introduction to the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" bpf_context. For example, how does a BPF program access the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" context?"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For example, a tracing program does not have the exact same"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "subset of helper functions as a socket filter program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(though they may have some helpers in common)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Similarly,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the input (context) for a tracing program is a set of register values,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while for a socket filter it is a network packet."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The set of functions available to eBPF programs of a given type may increase"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the future."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following program types are supported:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_TYPE_SOCKET_FILTER \" (since Linux 3.19)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Currently, the set of functions for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_TYPE_SOCKET_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_map_lookup_elem(map_fd, void *key)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* look up key in a map_fd */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_map_update_elem(map_fd, void *key, void *value)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* update key/value */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bpf_map_delete_elem(map_fd, void *key)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* delete key in a map_fd */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_context"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is a pointer to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct __sk_buff\" ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME: We need some text here to explain how the program"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" accesses __sk_buff."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See 'struct __sk_buff' and commit 9bac3d6d548e5"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Alexei commented:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Actually now in case of SOCKET_FILTER, SCHED_CLS, SCHED_ACT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the program can now access skb fields."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_TYPE_KPROBE \" (since Linux 4.1)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2541517c32be2531e0da59dfd7efc1ce844644f5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "[To be documented]"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME Document this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t  Describe allowed helper functions for this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t  Describe bpf_context for this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME We need text here to describe 'kern_version'"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_TYPE_SCHED_CLS \" (since Linux 4.1)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 96be4325f443dbbfeb37d2a157675ac0736531a1"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e2e9b6541dd4b31848079da80fe2253daaafb549"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "[To be documented]"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME Document this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t  Describe allowed helper functions for this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t  Describe bpf_context for this program type"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_TYPE_SCHED_ACT \" (since Linux 4.1)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 94caee8c312d96522bcdae88791aaa9ebcd5f22c"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a8cb5f556b567974d75ea29c15181c445c541b1f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "[To be documented]"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME Document this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t  Describe allowed helper functions for this program type"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t  Describe bpf_context for this program type"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Events"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once a program is loaded, it can be attached to an event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Various kernel subsystems have different ways to do so."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 3.19,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 89aa075832b0da4402acebd698d0411dcc82d03e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the following call will attach the program"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prog_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the socket"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sockfd ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which was created by an earlier call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setsockopt(sockfd, SOL_SOCKET, SO_ATTACH_BPF,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           &prog_fd, sizeof(prog_fd));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 4.1,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2541517c32be2531e0da59dfd7efc1ce844644f5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the following call may be used to attach"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the eBPF program referred to by the file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prog_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to a perf event file descriptor,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " event_fd ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that was created by a previous call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open (2):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ioctl(event_fd, PERF_EVENT_IOC_SET_BPF, prog_fd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/* bpf+sockets example:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * 1. create array map of 256 elements"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * 2. load program that counts number of packets received"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " *    r0 = skb->data[ETH_HLEN + offsetof(struct iphdr, protocol)]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " *    map[r0]++"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * 3. attach prog_fd to raw socket via setsockopt()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * 4. print number of received TCP/UDP packets every second"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char **argv)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int sock, map_fd, prog_fd, key;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    long long value = 0, tcp_cnt, udp_cnt;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    map_fd = bpf_create_map(BPF_MAP_TYPE_ARRAY, sizeof(key),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                            sizeof(value), 256);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (map_fd < 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"failed to create map '%s'"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", strerror(errno));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        /* likely not run as root */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    struct bpf_insn prog[] = {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_MOV64_REG(BPF_REG_6, BPF_REG_1),        /* r6 = r1 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_LD_ABS(BPF_B, ETH_HLEN + offsetof(struct iphdr, protocol)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* r0 = ip->proto */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_STX_MEM(BPF_W, BPF_REG_10, BPF_REG_0, -4),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* *(u32 *)(fp - 4) = r0 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),       /* r2 = fp */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4),      /* r2 = r2 - 4 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_LD_MAP_FD(BPF_REG_1, map_fd),           /* r1 = map_fd */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_CALL_FUNC(BPF_FUNC_map_lookup_elem),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* r0 = map_lookup(r1, r2) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_JMP_IMM(BPF_JEQ, BPF_REG_0, 0, 2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* if (r0 == 0) goto pc+2 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_MOV64_IMM(BPF_REG_1, 1),                /* r1 = 1 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_XADD(BPF_DW, BPF_REG_0, BPF_REG_1, 0, 0),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* lock *(u64 *) r0 += r1 */"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"                                == atomic64_add"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        BPF_MOV64_IMM(BPF_REG_0, 0),                /* r0 = 0 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        BPF_EXIT_INSN(),                            /* return r0 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    prog_fd = bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, prog,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                            sizeof(prog), \"GPL\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sock = open_raw_sock(\"lo\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    assert(setsockopt(sock, SOL_SOCKET, SO_ATTACH_BPF, &prog_fd,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                      sizeof(prog_fd)) == 0);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (;;) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        key = IPPROTO_TCP;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        assert(bpf_lookup_elem(map_fd, &key, &tcp_cnt) == 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        key = IPPROTO_UDP;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        assert(bpf_lookup_elem(map_fd, &key, &udp_cnt) == 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"TCP %lld UDP %lld packets"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", tcp_cnt, udp_cnt);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        sleep(1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Some complete working code can be found in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " samples/bpf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "directory in the kernel source tree."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For a successful call, the return value depends on the operation:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_CREATE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The new file descriptor associated with the eBPF map."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The new file descriptor associated with the eBPF program."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All other commands"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On error, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set appropriately."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " E2BIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The eBPF program is too large or a map reached the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " max_entries"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "limit (maximum number of elements)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EACCES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_LOAD,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "even though all program instructions are valid, the program has been"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "rejected because it was deemed unsafe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This may be because it may have"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "accessed a disallowed memory region or an uninitialized stack/register or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because the function constraints don't match the actual types or because"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there was a misaligned memory access."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, it is recommended to call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "again with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_level = 1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and examine"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_buf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the specific reason provided by the verifier."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBADF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not an open file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "One of the pointers"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log_buf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " insns )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is outside the accessible address space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not recognized by this kernel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_CREATE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " map_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or attributes are invalid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_*_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "commands,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "some of the fields of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"union bpf_attr\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that are not used by this command"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are not set to zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_LOAD,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicates an attempt to load an invalid program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF programs can be deemed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "invalid due to unrecognized instructions, the use of reserved fields, jumps"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "out of range, infinite loops or calls of unknown functions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_LOOKUP_ELEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_MAP_DELETE_ELEM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicates that the element with the given"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not found."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Cannot allocate sufficient memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The call was made without sufficient privilege"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(without the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call first appeared in Linux 3.18."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call is Linux-specific."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the current implementation, all"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "commands require the caller to have the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "eBPF objects (maps and programs) can be shared between processes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, after"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the child inherits file descriptors referring to the same eBPF objects."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition, file descriptors referring to eBPF objects can be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "transferred over UNIX domain sockets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "File descriptors referring to eBPF objects can be duplicated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the usual way, using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dup (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and similar calls."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An eBPF object is deallocated only after all file descriptors"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "referring to the object have been closed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "eBPF programs can be written in a restricted C that is compiled (using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clang"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "compiler) into eBPF bytecode."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Various features are omitted from this restricted C, such as loops,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "global variables, variadic functions, floating-point numbers,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and passing structures as function arguments."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Some examples can be found in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " samples/bpf/*_kern.c"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "files in the kernel source tree."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" There are also examples for the tc classifier, in the iproute2"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" project, in examples/bpf"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The kernel contains a just-in-time (JIT) compiler that translates"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "eBPF bytecode into native machine code for better performance."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In kernels before Linux 4.15,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the JIT compiler is disabled by default,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but its operation can be controlled by writing one of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "following integer strings to the file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/bpf_jit_enable :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 0 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Disable JIT compilation (default)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Normal compilation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Debugging mode."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The generated opcodes are dumped in hexadecimal into the kernel log."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These opcodes can then be disassembled using the program"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tools/net/bpf_jit_disasm.c"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "provided in the kernel source tree."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 4.15,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 290af86629b25ffd1ed6232c4e9107da031705cb"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the kernel may configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_BPF_JIT_ALWAYS_ON"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, the JIT compiler is always enabled, and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf_jit_enable"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is initialized to 1 and is immutable."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This kernel configuration option was provided as a mitigation for"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "one of the Spectre attacks against the BPF interpreter.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The JIT compiler for eBPF is currently"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Last reviewed in Linux 4.18-rc by grepping for BPF_ALU64 in arch/"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and by checking the documentation for bpf_jit_enable in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Documentation/sysctl/net.txt"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "available for the following architectures:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "x86-64 (since Linux 3.18);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "ARM-64 (since Linux 3.18);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "s390 (since Linux 4.1);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "PowerPC 64 (since Linux 4.8);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "SPARC 64 (since Linux 4.12);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "MIPS 64 (since Linux 4.13);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "ARM32 (since Linux 4.14)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "x86-32 (since Linux 4.18)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " seccomp (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf-helpers (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tc (8),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tc-bpf (8)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Both classic and extended BPF are explained in the kernel source file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Documentation/networking/filter.txt ."
        }
      ]
    ]
  }
]
