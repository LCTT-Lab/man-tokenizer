[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2012, Vincent Weaver"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(GPLv2+_DOC_FULL)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This is free documentation; you can redistribute it and/or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modify it under the terms of the GNU General Public License as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" published by the Free Software Foundation; either version 2 of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the License, or (at your option) any later version."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The GNU General Public License's references to \"object code\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and \"executables\" are to be interpreted as the output of any"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" document formatting or typesetting system, including"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" intermediate and printed output."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This manual is distributed in the hope that it will be useful,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but WITHOUT ANY WARRANTY; without even the implied warranty of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" GNU General Public License for more details."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" You should have received a copy of the GNU General Public"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" License along with this manual; if not, see"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" <http://www.gnu.org/licenses/>."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This document is based on the perf_event.h header file, the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" tools/perf/design.txt file, and a lot of bitter experience."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_OPEN 2 2018-02-02 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "perf_event_open "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " set up performance monitoring"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <linux/perf_event.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <linux/hw_breakpoint.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int perf_event_open(struct perf_event_attr *\" attr ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                    pid_t \" pid \", int \" cpu \", int \" group_fd ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                    unsigned long \" flags  );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There is no glibc wrapper for this system call; see NOTES."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Given a list of parameters,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a file descriptor, for use in subsequent system calls"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( read \"(2), \" mmap \"(2), \" prctl \"(2), \" fcntl \"(2), etc.).\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "creates a file descriptor that allows measuring performance"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "information."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each file descriptor corresponds to one"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event that is measured; these can be grouped together"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to measure multiple events simultaneously."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Events can be enabled and disabled in two ways: via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prctl (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When an event is disabled it does not count or generate overflows but does"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "continue to exist and maintain its count value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Events come in two flavors: counting and sampled."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " counting"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event is one that is used for counting the aggregate number of events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that occur."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In general, counting event results are gathered with a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sampling"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event periodically writes measurements to a buffer that can then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be accessed via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Arguments"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arguments allow specifying which process and CPU to monitor:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pid == 0\" \" and \" \"cpu == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This measures the calling process/thread on any CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pid == 0\" \" and \" \"cpu >= 0\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This measures the calling process/thread only"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when running on the specified CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pid > 0\" \" and \" \"cpu == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This measures the specified process/thread on any CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pid > 0\" \" and \" \"cpu >= 0\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This measures the specified process/thread only"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when running on the specified CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pid == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\" \" and \" \"cpu >= 0\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This measures all processes/threads on the specified CPU."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This requires"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability or a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_paranoid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value of less than 1."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pid == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\" \" and \" \"cpu == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This setting is invalid and will return an error."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is greater than zero, permission to perform this system call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is governed by a ptrace access mode"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PTRACE_MODE_READ_REALCREDS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "check; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ptrace (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument allows event groups to be created."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An event group has one event which is the group leader."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The leader is created first, with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd \" = "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1.\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The rest of the group members are created with subsequent"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being set to the file descriptor of the group leader."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(A single event on its own is created with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd \" = "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and is considered to be a group with only 1 member.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An event group is scheduled onto the CPU as a unit: it will"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be put onto the CPU only if all of the events in the group can be put onto"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the CPU."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means that the values of the member events can be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "meaningfully compared"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "added, divided (to get ratios), and so on"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "with each"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "other, since they have counted events for the same set of executed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instructions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is formed by ORing together zero or more of the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FLAG_FD_CLOEXEC \" (since Linux 3.14)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a21b0b354d4ac39be691f51c53562e2c24443d9e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This flag enables the close-on-exec flag for the created"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event file descriptor,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that the file descriptor is automatically closed on"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting the close-on-exec flags at creation time, rather than later with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "avoids potential race conditions where the calling thread invokes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the same time as another thread calls"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FLAG_FD_NO_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag tells the event to ignore the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter except for the purpose of setting up output redirection"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FLAG_FD_OUTPUT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FLAG_FD_OUTPUT \" (broken since Linux 2.6.35)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ac9721f3f54b27a16c7e1afb2481e7ee95a70318"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This flag re-routes the event's sampled output to instead"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be included in the mmap buffer of the event specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FLAG_PID_CGROUP \" (since Linux 2.6.39)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e5d1367f17ba6a6fed5fd8b74e4d5720923e0c25"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This flag activates per-container system-wide monitoring."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A container"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is an abstraction that isolates a set of resources for finer-grained"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "control (CPUs, memory, etc.)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this mode, the event is measured"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only if the thread running on the monitored CPU belongs to the designated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "container (cgroup)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The cgroup is identified by passing a file descriptor"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "opened on its directory in the cgroupfs filesystem."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For instance, if the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cgroup to monitor is called"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " test ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then a file descriptor opened on"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /dev/cgroup/test"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(assuming cgroupfs is mounted on"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /dev/cgroup )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be passed as the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cgroup monitoring is available only"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for system-wide events and may therefore require extra permissions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure provides detailed configuration information"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the event being created."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct perf_event_attr {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 type;                 /* Type of event */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 size;                 /* Size of attribute structure */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 config;               /* Type-specific configuration */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 sample_period;    /* Period of sampling */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 sample_freq;      /* Frequency of sampling */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    __u64 sample_type;  /* Specifies values included in sample */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 read_format;  /* Specifies values returned in read */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    __u64 disabled       : 1,   /* off by default */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          inherit        : 1,   /* children inherit it */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          pinned         : 1,   /* must always be on PMU */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclusive      : 1,   /* only group on PMU */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_user   : 1,   /* don't count user */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_kernel : 1,   /* don't count kernel */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_hv     : 1,   /* don't count hypervisor */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_idle   : 1,   /* don't count when idle */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          mmap           : 1,   /* include mmap data */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          comm           : 1,   /* include comm data */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          freq           : 1,   /* use freq, not period */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          inherit_stat   : 1,   /* per task counts */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          enable_on_exec : 1,   /* next exec enables */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          task           : 1,   /* trace fork/exit */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          watermark      : 1,   /* wakeup_watermark */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          precise_ip     : 2,   /* skid constraint */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          mmap_data      : 1,   /* non-exec mmap data */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          sample_id_all  : 1,   /* sample_type all events */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_host   : 1,   /* don't count in host */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_guest  : 1,   /* don't count in guest */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_callchain_kernel : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* exclude kernel callchains */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          exclude_callchain_user   : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                /* exclude user callchains */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          mmap2          :  1,  /* include mmap with inode data */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          comm_exec      :  1,  /* flag comm events that are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                   due to exec */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          use_clockid    :  1,  /* use clockid for time fields */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "          context_switch :  1,  /* context switch data */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "          __reserved_1   : 37;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32 wakeup_events;    /* wakeup every n events */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u32 wakeup_watermark; /* bytes before wakeup */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    __u32     bp_type;          /* breakpoint type */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 bp_addr;          /* breakpoint address */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 kprobe_func;      /* for perf_kprobe */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 uprobe_path;      /* for perf_uprobe */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 config1;          /* extension of config */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 bp_len;           /* breakpoint length */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 kprobe_addr;      /* with kprobe_func == NULL */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 probe_offset;     /* for perf_[k,u]probe */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64 config2;          /* extension of config1 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 branch_sample_type;   /* enum perf_branch_sample_type */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 sample_regs_user;     /* user regs to dump on samples */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 sample_stack_user;    /* size of stack to dump on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                   samples */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __s32 clockid;              /* clock to use for time fields */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 sample_regs_intr;     /* regs to dump on samples */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 aux_watermark;        /* aux bytes before wakeup */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u16 sample_max_stack;     /* max frames in callchain */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u16 __reserved_2;         /* align to u64 */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The fields of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure are described in more detail below:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field specifies the overall event type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It has one of the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_HARDWARE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates one of the \"generalized\" hardware events provided"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field definition for more details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_SOFTWARE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates one of the software-defined events provided by the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(even if no hardware support is available)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_TRACEPOINT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates a tracepoint"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "provided by the kernel tracepoint infrastructure."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_HW_CACHE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates a hardware cache event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This has a special encoding, described in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field definition."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_RAW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates a \"raw\" implementation-specific event in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config \" field.\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_BREAKPOINT \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This indicates a hardware breakpoint as provided by the CPU."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Breakpoints can be read/write accesses to an address as well as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "execution of an instruction address."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"dynamic PMU\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since Linux 2.6.38,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2e80a82a49c4c7eca4e35734380f28298ba5db19"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can support multiple PMUs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To enable this, a value exported by the kernel can be used in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field to indicate which PMU to use."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value to use can be found in the sysfs filesystem:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there is a subdirectory per PMU instance under"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In each subdirectory there is a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file whose content is an integer that can be used in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For instance,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/cpu/type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the value for the core CPU PMU, which is usually 4."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe \" and \" uprobe \" (since Linux 4.17)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 65074d43fc77bcae32776724b7fa2696923c78e4"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e12f03d7031a977356e3d7b75a68c2185ff8d155"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 33ea4b24277b06dbc55d7f5772a46f029600255e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These two dynamic PMUs create a kprobe/uprobe and attach it to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor generated by perf_event_open."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The kprobe/uprobe will be destroyed on the destruction of the file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See fields"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe_func \", \" uprobe_path \", \" kprobe_addr \", and \" probe_offset"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for more details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"size\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The size of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure for forward/backward compatibility."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set this using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sizeof(struct perf_event_attr)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to allow the kernel to see"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the struct size at the time of compilation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The related define"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to 64; this was the size of the first published struct."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 72, corresponding to the addition of breakpoints in Linux 2.6.33."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit cb5d76999029ae7a517cb07dfa732c1b5a934fc2"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" this was added much later when PERF_ATTR_SIZE_VER2 happened"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but the actual attr_size had increased in 2.6.33"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 80 corresponding to the addition of branch sampling in Linux 3.4."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit cb5d76999029ae7a517cb07dfa732c1b5a934fc2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER3"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 96 corresponding to the addition"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_stack_user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in Linux 3.7."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 1659d129ed014b715b0b2120e6fd929bdd33ed03"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER4"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 104 corresponding to the addition of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_intr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in Linux 3.19."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 60e2364e60e86e81bc6377f49779779e6120977f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER5"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 112 corresponding to the addition of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_watermark"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in Linux 4.1."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 1a5941312414c71dece6717da9a0fa1303127afa"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"config\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This specifies which event you want, in conjunction with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config1 \" and \" config2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields are also taken into account in cases where 64 bits is not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enough to fully specify the event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The encoding of these fields are event dependent."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There are various ways to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field that are dependent on the value of the previously"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "described"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "What follows are various possible settings for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "separated out by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_HARDWARE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "we are measuring one of the generalized hardware CPU events."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not all of these are available on all platforms."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to one of the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 12"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CPU_CYCLES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total cycles."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Be wary of what happens during CPU frequency scaling."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_INSTRUCTIONS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Retired instructions."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Be careful, these can be affected by various"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "issues, most notably hardware interrupt counts."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_REFERENCES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Cache accesses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Usually this indicates Last Level Cache accesses but this may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "vary depending on your CPU."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This may include prefetches and coherency messages; again this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depends on the design of your CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_MISSES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Cache misses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Usually this indicates Last Level Cache misses; this is intended to be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "used in conjunction with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_REFERENCES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event to calculate cache miss rates."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_BRANCH_INSTRUCTIONS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Retired branch instructions."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 2.6.35, this used"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the wrong event on AMD processors."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f287d332ce835f77a4f5077d2c0ef1e3f9ea42d2"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_BRANCH_MISSES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Mispredicted branch instructions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_BUS_CYCLES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bus cycles, which can be different from total cycles."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_STALLED_CYCLES_FRONTEND \" (since Linux 3.0)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 8f62242246351b5a4bc0c1f00c0c7003edea128a"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Stalled cycles during issue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_STALLED_CYCLES_BACKEND  \" (since Linux 3.0)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 8f62242246351b5a4bc0c1f00c0c7003edea128a"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Stalled cycles during retirement."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_REF_CPU_CYCLES  \" (since Linux 3.3)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c37e17497e01fc0f5d2d6feb5723b210b3ab8890"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Total cycles; not affected by CPU frequency scaling."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_SOFTWARE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "we are measuring software events provided by the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to one of the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 12"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_CPU_CLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This reports the CPU clock, a high-resolution per-CPU timer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_TASK_CLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This reports a clock count specific to the task that is running."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_PAGE_FAULTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This reports the number of page faults."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_CONTEXT_SWITCHES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This counts context switches."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Until Linux 2.6.34, these were all reported as user-space"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "events, after that they are reported as happening in the kernel."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e49a5bd38159dfb1928fd25b173bc9de4bbadb21"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_CPU_MIGRATIONS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This reports the number of times the process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has migrated to a new CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_PAGE_FAULTS_MIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This counts the number of minor page faults."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These did not require disk I/O to handle."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_PAGE_FAULTS_MAJ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This counts the number of major page faults."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These required disk I/O to handle."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_ALIGNMENT_FAULTS \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f7d7986060b2890fc26db6ab5203efbd33aa2497"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This counts the number of alignment faults."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These happen when unaligned memory accesses happen; the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can handle these but it reduces performance."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This happens only on some architectures (never on x86)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_EMULATION_FAULTS \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f7d7986060b2890fc26db6ab5203efbd33aa2497"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This counts the number of emulation faults."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The kernel sometimes traps on unimplemented instructions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and emulates them for user space."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can negatively impact performance."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_SW_DUMMY \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa0097ee690693006ab1aea6c01ad3c851b65c77"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is a placeholder event that counts nothing."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Informational sample record types such as mmap or comm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be associated with an active event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This dummy event allows gathering such records without requiring"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a counting event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_TRACEPOINT ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then we are measuring kernel tracepoints."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value to use in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be obtained from under debugfs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tracing/events/*/*/id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if ftrace is enabled in the kernel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_HW_CACHE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then we are measuring a hardware CPU cache event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To calculate the appropriate"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value use the following equation:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    (perf_hw_cache_id) | (perf_hw_cache_op_id << 8) |"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    (perf_hw_cache_op_result_id << 16)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_hw_cache_id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is one of:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_L1D"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for measuring Level 1 Data Cache"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_L1I"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for measuring Level 1 Instruction Cache"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_LL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for measuring Last-Level Cache"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_DTLB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for measuring the Data TLB"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_ITLB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for measuring the Instruction TLB"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_BPU"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for measuring the branch prediction unit"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_NODE \" (since Linux 3.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 89d6c0b5bdbb1927775584dcf532d98b3efe1477"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "for measuring local memory accesses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_hw_cache_op_id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is one of:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_OP_READ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for read accesses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_OP_WRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for write accesses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_OP_PREFETCH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for prefetch accesses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_hw_cache_op_result_id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is one of:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_RESULT_ACCESS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to measure accesses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_COUNT_HW_CACHE_RESULT_MISS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to measure misses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_RAW ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then a custom \"raw\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value is needed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Most CPUs support events that are not covered by the \"generalized\" events."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These are implementation defined; see your CPU manual (for example"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the Intel Volume 3B documentation or the AMD BIOS and Kernel Developer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Guide)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The libpfm4 library can be used to translate from the name in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "architectural manuals to the raw hex value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "expects in this field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_BREAKPOINT ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then leave"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Its parameters are set in other places."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uprobe ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " retprobe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(bit 0 of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/[k,u]probe/format/retprobe )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for kretprobe/uretprobe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See fields"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe_func \", \" uprobe_path \", \" kprobe_addr \", and \" probe_offset"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for more details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe_func \", \" uprobe_path \", \" kprobe_addr \", and \" probe_offset"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These fields describe the kprobe/uprobe for dynamic PMUs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uprobe ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe_func"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " probe_offset ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe_addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and leave"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " kprobe_func"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as NULL."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uprobe :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uprobe_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " probe_offset ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_period \", \" sample_freq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A \"sampling\" event is one that generates an overflow notification"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "every N events, where N is given by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_period ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A sampling event has"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_period \" > 0.\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When an overflow occurs, requested data is recorded"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the mmap buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field controls what data is recorded on each overflow."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_freq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used if you wish to use frequency rather than period."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, you set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The kernel will adjust the sampling period"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to try and achieve the desired rate."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The rate of adjustment is a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "timer tick."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sample_type\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The various bits in this field specify which values to include"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the sample."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "They will be recorded in a ring-buffer,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is available to user space using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The order in which the values are saved in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sample are documented in the MMAP Layout subsection below;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is not the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"enum perf_event_sample_format\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "order."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records instruction pointer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_TID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records the process and thread IDs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_TIME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records a timestamp."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ADDR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records an address, if applicable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_READ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Record counter values for all events in a group, not just the group leader."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_CALLCHAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records the callchain (stack backtrace)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records a unique ID for the opened event's group leader."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_CPU"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records CPU number."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_PERIOD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records the current sampling period."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_STREAM_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records a unique ID for the opened event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unlike"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the actual ID is returned, not the group leader."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This ID is the same as the one returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_ID ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_RAW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Records additional data, if applicable."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Usually returned by tracepoint events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_STACK \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit bce38cd53e5ddba9cb6d708c4ef3d04a4016ec7e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This provides a record of recent branches, as provided"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by CPU branch sampling hardware (such as Intel Last Branch Record)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not all hardware supports this feature."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "See the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " branch_sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field for how to filter which branches are reported."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_USER \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 4018994f3d8785275ef0e7391b75c3462c029e56"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Records the current user-level CPU register state"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the values in the process before the kernel was called)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_STACK_USER \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c5ebcedb566ef17bda7b02686e0d658a7bb42ee7"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Records the user level stack, allowing stack unwinding."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_WEIGHT \" (since Linux 3.10)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c3feedf2aaf9ac8bad6f19f5d21e4ee0b4b87e9c"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Records a hardware provided weight value that expresses how"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "costly the sampled event was."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This allows the hardware to highlight expensive events in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a profile."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_DATA_SRC \" (since Linux 3.10)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit d6be9ad6c960f43800a6f118932bc8a5a4eadcd1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Records the data source: where in the memory hierarchy"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the data associated with the sampled instruction came from."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is available only if the underlying hardware"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "supports this feature."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IDENTIFIER \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ff3d527cebc1fa3707c617bfe9e74f53fcfb0955"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Places the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value in a fixed position in the record,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "either at the beginning (for sample events) or at the end"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(if a non-sample event)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This was necessary because a sample stream may have"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "records from various different event sources with different"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "settings."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Parsing the event stream properly was not possible because the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "format of the record was needed to find"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_ID ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the format could not be found without knowing what"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event the sample belonged to (causing a circular"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "dependency)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IDENTIFIER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setting makes the event stream always parsable"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by putting"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a fixed location, even though"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it means having duplicate"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values in records."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_TRANSACTION \" (since Linux 3.13)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fdfbbd07e91f8fe387140776f3fd94605f0c89e5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Records reasons for transactional memory abort events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(for example, from Intel TSX transactional memory support)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " precise_ip"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setting must be greater than 0 and a transactional memory abort"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event must be measured or no values will be recorded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Also note that some perf_event measurements, such as sampled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cycle counting, may cause extraneous aborts (by causing an"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interrupt during a transaction)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_INTR \" (since Linux 3.19)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 60e2364e60e86e81bc6377f49779779e6120977f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Records a subset of the current CPU register state"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_intr ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unlike"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the register values will return kernel register"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "state if the overflow happened while kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "code is running."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the CPU supports hardware sampling of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "register state (i.e., PEBS on Intel x86) and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " precise_ip"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set higher than zero then the register"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values returned are those captured by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "hardware at the time of the sampled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction's retirement."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"read_format\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field specifies the format of the data returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_TOTAL_TIME_ENABLED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Adds the 64-bit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used to calculate estimated totals if"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the PMU is overcommitted and multiplexing is happening."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_TOTAL_TIME_RUNNING"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Adds the 64-bit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used to calculate estimated totals if"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the PMU is overcommitted and multiplexing is happening."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Adds a 64-bit unique value that corresponds to the event group."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Allows all counter values in an event group to be read with one read."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"disabled\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " disabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit specifies whether the counter starts out disabled or enabled."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If disabled, the event can later be enabled by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prctl (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " enable_on_exec ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When creating an event group, typically the group leader is initialized"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " disabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to 1 and any child events are initialized with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " disabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to 0."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Despite"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " disabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being 0, the child events will not start until the group leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"inherit\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inherit"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit specifies that this counter should count events of child"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tasks as well as the task specified."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This applies only to new children, not to any existing children at"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the time the counter is created (nor to any new children of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "existing children)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Inherit does not work for some combinations of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read_format"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values, such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_GROUP ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"pinned\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pinned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit specifies that the counter should always be on the CPU if at all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "possible."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It applies only to hardware counters and only to group leaders."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a pinned counter cannot be put onto the CPU (e.g., because there are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not enough hardware counters or because of a conflict with some other"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event), then the counter goes into an 'error' state, where reads"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return end-of-file (i.e.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns 0) until the counter is subsequently enabled or disabled."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclusive\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exclusive"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit specifies that when this counter's group is on the CPU,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it should be the only group using the CPU's counters."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the future this may allow monitoring programs to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "support PMU features that need to run alone so that they do not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "disrupt other hardware counters."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that many unexpected situations may prevent events with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exclusive"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit set from ever running."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This includes any users running a system-wide"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "measurement as well as any kernel use of the performance counters"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(including the commonly enabled NMI Watchdog Timer interface)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_user\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, the count excludes events that happen in user space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_kernel\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, the count excludes events that happen in kernel space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_hv\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, the count excludes events that happen in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "hypervisor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is mainly for PMUs that have built-in support for handling this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(such as POWER)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Extra support is needed for handling hypervisor measurements on most"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "machines."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_idle\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If set, don't count when the CPU is running the idle task."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "While you can currently enable this for any event type, it is ignored"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for all but software events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"mmap\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit enables generation of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MMAP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "samples for every"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call that has"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PROT_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This allows tools to notice new executable code being mapped into"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a program (dynamic shared libraries for example)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that addresses can be mapped back to the original code."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"comm\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " comm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit enables tracking of process command name as modified by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exec (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prctl (PR_SET_NAME)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system calls as well as writing to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/self/comm ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " comm_exec"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is also successfully set (possible since Linux 3.16),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 82b897782d10fcc4930c9d4a15b175348fdd2871"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "then the misc flag"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_COMM_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used to differentiate the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exec (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "case from the others."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"freq\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_frequency"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_period"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used when setting up the sampling interval."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"inherit_stat\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This bit enables saving of event counts on context switch for"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inherited tasks."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is meaningful only if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inherit"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"enable_on_exec\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, a counter is automatically"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enabled after a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exec (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"task\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fork/exit notifications are included in the ring buffer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"watermark\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If set, have an overflow notification happen when we cross the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_watermark"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "boundary."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise, overflow notifications happen after"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "samples."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"precise_ip\" \" (since Linux 2.6.35)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ab608344bcbde4f55ec4cd911b686b0ce3eae076"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This controls the amount of skid."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Skid is how many instructions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "execute between an event of interest happening and the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being able to stop and record the event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Smaller skid is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "better and allows more accurate reporting of which events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "correspond to which instructions, but hardware is often limited"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with how small this can be."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The possible values of this field are the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 0 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can have arbitrary skid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must have constant skid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requested to have 0 skid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must have 0 skid."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See also the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_EXACT_IP ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"mmap_data\" \" (since Linux 2.6.36)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 3af9e859281bda7eb7c20b51879cf43aa788ac2e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is the counterpart of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This enables generation of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MMAP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "samples for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls that do not have"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PROT_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set (for example data and SysV shared memory)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sample_id_all\" \" (since Linux 2.6.38)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c980d1091810df13f21aabbce545fd98f545bbf7"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If set, then TID, TIME, ID, STREAM_ID, and CPU can"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "additionally be included in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " non- PERF_RECORD_SAMPLE s"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the corresponding"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is selected."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IDENTIFIER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified, then an additional ID value is included"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as the last value to ease parsing the record stream."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This may lead to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value appearing twice."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The layout is described by this pseudo-structure:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct sample_id {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    { u32 pid, tid; }   /* if PERF_SAMPLE_TID set */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    { u64 time;     }   /* if PERF_SAMPLE_TIME set */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    { u64 id;       }   /* if PERF_SAMPLE_ID set */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    { u64 stream_id;}   /* if PERF_SAMPLE_STREAM_ID set  */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    { u32 cpu, res; }   /* if PERF_SAMPLE_CPU set */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    { u64 id;       }   /* if PERF_SAMPLE_IDENTIFIER set */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_host\" \" (since Linux 3.2)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a240f76165e6255384d4bdb8139895fac7988799"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When conducting measurements that include processes running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "VM instances (i.e., have executed a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " KVM_RUN"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only measure events happening inside a guest instance."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is only meaningful outside the guests; this setting does"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not change counts gathered inside of a guest."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Currently, this functionality is x86 only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_guest\" \" (since Linux 3.2)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a240f76165e6255384d4bdb8139895fac7988799"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When conducting measurements that include processes running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "VM instances (i.e., have executed a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " KVM_RUN"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "do not measure events happening inside guest instances."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is only meaningful outside the guests; this setting does"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not change counts gathered inside of a guest."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Currently, this functionality is x86 only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_callchain_kernel\" \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit d077526485d5c9b12fe85d0b2b3b7041e6bc5f91"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Do not include kernel callchains."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"exclude_callchain_user\" \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit d077526485d5c9b12fe85d0b2b3b7041e6bc5f91"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Do not include user callchains."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"mmap2\" \" (since Linux 3.16)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 13d7a2410fa637f450a29ecb515ac318ee40c741"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This is tricky; was committed during 3.12 development"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but right before release was disabled."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" So while you could select mmap2 starting with 3.12"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" it did not work until 3.16"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a5a5ba72843dd05f991184d6cb9a4471acce1005"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Generate an extended executable mmap record that contains enough"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "additional information to uniquely identify shared mappings."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag must also be set for this to work."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"comm_exec\" \" (since Linux 3.16)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 82b897782d10fcc4930c9d4a15b175348fdd2871"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is purely a feature-detection flag, it does not change"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "kernel behavior."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag can successfully be set, then, when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " comm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_COMM_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag will be set in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " misc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of a comm record header if the rename event being"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "reported was caused by a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exec (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This allows tools to distinguish between the various"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "types of process renaming."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"use_clockid\" \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 34f439278cef7b1177f8ce24f9fc81dfc6221d3b"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This allows selecting which internal Linux clock to use"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when generating timestamps via the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clockid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can make it easier to correlate perf sample times with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "timestamps generated by other tools."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"context_switch\" \" (since Linux 4.3)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 45ac1403f564f411c6a383a2448688ba8dd705a4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This enables the generation of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "records when a context switch occurs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It also enables the generation of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH_CPU_WIDE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "records when sampling in CPU-wide mode."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This functionality is in addition to existing tracepoint and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "software events for measuring context switches."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The advantage of this method is that it will give full"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "information even with strict"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_paranoid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "settings."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"wakeup_events\" \", \" \"wakeup_watermark\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This union sets how many samples"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( wakeup_events )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or bytes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( wakeup_watermark )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "happen before an overflow notification happens."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Which one is used is selected by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " watermark"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "counts only"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SAMPLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "record types."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To receive overflow notification for all"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "types choose watermark and set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_watermark"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to 1."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 3.0, setting"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f506b3dc0ec454a16d40cab9ee5d75435b39dc50"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to 0 resulted in no overflow notifications;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "more recent kernels treat 0 the same as 1."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"bp_type\" \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This chooses the breakpoint type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is one of:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_EMPTY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "No breakpoint."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_R"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Count when we read the memory location."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_W"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Count when we write the memory location."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_RW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Count when we read or write the memory location."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_X"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Count when we execute code at the memory location."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The values can be combined via a bitwise or, but the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "combination of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_R"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_W"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_X"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not allowed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"bp_addr\" \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is the address of the breakpoint."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For execution breakpoints, this is the memory address of the instruction"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of interest; for read and write breakpoints, it is the memory address"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the memory location of interest."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"config1\" \" (since Linux 2.6.39)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a7e3ed1e470116c9d12c2f778431a481a6be8ab6"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used for setting events that need an extra register or otherwise"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "do not fit in the regular config field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Raw OFFCORE_EVENTS on Nehalem/Westmere/SandyBridge use this field"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on Linux 3.3 and later kernels."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"bp_len\" \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 24f1e32c60c45c89a997c73395b69c8af6f0a84e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bp_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the length of the breakpoint being measured if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TYPE_BREAKPOINT ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Options are"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_LEN_1 ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_LEN_2 ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_LEN_4 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HW_BREAKPOINT_LEN_8 ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For an execution breakpoint, set this to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sizeof(long) ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"config2\" \" (since Linux 2.6.39)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a7e3ed1e470116c9d12c2f778431a481a6be8ab6"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a further extension of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"branch_sample_type\" \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit bce38cd53e5ddba9cb6d708c4ef3d04a4016ec7e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_STACK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then this specifies what branches to include"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the branch record."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The first part of the value is the privilege level, which"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a combination of one of the values listed below."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the user does not set privilege level explicitly, the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will use the event's privilege level."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Event and branch privilege levels do not have to match."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Branch target is in user space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_KERNEL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Branch target is in kernel space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_HV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Branch target is in hypervisor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_PLM_ALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A convenience value that is the three preceding values ORed together."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In addition to the privilege value, at least one or more of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "following bits must be set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_ANY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any branch type."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_ANY_CALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any call branch (includes direct calls, indirect calls, and far jumps)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_IND_CALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Indirect calls."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_CALL \" (since Linux 4.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c229bf9dc179d2023e185c0f705bdf68484c1e73"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Direct calls."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_ANY_RETURN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any return branch."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_IND_JUMP \" (since Linux 4.2)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c9fdfa14c3792c0160849c484e83aa57afd80ccc"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Indirect jumps."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_COND \" (since Linux 3.16)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit bac52139f0b7ab31330e98fd87fc5a2664951050"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Conditional branches."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_ABORT_TX \" (since Linux 3.11)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 135c5612c460f89657c4698fe2ea753f6f667963"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Transactional memory aborts."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_IN_TX \" (since Linux 3.11)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 135c5612c460f89657c4698fe2ea753f6f667963"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Branch in transactional memory transaction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_NO_TX \" (since Linux 3.11)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 135c5612c460f89657c4698fe2ea753f6f667963"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Branch not in transactional memory transaction."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_CALL_STACK \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2c44b1936bb3b135a3fac8b3493394d42e51cf70"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Branch is part of a hardware-generated call stack."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This requires hardware support, currently only found"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on Intel x86 Haswell or newer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sample_regs_user\" \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 4018994f3d8785275ef0e7391b75c3462c029e56"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This bit mask defines the set of user CPU registers to dump on samples."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The layout of the register mask is architecture-specific and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is described in the kernel header file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arch/ARCH/include/uapi/asm/perf_regs.h ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sample_stack_user\" \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c5ebcedb566ef17bda7b02686e0d658a7bb42ee7"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This defines the size of the user stack to dump if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_STACK_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"clockid\" \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 34f439278cef7b1177f8ce24f9fc81dfc6221d3b"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " use_clockid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then this field selects which internal Linux timer to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use for timestamps."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The available timers are defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " linux/time.h ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLOCK_MONOTONIC ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLOCK_MONOTONIC_RAW ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLOCK_REALTIME ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLOCK_BOOTTIME ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLOCK_TAI"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "currently supported."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"aux_watermark\" \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 1a5941312414c71dece6717da9a0fa1303127afa"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This specifies how much data is required to trigger a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_AUX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sample."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sample_max_stack\" \" (since Linux 4.8)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 97c79a38cd454602645f0470ffb444b3b75ce574"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "includes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_CALLCHAIN ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this field specifies how many stack frames to report when"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "generating the callchain."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Reading results"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor has been opened, the values"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the events can be read from the file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The values that are there are specified by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read_format"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure at open time."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If you attempt to read into a buffer that is not big enough to hold the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data, the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "results."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Here is the layout of the data returned by a read:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified to allow reading all events in a group at once:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct read_format {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 nr;            /* The number of events */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 time_enabled;  /* if PERF_FORMAT_TOTAL_TIME_ENABLED */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 time_running;  /* if PERF_FORMAT_TOTAL_TIME_RUNNING */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        u64 value;     /* The value of the event */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        u64 id;        /* if PERF_FORMAT_ID */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    } values[nr];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct read_format {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 value;         /* The value of the event */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 time_enabled;  /* if PERF_FORMAT_TOTAL_TIME_ENABLED */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 time_running;  /* if PERF_FORMAT_TOTAL_TIME_RUNNING */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 id;            /* if PERF_FORMAT_ID */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The values read are as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of events in this file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Available only if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_enabled \", \" time_running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total time the event was enabled and running."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Normally these values are the same."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If more events are started,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then available counter slots on the PMU, then multiplexing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "happens and events run only part of the time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In that case, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values can be used to scale an estimated value for the count."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An unsigned 64-bit value containing the counter result."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A globally unique value for this particular event; only present if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read_format ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " MMAP layout"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in sampled mode, asynchronous events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(like counter overflow or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PROT_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mmap tracking)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are logged into a ring-buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This ring-buffer is created and accessed through"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The mmap size should be 1+2^n pages, where the first page is a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "metadata page"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( \"struct perf_event_mmap_page\" )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that contains various"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bits of information such as where the ring-buffer head is."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Before kernel 2.6.39, there is a bug that means you must allocate an mmap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ring buffer when sampling even if you do not plan to access it."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The structure of the first metadata mmap page is as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct perf_event_mmap_page {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 version;        /* version number of this structure */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 compat_version; /* lowest version this is compat with */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 lock;           /* seqlock for synchronization */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 index;          /* hardware counter identifier */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __s64 offset;         /* add to hardware counter value */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 time_enabled;   /* time event active */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 time_running;   /* time event on CPU */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        __u64   capabilities;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            __u64 cap_usr_time / cap_usr_rdpmc / cap_bit0 : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                  cap_bit0_is_deprecated : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                  cap_user_rdpmc         : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                  cap_user_time          : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                  cap_user_time_zero     : 1,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        };"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    };"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u16 pmc_width;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u16 time_shift;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32 time_mult;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 time_offset;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 __reserved[120];   /* Pad to 1 k */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 data_head;         /* head in the data section */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 data_tail;         /* user-space written tail */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 data_offset;       /* where the buffer starts */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 data_size;         /* data buffer size */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 aux_head;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 aux_tail;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 aux_offset;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u64 aux_size;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following list describes the fields in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_mmap_page"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure in more detail:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " version"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Version number of this structure."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " compat_version"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The lowest version this is compatible with."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A seqlock for synchronization."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " index"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A unique hardware counter identifier."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " offset"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When using rdpmc for reads this offset value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be added to the one returned by rdpmc to get"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the current total event count."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Time the event was active."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Time the event was running."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time \" / \" cap_usr_rdpmc \" / \" cap_bit0 \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c7206205d00ab375839bd6c7ddb247d600693c09"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There was a bug in the definition of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from Linux 3.4 until Linux 3.11."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Both bits were defined to point to the same location, so it was"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "impossible to know if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "were actually set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting with Linux 3.12, these are renamed to"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_bit0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and you should use the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields instead."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_bit0_is_deprecated \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If set, this bit indicates that the kernel supports"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the properly separated"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bits."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If not-set, it indicates an older kernel where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "map to the same bit and thus both features should"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be used with caution."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_rdpmc \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the hardware supports user-space read of performance counters"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without syscall (this is the \"rdpmc\" instruction on x86), then"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the following code can be used to do a read:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "u32 seq, time_mult, time_shift, idx, width;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "u64 count, enabled, running;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "u64 cyc, time_offset;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "do {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    seq = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">lock;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    barrier();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    enabled = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">time_enabled;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    running = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">time_running;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">cap_usr_time && enabled != running) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        cyc = rdtsc();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        time_offset = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">time_offset;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        time_mult   = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">time_mult;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        time_shift  = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">time_shift;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    idx = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">index;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    count = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">offset;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">cap_usr_rdpmc && idx) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        width = pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">pmc_width;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        count += rdpmc(idx "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    barrier();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} while (pc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">lock != seq);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_time \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This bit indicates the hardware has a constant, nonstop"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "timestamp counter (TSC on x86)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_time_zero \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Indicates the presence of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_zero"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which allows mapping timestamp values to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the hardware clock."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pmc_width"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_rdpmc ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this field provides the bit-width of the value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "read using the rdpmc or equivalent instruction."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used to sign extend the result like:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pmc <<= 64 "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " pmc_width;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pmc >>= 64 "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " pmc_width; // signed shift right"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "count += pmc;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_shift \", \" time_mult \", \" time_offset"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "these fields can be used to compute the time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "delta since"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(in nanoseconds) using rdtsc or similar."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    u64 quot, rem;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64 delta;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    quot = (cyc >> time_shift);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    rem = cyc & (((u64)1 << time_shift) "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    delta = time_offset + quot * time_mult +"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            ((rem * time_mult) >> time_shift);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_offset ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_mult ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_shift ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cyc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are read in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "seqcount loop described above."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This delta can then be added to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enabled and possible running (if idx), improving the scaling:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    enabled += delta;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (idx)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        running += delta;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    quot = count / running;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    rem  = count % running;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    count = quot * enabled + (rem * enabled) / running;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_zero \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time_zero"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then the hardware clock (the TSC timestamp counter on x86)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be calculated from the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_zero \", \" time_mult \", and \" time_shift \" values:\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    time = timestamp - time_zero;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    quot = time / time_mult;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    rem  = time % time_mult;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    cyc = (quot << time_shift) + (rem << time_shift) / time_mult;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "And vice versa:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    quot = cyc >> time_shift;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    rem  = cyc & (((u64)1 << time_shift) - 1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    timestamp = time_zero + quot * time_mult +"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ((rem * time_mult) >> time_shift);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This points to the head of the data section."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value continuously increases, it does not wrap."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value needs to be manually wrapped by the size of the mmap buffer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before accessing the samples."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On SMP-capable platforms, after reading the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user space should issue an rmb()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_tail"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the mapping is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PROT_WRITE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_tail"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value should be written by user space to reflect the last read data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, the kernel will not overwrite unread data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_offset \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e8c6deac69629c0cb97c3d3272f8631ef17f8f0f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Contains the offset of the location in the mmap buffer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where perf sample data begins."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_size \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit e8c6deac69629c0cb97c3d3272f8631ef17f8f0f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Contains the size of the perf sample region within"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the mmap buffer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_head \", \" aux_tail \", \" aux_offset \", \" aux_size \" (since Linux 4.1)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 45bfb2e50471abbbfd83d40d28c986078b0d24ff"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The AUX region allows mmaping a separate sample buffer for"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "high-bandwidth data streams (separate from the main perf sample buffer)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An example of a high-bandwidth stream is instruction tracing support,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as is found in newer Intel processors."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To set up an AUX area, first"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_offset"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "needs to be set with an offset greater than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_offset + data_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "needs to be set to the desired buffer size."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The desired offset and size must be page aligned, and the size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be a power of two."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These values are then passed to mmap in order to map the AUX buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Pages in the AUX buffer are included as part of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RLIMIT_MEMLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resource limit (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setrlimit (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and also as part of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_mlock_kb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allowance."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "By default, the AUX buffer will be truncated if it will not fit"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the available space in the ring buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the AUX buffer is mapped as a read only buffer, then it will"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operate in ring buffer mode where old data will be overwritten"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by new."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In overwrite mode, it might not be possible to infer where the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "new data began, and it is the consumer's job to disable"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "measurement while reading to avoid possible data races."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_head \" and \" aux_tail"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ring buffer pointers have the same behavior and ordering"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "rules as the previous described"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_head \" and \" data_tail ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following 2^n ring-buffer pages have the layout described below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr.sample_id_all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set, then all event types will"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "have the sample_type selected fields related to where/when (identity)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an event took place (TID, TIME, ID, CPU, STREAM_ID) described in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SAMPLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "below, it will be stashed just after the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_header"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the fields already present for the existing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields, that is, at the end of the payload."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This allows a newer perf.data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file to be supported by older perf tools, with the new optional"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields being ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The mmap values start with a header:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct perf_event_header {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32   type;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u16   misc;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u16   size;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Below, we describe the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_header"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields in more detail."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For ease of reading,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the fields with shorter descriptions are presented first."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates the size of the record."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " misc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " misc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field contains additional information about the sample."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The CPU mode can be determined from this value by masking with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_CPUMODE_MASK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and looking for one of the following (note these are not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit masks, only one can be set at a time):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_CPUMODE_UNKNOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unknown CPU mode."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_KERNEL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sample happened in the kernel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sample happened in user code."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_HYPERVISOR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sample happened in the hypervisor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_GUEST_KERNEL \" (since Linux 2.6.35)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 39447b386c846bbf1c56f6403c5282837486200f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Sample happened in the guest kernel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_GUEST_USER \" (since Linux 2.6.35)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 39447b386c846bbf1c56f6403c5282837486200f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Sample happened in guest user code."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since the following three statuses are generated by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "different record types, they alias to the same bit:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_MMAP_DATA \" (since Linux 3.10)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2fe85427e3bf65d791700d065132772fc26e4d75"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is set when the mapping is not executable;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "otherwise the mapping is executable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_COMM_EXEC \" (since Linux 3.16)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 82b897782d10fcc4930c9d4a15b175348fdd2871"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is set for a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_COMM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "record on kernels more recent than Linux 3.16"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if a process name change was caused by an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exec (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_SWITCH_OUT \" (since Linux 4.3)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 45ac1403f564f411c6a383a2448688ba8dd705a4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH_CPU_WIDE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "record is generated, this bit indicates that the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "context switch is away from the current process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(instead of into the current process)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In addition, the following bits can be set:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_EXACT_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates that the content of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the actual instruction that triggered the event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See also"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr.precise_ip ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_EXT_RESERVED \" (since Linux 2.6.35)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 1676b8a077c352085d52578fb4f29350b58b6e74"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This indicates there is extended data available (currently not used)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_PROC_MAP_PARSE_TIMEOUT"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 930e6fcd2bcce9bcd9d4aa7e755678d33f3fe6f4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This bit is not set by the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is reserved for the user-space perf utility to indicate that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/i[pid]/maps"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parsing was taking too long and was stopped, and thus the mmap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "records may be truncated."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value is one of the below."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The values in the corresponding record (that follows the header)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depend on the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "selected as shown."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MMAP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The MMAP events record the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PROT_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mappings so that we can correlate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user-space IPs to code."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "They have the following structure:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid, tid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    len;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    pgoff;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char   filename[];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the process ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the thread ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the address of the allocated memory."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the length of the allocated memory."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pgoff"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the page offset of the allocated memory."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a string describing the backing of the allocated memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_LOST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates when events are lost."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    lost;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the unique event ID for the samples that were lost."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lost"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the number of events that were lost."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_COMM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a change in the process name."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    tid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char   comm[];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the process ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the thread ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " comm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a string containing the new name of the process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_EXIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a process exit event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid, ppid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    tid, ptid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    time;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_THROTTLE \", \" PERF_RECORD_UNTHROTTLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a throttle/unthrottle event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    time;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    stream_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_FORK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a fork event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid, ppid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    tid, ptid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    time;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_READ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a read event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid, tid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct read_format values;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SAMPLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a sample."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    sample_id;   /* if PERF_SAMPLE_IDENTIFIER */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    ip;          /* if PERF_SAMPLE_IP */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid, tid;    /* if PERF_SAMPLE_TID */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    time;        /* if PERF_SAMPLE_TIME */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    addr;        /* if PERF_SAMPLE_ADDR */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    id;          /* if PERF_SAMPLE_ID */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    stream_id;   /* if PERF_SAMPLE_STREAM_ID */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    cpu, res;    /* if PERF_SAMPLE_CPU */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    period;      /* if PERF_SAMPLE_PERIOD */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct read_format v;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        /* if PERF_SAMPLE_READ */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    nr;          /* if PERF_SAMPLE_CALLCHAIN */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    ips[nr];     /* if PERF_SAMPLE_CALLCHAIN */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    size;        /* if PERF_SAMPLE_RAW */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char  data[size];   /* if PERF_SAMPLE_RAW */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    bnr;         /* if PERF_SAMPLE_BRANCH_STACK */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_branch_entry lbr[bnr];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        /* if PERF_SAMPLE_BRANCH_STACK */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    abi;         /* if PERF_SAMPLE_REGS_USER */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    regs[weight(mask)];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        /* if PERF_SAMPLE_REGS_USER */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    size;        /* if PERF_SAMPLE_STACK_USER */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char   data[size];  /* if PERF_SAMPLE_STACK_USER */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    dyn_size;    /* if PERF_SAMPLE_STACK_USER &&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                           size != 0 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    weight;      /* if PERF_SAMPLE_WEIGHT */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    data_src;    /* if PERF_SAMPLE_DATA_SRC */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    transaction; /* if PERF_SAMPLE_TRANSACTION */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    abi;         /* if PERF_SAMPLE_REGS_INTR */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    regs[weight(mask)];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        /* if PERF_SAMPLE_REGS_INTR */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IDENTIFIER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, a 64-bit unique ID is included."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is a duplication of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value, but included at the beginning of the sample"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so parsers can easily obtain the value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ip"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_IP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit instruction"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer value is included."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid \", \" tid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_TID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 32-bit process ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and 32-bit thread ID are included."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_TIME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit timestamp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is included."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is obtained via local_clock() which is a hardware timestamp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if available and the jiffies value if not."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ADDR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit address is included."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is usually the address of a tracepoint,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "breakpoint, or software event; otherwise the value is 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, a 64-bit unique ID is included."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the event is a member of an event group, the group leader ID is returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This ID is the same as the one returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_ID ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stream_id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_STREAM_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, a 64-bit unique ID is included."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unlike"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the actual ID is returned, not the group leader."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This ID is the same as the one returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_ID ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu \", \" res"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_CPU"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, this is a 32-bit value indicating"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which CPU was being used, in addition to a reserved (unused)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "32-bit value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " period"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_PERIOD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, a 64-bit value indicating"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the current sampling period is written."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " v"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_READ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, a structure of type read_format"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is included which has values for all events in the event group."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The values included depend on the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read_format"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value used at"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "time."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nr \", \" ips[nr]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_CALLCHAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit number is included"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which indicates how many following 64-bit instruction pointers will"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "follow."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is the current callchain."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size \", \" data[size]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_RAW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 32-bit value indicating size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is included followed by an array of 8-bit values of length size."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The values are padded with 0 to have 64-bit alignment."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This RAW record data is opaque with respect to the ABI."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The ABI doesn't make any promises with respect to the stability"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of its content, it may vary depending"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on event, hardware, and kernel version."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bnr \", \" lbr[bnr]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_BRANCH_STACK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit value indicating"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the number of records is included, followed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bnr"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_branch_entry"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structures which each include the fields:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " from"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This indicates the source instruction (may not be a branch)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The branch target."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mispred"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The branch target was mispredicted."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " predicted"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The branch target was predicted."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " in_tx \" (since Linux 3.11)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 135c5612c460f89657c4698fe2ea753f6f667963"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The branch was in a transactional memory transaction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abort \" (since Linux 3.11)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 135c5612c460f89657c4698fe2ea753f6f667963"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The branch was in an aborted transactional memory transaction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cycles \" (since Linux 4.3)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 71ef3c6b9d4665ee7afbbe4c208a98917dcfc32f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This reports the number of cycles elapsed since the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "previous branch stack update."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The entries are from most to least recent, so the first entry"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has the most recent branch."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Support for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mispred ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " predicted ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cycles"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is optional; if not supported, those"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values will be 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The type of branches recorded is specified by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " branch_sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abi \", \" regs[weight(mask)]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then the user CPU registers are recorded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abi"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is one of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_ABI_NONE \", \" PERF_SAMPLE_REGS_ABI_32 \" or \""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_ABI_64 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " regs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is an array of the CPU registers that were specified by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attr field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of values is the number of bits set in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit mask."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size \", \" data[size] \", \" dyn_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_STACK_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then the user stack is recorded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used to generate stack backtraces."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the size requested by the user in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_stack_user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or else the maximum record size."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the stack data (a raw dump of the memory pointed to by the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "stack pointer at the time of sampling)."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dyn_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the amount of data actually dumped (can be less than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dyn_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is omitted if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " weight"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_WEIGHT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit value provided by the hardware"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is recorded that indicates how costly the event was."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This allows expensive events to stand out more clearly"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in profiles."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data_src"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_DATA_SRC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then a 64-bit value is recorded that is made up of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the following fields:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mem_op"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Type of opcode, a bitwise combination of:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 24"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_OP_NA"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not available"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_OP_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Load instruction"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_OP_STORE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Store instruction"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_OP_PFETCH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Prefetch"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_OP_EXEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Executable code"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mem_lvl"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Memory hierarchy level hit or miss, a bitwise combination of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the following, shifted left by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_SHIFT :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 24"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_NA"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not available"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_HIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Hit"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_MISS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Miss"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_L1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Level 1 cache"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_LFB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Line fill buffer"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_L2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Level 2 cache"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_L3"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Level 3 cache"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_LOC_RAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Local DRAM"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_REM_RAM1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote DRAM 1 hop"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_REM_RAM2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote DRAM 2 hops"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_REM_CCE1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote cache 1 hop"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_REM_CCE2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote cache 2 hops"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_IO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "I/O memory"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LVL_UNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Uncached memory"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mem_snoop"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Snoop mode, a bitwise combination of the following, shifted left by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_SNOOP_SHIFT :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 24"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_SNOOP_NA"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not available"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_SNOOP_NONE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "No snoop"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_SNOOP_HIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Snoop hit"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_SNOOP_MISS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Snoop miss"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_SNOOP_HITM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Snoop hit modified"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mem_lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Lock instruction, a bitwise combination of the following, shifted left by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LOCK_SHIFT :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 24"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LOCK_NA"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not available"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_LOCK_LOCKED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Locked transaction"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mem_dtlb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TLB access hit or miss, a bitwise combination of the following, shifted"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "left by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_SHIFT :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 24"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_NA"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not available"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_HIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Hit"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_MISS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Miss"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_L1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Level 1 TLB"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_L2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Level 2 TLB"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_WK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Hardware walker"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_MEM_TLB_OS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "OS fault handler"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " transaction"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_TRANSACTION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is set, then a 64-bit field is recorded describing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the sources of any transactional memory aborts."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The field is a bitwise combination of the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_ELISION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Abort from an elision type transaction (Intel-CPU-specific)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_TRANSACTION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Abort from a generic transaction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_SYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Synchronous abort (related to the reported instruction)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_ASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Asynchronous abort (not related to the reported instruction)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_RETRY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Retryable abort (retrying the transaction may have succeeded)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_CONFLICT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Abort due to memory conflicts with other threads."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_CAPACITY_WRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Abort due to write capacity overflow."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_CAPACITY_READ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Abort due to read capacity overflow."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In addition, a user-specified abort code can be obtained from"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the high 32 bits of the field by shifting right by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_ABORT_SHIFT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and masking with the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_TXN_ABORT_MASK ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abi \", \" regs[weight(mask)]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_INTR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is enabled, then the user CPU registers are recorded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abi"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is one of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_ABI_NONE ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_ABI_32 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_REGS_ABI_64 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " regs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is an array of the CPU registers that were specified by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_intr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attr field."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of values is the number of bits set in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_regs_intr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit mask."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MMAP2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record includes extended information on"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls returning executable mappings."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The format is similar to that of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MMAP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "record, but includes extra values that allow uniquely identifying"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "shared mappings."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    tid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    len;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    pgoff;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    maj;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    min;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    ino;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    ino_generation;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    prot;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    flags;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char   filename[];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the process ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the thread ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the address of the allocated memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the length of the allocated memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pgoff"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the page offset of the allocated memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " maj"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the major ID of the underlying device."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " min"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the minor ID of the underlying device."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ino"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the inode number."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ino_generation"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the inode generation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prot"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the protection information."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the flags information."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a string describing the backing of the allocated memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_AUX \" (since Linux 4.1)\""
        }
      ],
      [
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" commit 68db7e98c3a6ebe7284b6cf14906ed7c55f3f7f0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record reports that new data is available in the separate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "AUX buffer region."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    aux_offset;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    aux_size;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    flags;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_offset"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "offset in the AUX mmap region where the new data begins."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " aux_size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "size of the data made available."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "describes the AUX update."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_AUX_FLAG_TRUNCATED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if set, then the data returned was truncated to fit the available"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "buffer size."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_AUX_FLAG_OVERWRITE"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2023a0d2829e521fe6ad6b9907f3f90bfbf57142"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "if set, then the data returned has overwritten previous data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_ITRACE_START \" (since Linux 4.1)\""
        }
      ],
      [
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" ec0d7729bbaed4b9d2d3fada693278e13a3d1368"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates which process has initiated an instruction"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "trace event, allowing tools to properly correlate the instruction"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "addresses in the AUX buffer with the proper executable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32    tid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process ID of the thread starting an instruction trace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread ID of the thread starting an instruction trace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_LOST_SAMPLES \" (since Linux 4.2)\""
        }
      ],
      [
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" f38b0dbb491a6987e198aa6b428db8692a6480f8"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When using hardware sampling (such as Intel PEBS) this record"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicates some number of samples that may have been lost."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u64    lost;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lost"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the number of potentially lost samples."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH \" (since Linux 4.3)\""
        }
      ],
      [
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" commit 45ac1403f564f411c6a383a2448688ba8dd705a4"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This record indicates a context switch has happened."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_SWITCH_OUT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " misc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field indicates whether it was a context switch into"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or away from the current process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH_CPU_WIDE \" (since Linux 4.3)\""
        }
      ],
      [
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" commit 45ac1403f564f411c6a383a2448688ba8dd705a4"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "As with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_SWITCH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this record indicates a context switch has happened,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but it only occurs when sampling in CPU-wide mode"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and provides additional information on the process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being switched to/from."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_MISC_SWITCH_OUT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " misc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field indicates whether it was a context switch into"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or away from the current process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_header header;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32 next_prev_pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    u32 next_prev_tid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sample_id sample_id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " next_prev_pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The process ID of the previous (if switching in)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or next (if switching out) process on the CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " next_prev_tid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The thread ID of the previous (if switching in)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or next (if switching out) thread on the CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Overflow handling"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Events can be set to notify when a threshold is crossed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicating an overflow."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Overflow conditions can be captured by monitoring the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "event file descriptor with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " epoll (7)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Alternatively, the overflow events can be captured via sa signal handler,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by enabling I/O signaling on the file descriptor; see the discussion of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operations in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Overflows are generated only by sampling events"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( sample_period"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must have a nonzero value)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There are two ways to generate overflow notifications."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The first is to set a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wakeup_watermark"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value that will trigger if a certain number of samples"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or bytes have been written to the mmap ring buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " POLL_IN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is indicated."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The other way is by use of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_REFRESH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ioctl."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This ioctl adds to a counter that decrements each time the event overflows."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When nonzero,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " POLL_IN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is indicated, but"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "once the counter reaches 0"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " POLL_HUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is indicated and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the underlying event is disabled."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Refreshing an event group leader refreshes all siblings and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "refreshing with a parameter of 0 currently enables infinite"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "refreshes;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "these behaviors are unsupported and should not be relied on."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See https://lkml.org/lkml/2011/5/24/337"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting with Linux 3.18,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 179033b3e064d2cd3f5f9945e76b0a0f0fbf4883"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " POLL_HUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is indicated if the event being monitored is attached to a different"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process and that process exits."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " rdpmc instruction"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting with Linux 3.4 on x86, you can use the"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit c7206205d00ab375839bd6c7ddb247d600693c09"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction to get low-latency reads without having to enter the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not necessarily faster than other methods for reading event values."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Support for this can be detected with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field in the mmap page; documentation on how"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to calculate event values can be found in that section."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Originally, when rdpmc support was enabled, any process (not just ones"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with an active perf event) could use the rdpmc instruction to access"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the counters."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Starting with Linux 4.0,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 7911d3f7af14a614617e38245fedf98a724e46a9"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "rdpmc support is only allowed if an event is currently enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a process's context."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To restore the old behavior, write the value 2 to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/devices/cpu/rdpmc ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " perf_event ioctl calls"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Various ioctls act on"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptors:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_ENABLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This enables the individual event or event group specified by the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor argument."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_IOC_FLAG_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit is set in the ioctl argument, then all events in a group are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enabled, even if the event specified is not the group leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(but see BUGS)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_DISABLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This disables the individual counter or event group specified by the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor argument."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Enabling or disabling the leader of a group enables or disables the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "entire group; that is, while the group leader is disabled, none of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "counters in the group will count."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enabling or disabling a member of a group other than the leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "affects only that counter; disabling a non-leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "stops that counter from counting but doesn't affect any other counter."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_IOC_FLAG_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit is set in the ioctl argument, then all events in a group are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "disabled, even if the event specified is not the group leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(but see BUGS)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_REFRESH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Non-inherited overflow counters can use this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to enable a counter for a number of overflows specified by the argument,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after which it is disabled."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Subsequent calls of this ioctl add the argument value to the current"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "count."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An overflow notification with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " POLL_IN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set will happen on each overflow until the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "count reaches 0; when that happens a notification with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " POLL_HUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set is sent and the event is disabled."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Using an argument of 0 is considered undefined behavior."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_RESET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Reset the event count specified by the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor argument to zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This resets only the counts; there is no way to reset the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "multiplexing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_enabled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " time_running"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_IOC_FLAG_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bit is set in the ioctl argument, then all events in a group are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "reset, even if the event specified is not the group leader"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(but see BUGS)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_PERIOD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This updates the overflow period for the event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 3.7 (on ARM)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 3581fe0ef37ce12ac7a4f74831168352ae848edc"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and Linux 3.14 (all other architectures),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit bad7192b842c83e580747ca57104dd51fe08c223"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the new period takes effect immediately."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On older kernels, the new period did not take effect until"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after the next overflow."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is a pointer to a 64-bit value containing the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "desired new period."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 2.6.36,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ad0cf3478de8677f720ee06393b3147819568d6a"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "this ioctl always failed due to a bug"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the kernel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_SET_OUTPUT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This tells the kernel to report event notifications to the specified"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor rather than the default one."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The file descriptors must all be on the same CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument specifies the desired file descriptor, or "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 if"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "output should be ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_SET_FILTER \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 6fb2915df7f0747d9044da9dbff5b46dc2e20830"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This adds an ftrace filter to this event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is a pointer to the desired ftrace filter."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_ID \" (since Linux 3.12)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit cf4957f17f2a89984915ea808876d9c82225b862"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This returns the event ID value for the given event file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is a pointer to a 64-bit unsigned integer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to hold the result."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_SET_BPF \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 2541517c32be2531e0da59dfd7efc1ce844644f5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This allows attaching a Berkeley Packet Filter (BPF)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program to an existing kprobe tracepoint event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "You need"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "privileges to use this ioctl."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is a BPF program file descriptor that was created by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a previous"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_PAUSE_OUTPUT \" (since Linux 4.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 86e7972f690c1017fd086cdfe53d8524e68c661c"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This allows pausing and resuming the event's ring-buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A paused ring-buffer does not prevent generation of samples,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but simply discards them."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The discarded samples are considered lost, and cause a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_RECORD_LOST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sample to be generated when possible."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An overflow signal may still be triggered by the discarded sample"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "even though the ring-buffer remains empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is an unsigned 32-bit integer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A nonzero value pauses the ring-buffer, while a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "zero value resumes the ring-buffer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_MODIFY_ATTRIBUTES \" (since Linux 4.17)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 32ff77e8cc9e66cc4fb38098f64fd54cc8f54573"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This allows modifying an existing event without the overhead"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of closing and reopening a new event."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Currently this is supported only for breakpoint events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is a pointer to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure containing the updated event settings."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_EVENT_IOC_QUERY_BPF \" (since Linux 4.16)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f371b304f12e31fe30207c41ca7754564e0ea4dc"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This allows querying which Berkeley Packet Filter (BPF)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "programs are attached to an existing kprobe tracepoint."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "You can only attach one BPF program per event, but you can"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "have multiple events attached to a tracepoint."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Querying this value on one tracepoint event returns the id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of all BPF programs in all events attached to the tracepoint."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "You need"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "privileges to use this ioctl."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument is a pointer to a structure"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct perf_event_query_bpf {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32    ids_len;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32    prog_cnt;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    __u32    ids[0];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ids_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field indicates the number of ids that can fit in the provided"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ids"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "array."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prog_cnt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value is filled in by the kernel with the number of attached"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "BPF programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ids"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "array is filled with the id of each attached BPF program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If there are more programs than will fit in the array, then the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "kernel will return"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ids_len"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will indicate the number of program IDs that were successfully copied."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Using prctl(2)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A process can enable or disable all currently open event groups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prctl (2)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PR_TASK_PERF_EVENTS_ENABLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PR_TASK_PERF_EVENTS_DISABLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operations."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This applies only to events created locally by the calling process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This does not apply to events created by other processes attached"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the calling process or inherited events from a parent process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Only group leaders are enabled and disabled,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not any other members of the groups."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " perf_event related configuration files"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Files in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_paranoid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_paranoid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file can be set to restrict access to the performance counters."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allow only user-space measurements (default since Linux 4.6)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" default changed in commit 0161028b7c8aebef64194d3d73e43bc3b53b5c66"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allow both kernel and user measurements (default before Linux 4.6)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allow access to CPU-specific data but not raw tracepoint samples."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "no restrictions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The existence of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_paranoid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file is the official method for determining if a kernel supports"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_max_sample_rate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This sets the maximum sample rate."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting this too high can allow"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "users to sample at a rate that impacts overall machine performance"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and potentially lock up the machine."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default value is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "100000 (samples per second)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_max_stack"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Introduced in c5dfd78eb79851e278b7973031b9ca363da87a7e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This file sets the maximum depth of stack frame entries reported"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when generating a call trace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_mlock_kb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Maximum number of pages an unprivileged user can"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mlock (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default is 516 (kB)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Files in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since Linux 2.6.34, the kernel supports having multiple PMUs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "available for monitoring."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Information on how to program these PMUs can be found under"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/ ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each subdirectory corresponds to a different PMU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/*/type \" (since Linux 2.6.38)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit abe43400579d5de0078c2d3a760e6598e183f871"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This contains an integer that can be used in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to indicate that you wish to use this PMU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/cpu/rdpmc \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 0c9d42ed4cee2aa1dfc3a260b741baae8615744f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If this file is 1, then direct user-space access to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performance counter registers is allowed via the rdpmc instruction."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be disabled by echoing 0 to the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As of Linux 4.0"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" a66734297f78707ce39d756b656bfae861d53f62"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 7911d3f7af14a614617e38245fedf98a724e46a9"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the behavior has changed, so that 1 now means only allow access"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to processes with active perf events, with 2 indicating the old"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allow-anyone-access behavior."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/*/format/ \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 641cc938815dfd09f8fa1ec72deb814f0938ac33"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This subdirectory contains information on the architecture-specific"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "subfields available for programming the various"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The content of each file is the name of the config field, followed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by a colon, followed by a series of integer bit ranges separated by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "commas."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, the file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " event"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may contain the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config1:1,6"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "10,44"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which indicates that event is an attribute that occupies bits 1,6"
        },
        {
          "type": "ESCAPE",
          "content": "\\(en"
        },
        {
          "type": "TEXT",
          "content": "10, and 44"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr::config1 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/*/events/ \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 641cc938815dfd09f8fa1ec72deb814f0938ac33"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This subdirectory contains files with predefined events."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The contents are strings describing the event settings"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "expressed in terms of the fields found in the previously mentioned"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ./format/"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "directory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These are not necessarily complete lists of all events supported by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a PMU, but usually a subset of events deemed useful or interesting."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The content of each file is a list of attribute names"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "separated by commas."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each entry has an optional value (either hex or decimal)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If no value is specified, then it is assumed to be a single-bit"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field with a value of 1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An example entry may look like this:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " event=0x2,inv,ldlat=3 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/*/uevent"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This file is the standard kernel device interface"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for injecting hotplug events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys/bus/event_source/devices/*/cpumask \" (since Linux 3.7)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 314d9f63f385096580e9e2a06eaa0745d92fe4ac"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpumask"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file contains a comma-separated list of integers that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicate a representative CPU number for each socket (package)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the motherboard."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is needed when setting up uncore or northbridge events, as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "those PMUs present socket-wide events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the new file descriptor, or "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 if an error occurred"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(in which case,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set appropriately)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The errors returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be inconsistent, and may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "vary across processor architectures and performance monitoring units."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " E2BIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value is too small"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(smaller than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_ATTR_SIZE_VER0 ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "too big (larger than the page size),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or larger than the kernel supports and the extra bytes are not zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " E2BIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is returned, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_attr"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is overwritten by the kernel to be the size of the structure"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it was expecting."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EACCES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned when the requested event requires"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "permissions (or a more permissive perf_event paranoid setting)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Some common cases where an unprivileged process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may encounter this error:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attaching to a process owned by a different user;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "monitoring all processes on a given CPU (i.e., specifying the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument as "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and not setting"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exclude_kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when the paranoid setting requires it."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBADF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " group_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor is not valid, or, if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FLAG_PID_CGROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the cgroup file descriptor in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not valid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBUSY \" (since Linux 4.1)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" bed5b25ad9c8a2f5d735ef0bc746ec870c01c1b0"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Returned if another event already has exclusive"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "access to the PMU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer points at an invalid memory address."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if the specified event is invalid."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There are many possible reasons for this."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A not-exhaustive list:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_freq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is higher than the maximum setting;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cpu"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to monitor does not exist;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read_format"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is out of range;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is out of range;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value is out of range;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exclusive"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pinned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set and the event is not a group leader;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the event"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " config"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values are out of range or set reserved bits;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the generic event selected is not supported; or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there is not enough room to add the selected event."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EMFILE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each opened event uses one file descriptor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a large number of events are opened,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the per-process limit on the number of open file descriptors will be reached,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and no more events can be created."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENODEV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned when the event involves a feature not supported"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by the current CPU."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setting is not valid."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This error is also returned for"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "some unsupported generic events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 3.3, if there was not enough room for the event,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit aa2bc1ade59003a379ffc485d6da2d92ea3370a6"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In Linux 3.3, this was changed to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is still returned if you try to add more breakpoint events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "than supported by the hardware."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSYS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_STACK_USER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and it is not supported by hardware."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EOPNOTSUPP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if an event requiring a specific hardware feature is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requested but there is no hardware support."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This includes requesting low-skid events if not supported,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "branch tracing if it is not available, sampling if no PMU"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interrupt is available, and branch stacks for software events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EOVERFLOW \" (since Linux 4.8)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 97c79a38cd454602645f0470ffb444b3b75ce574"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Returned if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_SAMPLE_CALLCHAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is requested and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sample_max_stack"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is larger than the maximum specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_max_stack ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned on many (but not all) architectures when an unsupported"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exclude_hv \", \" exclude_idle \", \" exclude_user \", or \" exclude_kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setting is specified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "It can also happen, as with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EACCES ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when the requested event requires"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "permissions (or a more permissive perf_event paranoid setting)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This includes setting a breakpoint on a kernel address,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and (since Linux 3.13) setting a kernel function-trace tracepoint."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit a4e95fc2cbb31d70a65beffeaf8773f881328c34"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ESRCH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returned if attempting to attach to a process that does not exist."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was introduced in Linux 2.6.31 but was called"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 0793a61d4df8daeac6492dbf8d2f3e5713caae5e"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_counter_open ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It was renamed in Linux 2.6.32."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit cdd6c482c9ff9c55475ee7392ec8f672eddb7be6"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call Linux-specific"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and should not be used in programs intended to be portable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Glibc does not provide a wrapper for this system call; call it using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the example below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The official way of knowing if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "support is enabled is checking"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the existence of the file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/perf_event_paranoid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN_EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is needed to properly get overflow signals in threads."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This was introduced in Linux 2.6.32."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ba0a6c9f6fceed11c6a99e8326f0477fe383e6b5"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 2.6.33 (at least for x86),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit b690081d4d3f6a23541493f1682835c3cd5c54a1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the kernel did not check"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if events could be scheduled together until read time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The same happens on all known kernels if the NMI watchdog is enabled."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means to see if a given set of events works you have to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf_event_open (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "start, then read before you know for sure you"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can get valid measurements."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 2.6.34,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . cannot find a kernel commit for this one"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "event constraints were not enforced by the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In that case, some events would silently return \"0\" if the kernel"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "scheduled them in an improper counter slot."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 2.6.34, there was a bug when multiplexing where the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wrong results could be returned."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 45e16a6834b6af098702e5ea6c9a40de42ff77d8"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Kernels from Linux 2.6.35 to Linux 2.6.39 can quickly crash the kernel if"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\"inherit\" is enabled and many threads are started."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 38b435b16c36b0d863efcf3f07b34a6fac9873fd"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Prior to Linux 2.6.35,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 050735b08ca8a016bbace4445fa025b88fee770b"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_FORMAT_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "did not work with attached processes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There is a bug in the kernel code between"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 2.6.36 and Linux 3.0 that ignores the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\"watermark\" field and acts as if a wakeup_event"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was chosen if the union has a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nonzero value in it."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 4ec8363dfc1451f8c8f86825731fe712798ada02"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "From Linux 2.6.31 to Linux 3.4, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PERF_IOC_FLAG_GROUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ioctl argument was broken and would repeatedly operate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the event specified rather than iterating across"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all sibling events in a group."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 724b6daa13e100067c30cfc4d1ad06629609dc4e"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "From Linux 3.4 to Linux 3.11, the mmap"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit fa7315871046b9a4c48627905691dbde57e51033"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_usr_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bits mapped to the same location."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Code should migrate to the new"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_rdpmc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cap_user_time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields instead."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Always double-check your results!"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Various generalized events have had wrong values."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, retired branches measured"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the wrong thing on AMD machines until Linux 2.6.35."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit f287d332ce835f77a4f5077d2c0ef1e3f9ea42d2"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following is a short example that measures the total"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction count of a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " printf (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/ioctl.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <linux/perf_event.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <asm/unistd.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static long"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "perf_event_open(struct perf_event_attr *hw_event, pid_t pid,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                int cpu, int group_fd, unsigned long flags)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int ret;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = syscall(__NR_perf_event_open, hw_event, pid, cpu,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   group_fd, flags);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    return ret;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char **argv)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct perf_event_attr pe;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    long long count;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int fd;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&pe, 0, sizeof(struct perf_event_attr));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pe.type = PERF_TYPE_HARDWARE;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pe.size = sizeof(struct perf_event_attr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pe.config = PERF_COUNT_HW_INSTRUCTIONS;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pe.disabled = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pe.exclude_kernel = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pe.exclude_hv = 1;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    fd = perf_event_open(&pe, 0, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (fd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       fprintf(stderr, \"Error opening leader %llx"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", pe.config);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ioctl(fd, PERF_EVENT_IOC_RESET, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ioctl(fd, PERF_EVENT_IOC_ENABLE, 0);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Measuring instruction count for this printf"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ioctl(fd, PERF_EVENT_IOC_DISABLE, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    read(fd, &count, sizeof(long long));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Used %lld instructions"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", count);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(fd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " perf (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prctl (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2)"
        }
      ]
    ]
  }
]
