[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) International Business Machines Corp., 2006"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(GPLv2+_SW_3_PARA)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This program is free software; you can redistribute it and/or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modify it under the terms of the GNU General Public License as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" published by the Free Software Foundation; either version 2 of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the License, or (at your option) any later version."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This program is distributed in the hope that it will be useful,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but WITHOUT ANY WARRANTY; without even the implied warranty of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the GNU General Public License for more details."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" You should have received a copy of the GNU General Public"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" License along with this manual; if not, see"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" <http://www.gnu.org/licenses/>."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" HISTORY:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-09-28, created by Arnd Bergmann <arndb@de.ibm.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2006-06-16, revised by Eduardo M. Fleury <efleury@br.ibm.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2007-07-10, some polishing by mtk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2007-09-28, updates for newer kernels, added example"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"             by Jeremy Kerr <jk@ozlabs.org>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SPU_RUN 2 2017-09-15 Linux \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "spu_run "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " execute an SPU context"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/spu.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int spu_run(int \" fd \", unsigned int *\" npc "
        },
        {
          "type": "ESCAPE",
          "content": "\\"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "\", unsigned int *\" event \");\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There is no glibc wrapper for this system call; see NOTES."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call is used on PowerPC machines that implement the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Cell Broadband Engine Architecture in order to access Synergistic"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Processor Units (SPUs)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is a file descriptor returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_create (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that refers to a specific SPU context."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the context gets scheduled to a physical SPU,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it starts execution at the instruction pointer passed in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " npc ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Execution of SPU code happens synchronously, meaning that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blocks while the SPU is still running."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If there is a need"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to execute SPU code in parallel with other code on either the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main CPU or other SPUs, a new thread of execution must be created"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "first (e.g., using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_create (3))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns, the current value of the SPU program counter is written to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " npc ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so successive calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can use the same"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " npc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " event"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument provides a buffer for an extended status code."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the SPU"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "context was created with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SPU_CREATE_EVENTS_ENABLED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, then this buffer is populated by the Linux kernel before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The status code may be one (or more) of the following constants:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SPE_EVENT_DMA_ALIGNMENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A DMA alignment error occurred."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SPE_EVENT_INVALID_DMA"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An invalid MFC DMA command was attempted."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SPE_EVENT_SPE_DATA_STORAGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A DMA storage error occurred."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SPE_EVENT_SPE_ERROR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An illegal instruction was executed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "NULL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a valid value for the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " event"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, the events will not be reported to the calling process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the value of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_status"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "register."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On error, it returns "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 and sets"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to one of the error codes listed below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_status"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "register value is a bit mask of status codes and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "optionally a 14-bit code returned from the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stop-and-signal"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction on the SPU."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The bit masks for the status codes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x02"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SPU was stopped by a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stop-and-signal"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x04"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SPU was stopped by a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " halt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x08"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SPU is waiting for a channel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x10"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SPU is in single-step mode."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x20"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SPU has tried to execute an invalid instruction."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x40"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SPU has tried to access an invalid channel."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0x3fff0000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The bits masked with this value contain the code returned from a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stop-and-signal"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instruction."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These bits are valid only if the 0x02 bit is set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has not returned an error, one or more bits among the lower eight"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ones are always set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBADF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not a valid file descriptor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " npc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not a valid pointer, or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " event"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is non-NULL and an invalid pointer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINTR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A signal occurred while"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was in progress; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " signal (7)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " npc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value has been updated to the new program counter value if"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "necessary."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not a valid file descriptor returned from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_create (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There was not enough memory available to handle a page fault"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resulting from a Memory Flow Controller (MFC) direct memory access."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOSYS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The functionality is not provided by the current system, because"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "either the hardware does not provide SPUs or the spufs module is not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "loaded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call was added to Linux in kernel 2.6.16."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This call is Linux-specific and implemented only by the PowerPC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "architecture."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Programs using this system call are not portable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Glibc does not provide a wrapper for this system call; call it using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " syscall (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note however, that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is meant to be used from libraries that implement a more abstract"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interface to SPUs, not to be used from regular applications."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".UR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " http://www.bsc.es"
        },
        {
          "type": "ESCAPE",
          "content": "\\:"
        },
        {
          "type": "TEXT",
          "content": "/projects"
        },
        {
          "type": "ESCAPE",
          "content": "\\:"
        },
        {
          "type": "TEXT",
          "content": "/deepcomputing"
        },
        {
          "type": "ESCAPE",
          "content": "\\:"
        },
        {
          "type": "TEXT",
          "content": "/linuxoncell/"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".UE",
          "translatable": false
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the recommended libraries."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following is an example of running a simple, one-instruction SPU"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_run ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdint.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/types.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <fcntl.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define handle_error(msg) "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    do { perror(msg); exit(EXIT_FAILURE); } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int main(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int context, fd, spu_status;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    uint32_t instruction, npc;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    context = spu_create(\"/spu/example"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "context\", 0, 0755);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (context == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error(\"spu_create\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* write a "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "stop 0x1234"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " instruction to the SPU"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * local store memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    instruction = 0x00001234;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    fd = open(\"/spu/example"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "context/mem\", O_RDWR);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (fd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error(\"open\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    write(fd, &instruction, sizeof(instruction));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* set npc to the starting instruction address of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * SPU program. Since we wrote the instruction at the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * start of the mem file, the entry point will be 0x0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    npc = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    spu_status = spu_run(context, &npc, NULL);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (spu_status == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error(\"open\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* we should see a status code of 0x1234002:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     *   0x00000002 (spu was stopped due to stop"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "and"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "signal)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * | 0x12340000 (the stop"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "and"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "signal code)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"SPU Status: 0x%08x"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", spu_status);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH AUTHORS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Arnd Bergmann <arndb@de.ibm.com>, Jeremy Kerr <jk@ozlabs.org>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " close (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spu_create (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " spufs (7)"
        }
      ]
    ]
  }
]
