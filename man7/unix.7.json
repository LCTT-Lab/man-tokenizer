[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (C) 2008-2014, Michael Kerrisk <mtk.manpages@gmail.com>,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (C) 2016, Heinrich Schuchardt <xypron.glpk@gmx.de>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM_ONE_PARA)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to distribute possibly modified copies"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of this page provided the header is included verbatim,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and in case of nontrivial modification author and date"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of the modification is added to the header."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified, 2003-12-02, Michael Kerrisk, <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified, 2003-09-23, Adam Langley"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified, 2004-05-27, Michael Kerrisk, <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded SOCK_SEQPACKET"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-05-27, mtk, Provide a clear description of the three types of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     address that can appear in the sockaddr_un structure: pathname,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     unnamed, and abstract."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " UNIX  7 2018-04-30 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "unix "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " sockets for local interprocess communication"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/socket.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".br",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/un.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix_socket \" = socket(AF_UNIX, type, 0);\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".br",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " error \" = socketpair(AF_UNIX, type, 0, int *\" sv \");\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(also known as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_LOCAL )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket family is used to communicate between processes on the same machine"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "efficiently."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Traditionally, UNIX domain sockets can be either unnamed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or bound to a filesystem pathname (marked as being of type socket)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux also supports an abstract namespace which is independent of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "filesystem."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Valid socket types in the UNIX domain are:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for a stream-oriented socket;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for a datagram-oriented socket that preserves message boundaries"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(as on most UNIX implementations, UNIX domain datagram"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets are always reliable and don't reorder datagrams);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and (since Linux 2.6.4)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_SEQPACKET ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for a sequenced-packet socket that is connection-oriented,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "preserves message boundaries,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and delivers messages in the order that they were sent."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "UNIX domain sockets support passing file descriptors or process credentials"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to other processes using ancillary data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Address format"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A UNIX domain socket address is represented in the following structure:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" #define UNIX_PATH_MAX    108"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "struct sockaddr_un {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sa_family_t sun_family;               /* AF_UNIX */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char        sun_path[108];            /* Pathname */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field always contains"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On Linux,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 108 bytes in size; see also NOTES, below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Various systems calls (for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendto (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "take a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sockaddr_un"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument as input."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Some other system calls (for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockname (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpeername (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvfrom (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return an argument of this type."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Three types of address are distinguished in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sockaddr_un"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pathname :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a UNIX domain socket can be bound to a null-terminated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "filesystem pathname using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the address of a pathname socket is returned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(by one of the system calls noted above),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its length is"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    offsetof(struct sockaddr_un, sun_path) + strlen(sun_path) + 1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the null-terminated pathname."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(On Linux, the above"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " offsetof ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "expression equates to the same value as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sizeof(sa_family_t) ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but some other implementations include other fields before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " offsetof ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "expression more portably describes the size of the address structure.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For further details of pathname sockets, see below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unnamed :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A stream socket that has not been bound to a pathname using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has no name."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Likewise, the two sockets created by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socketpair (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are unnamed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the address of an unnamed socket is returned,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its length is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sizeof(sa_family_t)\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should not be inspected."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" There is quite some variation across implementations: FreeBSD"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" says the length is 16 bytes, HP-UX 11 says it's zero bytes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abstract :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "an abstract socket address is distinguished (from a pathname socket)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by the fact that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path[0]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a null byte ("
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "0"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ")."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The socket's address in this namespace is given by the additional"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that are covered by the specified length of the address structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Null bytes in the name have no special significance.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The name has no connection with filesystem pathnames."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the address of an abstract socket is returned,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the returned"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is greater than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sizeof(sa_family_t)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., greater than 2), and the name of the socket is contained in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the first"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"(addrlen "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " sizeof(sa_family_t))\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Pathname sockets"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When binding a socket to a pathname, a few rules should be observed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for maximum portability and ease of coding:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The pathname in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should be null-terminated."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The length of the pathname, including the terminating null byte,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should not exceed the size of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument that describes the enclosing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sockaddr_un"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure should have a value of at least:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    offsetof(struct sockaddr_un, sun_path)+strlen(addr.sun_path)+1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "or, more simply,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be specified as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sizeof(struct sockaddr_un)\" ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There is some variation in how implementations handle UNIX domain"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket addresses that do not follow the above rules."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, some (but not all) implementations"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Linux does this, including for the case where the supplied path"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is 108 bytes"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "append a null terminator if none is present in the supplied"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When coding portable applications,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "keep in mind that some implementations"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" HP-UX"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "have"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as short as 92 bytes."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modern BSDs generally have 104, Tru64 and AIX have 104,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Solaris and Irix have 108"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Various system calls"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( accept (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvfrom (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockname (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpeername (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return socket address structures."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When applied to UNIX domain sockets, the value-result"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument supplied to the call should be initialized as above."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Upon return, the argument is set to indicate the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " actual"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "size of the address structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The caller should check the value returned in this argument:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the output value exceeds the input value,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then there is no guarantee that a null terminator is present in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(See BUGS.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Pathname socket ownership and permissions"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the Linux implementation,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pathname sockets honor the permissions of the directory they are in."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Creation of a new socket fails if the process does not have write and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "search (execute) permission on the directory in which the socket is created."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On Linux,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "connecting to a stream socket object requires write permission on that socket;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sending a datagram to a datagram socket likewise"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requires write permission on that socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "POSIX does not make any statement about the effect of the permissions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on a socket file, and on some systems (e.g., older BSDs),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the socket permissions are ignored."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Portable programs should not rely on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this feature for security."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When creating a new socket, the owner and group of the socket file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are set according to the usual rules."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The socket file has all permissions enabled,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "other than those that are turned off by the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " umask (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The owner, group, and permissions of a pathname socket can be changed (using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chown (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " chmod (2))."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, fchown() and fchmod() do not seem to have an effect"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Abstract sockets"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Socket permissions have no meaning for abstract sockets:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " umask (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has no effect when binding an abstract socket,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and changing the ownership and permissions of the object (via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fchown (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fchmod (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has no effect on the accessibility of the socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Abstract sockets automatically disappear when all open references"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the socket are closed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The abstract socket namespace is a nonportable Linux extension."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Socket options"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For historical reasons, these socket options are specified with a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOL_SOCKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "type even though they are"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specific."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "They can be set with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and read with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOL_SOCKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as the socket family."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enables the receiving of the credentials of the sending process in an"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ancillary message."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When this option is set and the socket is not yet connected"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a unique name in the abstract namespace will be generated automatically."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Expects an integer boolean flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSSEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enables receiving of the SELinux security label of the peer socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in an ancillary message of type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_SECURITY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see below)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Expects an integer boolean flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Supported for UNIX domain datagram sockets"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 877ce7c1b3afd69a9b1caeb1b9964c992641f52a"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "since Linux 2.6.18;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "support for UNIX domain stream sockets was added"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 37a9a8df8ce9de6ea73349c9ac8bdf6ba4ec4f70"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "in Linux 4.2."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PEEK_OFF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PEERCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return the credentials of the peer process connected to this socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is possible only for connected"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "stream sockets and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "stream and datagram socket pairs created using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socketpair (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The returned credentials are those that were in effect at the time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socketpair (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The argument is a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ucred"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure; define the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "feature test macro to obtain the definition of that structure from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <sys/socket.h> ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This socket option is read-only."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Autobind feature"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call specifies"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sizeof(sa_family_t) ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" i.e., sizeof(short)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "or the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket option was specified for a socket that was"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not explicitly bound to an address,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the socket is autobound to an abstract address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The address consists of a null byte"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "followed by 5 bytes in the character set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " [0"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "9a"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "f] ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, there is a limit of 2^20 autobind addresses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(From Linux 2.1.15, when the autobind feature was added,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "8 bytes were used, and the limit was thus 2^32 autobind addresses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The change to 5 bytes came in Linux 2.3.15.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Sockets API"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following paragraphs describe domain-specific details and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unsupported features of the sockets API for UNIX domain sockets on Linux."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "UNIX domain sockets do not support the transmission of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "out-of-band data (the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_OOB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_MORE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is not supported by UNIX domain sockets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Before Linux 3.4,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 9f6f9af7694ede6314bed281eec74d588ba9474f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_TRUNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not supported by UNIX domain sockets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket option does have an effect for UNIX domain sockets, but the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option does not."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For datagram sockets, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value imposes an upper limit on the size of outgoing datagrams."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This limit is calculated as the doubled (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (7))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option value less 32 bytes used for overhead."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Ancillary messages"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Ancillary data is sent and received using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For historical reasons, the ancillary message types listed below"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are specified with a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOL_SOCKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "type even though they are"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specific."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To send them, set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg_level"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of the struct"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsghdr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOL_SOCKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field to the type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For more information, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_RIGHTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Send or receive a set of open file descriptors from another process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The data portion contains an integer array of the file descriptors."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Commonly, this operation is referred to as \"passing a file descriptor\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to another process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, more accurately,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "what is being passed is a reference to an open file description (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and in the receiving process it is likely that a different"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor number will be used."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Semantically, this operation is equivalent to duplicating"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( dup (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a file descriptor into the file descriptor table of another process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the buffer used to receive the ancillary data containing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptors is too small (or is absent),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the ancillary data is truncated (or discarded)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the excess file descriptors are automatically closed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the receiving process."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The kernel constant"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_MAX_FD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "defines a limit on the number of file descriptors in the array."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Attempting to send an array larger than this limit causes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_MAX_FD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has the value 253"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or 255 in kernels"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit bba14de98753cb6599a2dae0e520714b2153522d"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "before 2.6.38)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_CREDENTIALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Send or receive UNIX credentials."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used for authentication."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The credentials are passed as a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct ucred"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ancillary message."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus structure is defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct ucred {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pid_t pid;    /* Process ID of the sending process */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    uid_t uid;    /* User ID of the sending process */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    gid_t gid;    /* Group ID of the sending process */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since glibc 2.8, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "feature test macro must be defined (before including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "header files) in order to obtain the definition"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of this structure."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The credentials which the sender specifies are checked by the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A privileged process is allowed to specify values that do not match its own."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The sender must specify its own process ID (unless it has the capability"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its real user ID, effective user ID, or saved set-user-ID (unless it has"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETUID ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and its real group ID, effective group ID, or saved set-group-ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(unless it has"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETGID )."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To receive a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct ucred"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "message, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option must be enabled on the socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_SECURITY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Receive the SELinux security context (the security label)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the peer socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The received ancillary data is a null-terminated string containing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the security context."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The receiver should allocate at least"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NAME_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes in the data portion of the ancillary message for this data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To receive the security context, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSSEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option must be enabled on the socket (see above)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When sending ancillary data with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only one item of each of the above types may be included in the sent message."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "At least one byte of real data should be sent when sending ancillary data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On Linux, this is required to successfully send ancillary data over"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a UNIX domain stream socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When sending ancillary data over a UNIX domain datagram socket,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is not necessary on Linux to send any accompanying real data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, portable applications should also include at least one byte"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of real data when sending ancillary data over a datagram socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When receiving from a stream socket,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ancillary data forms a kind of barrier for the received data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, suppose that the sender transmits as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1. 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of four bytes, with no ancillary data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of one byte, with ancillary data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 3."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of four bytes, with no ancillary data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Suppose that the receiver now performs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls each with a buffer size of 20 bytes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first call will receive five bytes of data,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "along with the ancillary data sent by the second"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The next call will receive the remaining five bytes of data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the space allocated for receiving incoming ancillary data is too small"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the ancillary data is truncated to the number of headers"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that will fit in the supplied buffer (or, in the case of an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_RIGHTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file descriptor list, the list of file descriptors may be truncated)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If no buffer is provided for incoming ancillary data (i.e., the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " msg_control"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " msghdr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure supplied to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the incoming ancillary data is discarded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In both of these cases, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_CTRUNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag will be set in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " msg.msg_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Ioctls"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls return information in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The correct syntax is:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " int \" value\";"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " error \" = ioctl(\" unix_socket \", \" ioctl_type \", &\" value \");\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCINQ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets, this call returns the number of unread bytes in the receive buffer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The socket must not be in LISTEN state, otherwise an error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( EINVAL )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is returned."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCINQ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <linux/sockios.h> ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12002,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" filed 2010-09-10, may cause SIOCINQ to be defined in glibc headers"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Alternatively,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "you can use the synonymous"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FIONREAD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <sys/ioctl.h> ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SIOCOUTQ also has an effect for UNIX domain sockets, but not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" quite what userland might expect. It seems to return the number"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of bytes allocated for buffers containing pending output."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" That number is normally larger than the number of bytes of pending"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" output. Since this info is, from userland's point of view, imprecise,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and it may well change, probably best not to document this now."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the returned value is the same as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for Internet domain datagram sockets;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " udp (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EADDRINUSE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The specified local address is already in use or the filesystem socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "object already exists."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EBADF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This error can occur for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when sending a file descriptor as ancillary data over"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a UNIX domain socket (see the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_RIGHTS ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "above), and indicates that the file descriptor number that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is being sent is not valid (e.g., it is not an open file descriptor)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ECONNREFUSED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The remote address specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not a listening socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This error can also occur if the target pathname is not a socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ECONNRESET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote socket was unexpectedly closed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EFAULT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "User memory address was not valid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Invalid argument passed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A common cause is that the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not specified in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of passed addresses, or the socket was in an"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "invalid state for the applied operation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EISCONN"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "called on an already connected socket or a target address was"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified on a connected socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The pathname in the remote address specified to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "did not exist."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Out of memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOTCONN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Socket operation needs a target address, but the socket is not connected."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EOPNOTSUPP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Stream operation called on non-stream oriented socket or tried to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use the out-of-band data option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The sender passed invalid credentials in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct ucred\" ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPIPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote socket was closed on a stream socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If enabled, a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGPIPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is sent as well."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be avoided by passing the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_NOSIGNAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPROTONOSUPPORT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Passed protocol is not"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPROTOTYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Remote socket does not match the local socket type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SOCK_DGRAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "versus"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM )."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ESOCKTNOSUPPORT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unknown socket type."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ETOOMANYREFS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This error can occur for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when sending a file descriptor as ancillary data over"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a UNIX domain socket (see the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_RIGHTS ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "above)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It occurs if the number of \"in-flight\" file descriptors exceeds the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RLIMIT_NOFILE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resource limit and the caller does not have the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_RESOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An in-flight file descriptor is one that has been sent using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but has not yet been accepted in the recipient process using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This error is diagnosed since mainline Linux 4.5"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(and in some earlier kernel versions where the fix has been backported)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 712f4aad406bb1ed67f3f98d04c044191f0ff593"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In earlier kernel versions,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it was possible to place an unlimited number of file descriptors in flight,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by sending each file descriptor with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and then closing the file descriptor so that it was not accounted against the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RLIMIT_NOFILE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resource limit."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Other errors can be generated by the generic socket layer or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by the filesystem while generating a filesystem socket object."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the appropriate manual pages for more information."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_CREDENTIALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the abstract namespace were introduced with Linux 2.2 and should not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be used in portable programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Some BSD-derived systems also support credential passing,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the implementation details differ.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Binding to a socket with a filename creates a socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the filesystem that must be deleted by the caller when it is no"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "longer needed (using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unlink (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The usual UNIX close-behind semantics apply; the socket can be unlinked"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at any time and will be finally removed from the filesystem when the last"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "reference to it is closed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To pass file descriptors or credentials over a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket, you must"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to send or receive at least one byte of nonancillary data in the same"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "UNIX domain stream sockets do not support the notion of out-of-band data."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When binding a socket to an address,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux is one of the implementations that appends a null terminator"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if none is supplied in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In most cases this is unproblematic:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when the socket address is retrieved,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it will be one byte longer than that supplied when the socket was bound."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, there is one case where confusing behavior can result:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if 108 non-null bytes are supplied when a socket is bound,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the addition of the null terminator takes the length of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the pathname beyond"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sizeof(sun_path) ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently, when retrieving the socket address"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(for example, via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2)),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The behavior on Solaris is quite similar."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "if the input"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument for the retrieving call is specified as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sizeof(struct sockaddr_un)\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the returned address structure"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " won't"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "have a null terminator in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In addition, some implementations"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" i.e., traditional BSD"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "don't require a null terminator when binding a socket (the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is used to determine the length of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and when the socket address is retrieved on these implementations,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there is no null terminator in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Applications that retrieve socket addresses can (portably) code"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to handle the possibility that there is no null terminator in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by respecting the fact that the number of valid bytes in the pathname is:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    strnlen(addr.sun_path, addrlen "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " offsetof(sockaddr_un, sun_path))"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following patch to amend kernel behavior was rejected:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://thread.gmane.org/gmane.linux.kernel.api/2437"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Subject: [patch] Fix handling of overlength pathname in AF_UNIX sun_path"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2012-04-17"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" And there was a related discussion in the Austin list:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://thread.gmane.org/gmane.comp.standards.posix.austin.general/5735"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Subject: Having a sun_path with no null terminator"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2012-04-18"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . Track http://austingroupbugs.net/view.php?id=561"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Alternatively, an application can retrieve"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the socket address by allocating a buffer of size"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sizeof(struct sockaddr_un)+1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that is zeroed out before the retrieval."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The retrieving call can specify"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"sizeof(struct sockaddr_un)\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the extra zero byte ensures that there will be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a null terminator for the string returned in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sun_path :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "void *addrp;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "addrlen = sizeof(struct sockaddr_un);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "addrp = malloc(addrlen + 1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if (addrp == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    /* Handle error */ ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "memset(addrp, 0, addrlen + 1);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "if (getsockname(sfd, (struct sockaddr *) addrp, &addrlen)) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    /* handle error */ ;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "printf(\"sun_path = %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", ((struct sockaddr_un *) addrp)"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">sun_path);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This sort of messiness can be avoided if it is guaranteed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that the applications that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " create"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pathname sockets follow the rules outlined above under"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"Pathname sockets\" ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following code demonstrates the use of sequenced-packet"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets for local interprocess communication."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It consists of two programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The server program waits for a connection from the client program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The client sends each of its command-line arguments in separate messages."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The server treats the incoming messages as integers and adds them up."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The client sends the command string \"END\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The server sends back a message containing the sum of the client's integers."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The client prints the sum and exits."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The server waits for the next client to connect."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To stop the server, the client is called with the command-line argument \"DOWN\"."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following output was recorded while running the server in the background"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and repeatedly executing the client."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Execution of the server program ends when it receives the \"DOWN\" command."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Example output"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./server &"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[1] 25887"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./client 3 4"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Result = 7"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./client 11 "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "5"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Result = 6"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./client DOWN"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Result = 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[1]+  Done                    ./server"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * File connection.h"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define SOCKET_NAME \"/tmp/9Lq7BNBnBycd6nxy.socket\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define BUFFER_SIZE 12"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * File server.c"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/un.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include \"connection.h\""
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr_un name;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int down_flag = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int ret;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int connection_socket;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int data_socket;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int result;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char buffer[BUFFER_SIZE];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * In case the program exited inadvertently on the last run,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * remove the socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    unlink(SOCKET_NAME);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Create local socket. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    connection_socket = socket(AF_UNIX, SOCK_SEQPACKET, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (connection_socket == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"socket\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * For portability clear the whole structure, since some"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * implementations have additional (nonstandard) fields in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * the structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&name, 0, sizeof(struct sockaddr_un));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Bind socket to socket name. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    name.sun_family = AF_UNIX;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    strncpy(name.sun_path, SOCKET_NAME, sizeof(name.sun_path) "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = bind(connection_socket, (const struct sockaddr *) &name,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               sizeof(struct sockaddr_un));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"bind\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * Prepare for accepting connections. The backlog size is set"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * to 20. So while one request is being processed other requests"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * can be waiting."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = listen(connection_socket, 20);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"listen\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* This is the main loop for handling connections. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (;;) {"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* Wait for incoming connection. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        data_socket = accept(connection_socket, NULL, NULL);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (data_socket == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"accept\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        result = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        for (;;) {"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            /* Wait for next data packet. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            ret = read(data_socket, buffer, BUFFER_SIZE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                perror(\"read\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            /* Ensure buffer is 0"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "terminated. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            buffer[BUFFER_SIZE "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1] = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            /* Handle commands. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            if (!strncmp(buffer, \"DOWN\", BUFFER_SIZE)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                down_flag = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            if (!strncmp(buffer, \"END\", BUFFER_SIZE)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            /* Add received summand. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            result += atoi(buffer);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* Send result. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        sprintf(buffer, \"%d\", result);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ret = write(data_socket, buffer, BUFFER_SIZE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"write\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* Close socket. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        close(data_socket);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* Quit on DOWN command. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (down_flag) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(connection_socket);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Unlink the socket. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    unlink(SOCKET_NAME);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " * File client.c"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": " */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#include <errno.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/un.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include \"connection.h\""
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr_un addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int i;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int ret;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int data_socket;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char buffer[BUFFER_SIZE];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Create local socket. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    data_socket = socket(AF_UNIX, SOCK_SEQPACKET, 0);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (data_socket == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"socket\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * For portability clear the whole structure, since some"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * implementations have additional (nonstandard) fields in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     * the structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&addr, 0, sizeof(struct sockaddr_un));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Connect socket to socket address */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    addr.sun_family = AF_UNIX;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    strncpy(addr.sun_path, SOCKET_NAME, sizeof(addr.sun_path) "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = connect (data_socket, (const struct sockaddr *) &addr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   sizeof(struct sockaddr_un));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"The server is down."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Send arguments. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (i = 1; i < argc; ++i) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ret = write(data_socket, argv[i], strlen(argv[i]) + 1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"write\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Request result. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    strcpy (buffer, \"END\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ret = write(data_socket, buffer, strlen(buffer) + 1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"write\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Receive result. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = read(data_socket, buffer, BUFFER_SIZE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"read\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Ensure buffer is 0"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "terminated. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    buffer[BUFFER_SIZE "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1] = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Result = %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", buffer);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Close socket. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(data_socket);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an example of the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_RIGHTS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socketpair (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " credentials (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " udp (7)"
        }
      ]
    ]
  }
]
