[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": "'\\\" t"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and copyright (c) 1999 Matthew Wilcox."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM_ONE_PARA)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to distribute possibly modified copies"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of this page provided the header is included verbatim,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and in case of nontrivial modification author and date"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of the modification is added to the header."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2002-10-30, Michael Kerrisk, <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAdded description of SO_ACCEPTCONN"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2004-05-20, aeb, added SO_RCVTIMEO/SO_SNDTIMEO text."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Added notes on capability requirements"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tA few small grammar fixes"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2010-06-13 Jan Engelhardt <jengelh@medozas.de>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tDocumented SO_DOMAIN and SO_PROTOCOL."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following are not yet documented:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_PEERNAME (2.4?)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tget only"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tSeems to do something similar to getpeername(), but then"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\twhy is it necessary / how does it differ?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_TIMESTAMPNS (2.6.22)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tDocumentation/networking/timestamping.txt"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit 92f37fd2ee805aa77925c1e64fd56088b46094fc"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Eric Dumazet <dada1@cosmosbay.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_TIMESTAMPING (2.6.30)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tDocumentation/networking/timestamping.txt"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit cb9eff097831007afb30d64373f29d99825d0068"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Patrick Ohly <patrick.ohly@intel.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"  SO_WIFI_STATUS (3.3)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit 6e3e939f3b1bf8534b32ad09ff199d88800835a0"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Johannes Berg <johannes.berg@intel.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAlso: SCM_WIFI_STATUS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_NOFCS (3.4)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit 3bdc0eba0b8b47797f4a76e377dd8360f317450f"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Ben Greear <greearb@candelatech.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"  SO_GET_FILTER (3.8)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit a8fc92778080c845eaadc369a0ecf5699a03bef0"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Pavel Emelyanov <xemul@parallels.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_SELECT_ERR_QUEUE (3.10)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit 7d4c04fc170087119727119074e72445f2bb192b"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Keller, Jacob E <jacob.e.keller@intel.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_MAX_PACING_RATE (3.13)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit 62748f32d501f5d3712a7c372bbb92abc7c62bc7"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Eric Dumazet <edumazet@google.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_BPF_EXTENSIONS (3.14)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit ea02f9411d9faa3553ed09ce0ec9f00ceae9885e"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tAuthor: Michal Sekletar <msekleta@redhat.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCKET 7 2018-02-02 Linux \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "socket "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " Linux socket interface"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/socket.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sockfd \" = socket(int \" socket_family \", int \" socket_type \", int \" protocol );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This manual page describes the Linux networking socket layer user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interface."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The BSD compatible sockets"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are the uniform interface"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "between the user process and the network protocol stacks in the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The protocol modules are grouped into"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " protocol families"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET \", \" AF_IPX \", and \" AF_PACKET ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket types"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for more information on families and types."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Socket-layer functions"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These functions are used by the user process to send or receive packets"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and to do other socket operations."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For more information see their respective manual pages."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "creates a socket,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "connects a socket to a remote socket address,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function binds a socket to a local socket address,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listen (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tells the socket that new connections shall be accepted, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used to get a new socket with a new incoming connection."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socketpair (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns two connected anonymous sockets (implemented only for a few"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "local families like"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNIX )"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendto (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "send data over a socket, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvfrom (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "receive data from a socket."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wait for arriving data or a readiness to send data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition, the standard I/O operations like"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " write (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " writev (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendfile (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " readv (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used to read and write data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockname (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the local socket address and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpeername (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the remote socket address."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are used to set or get socket layer or protocol options."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used to set or read some other options."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " close (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used to close a socket."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " shutdown (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "closes parts of a full-duplex socket connection."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Seeking, or calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pread (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pwrite (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a nonzero position is not supported on sockets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "It is possible to do nonblocking I/O on sockets by setting the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_NONBLOCK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag on a socket file descriptor using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Then all operations that would block will (usually)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(operation should be retried later);"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will return"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINPROGRESS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "error."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The user can then wait for various events via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "tab(:) allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "c s s"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "I/O events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Event:Poll flag:Occurrence"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read:POLLIN:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New data arrived."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read:POLLIN:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A connection setup has been completed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(for connection-oriented sockets)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read:POLLHUP:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A disconnection request has been initiated by the other end."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read:POLLHUP:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A connection is broken (only for connection-oriented protocols)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the socket is written"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGPIPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is also sent."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Write:POLLOUT:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Socket has enough send buffer space for writing new data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read/Write:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "POLLIN |"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".br",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POLLOUT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An outgoing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "finished."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read/Write:POLLERR:An asynchronous error occurred."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Read/Write:POLLHUP:The other end has shut down one direction."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Exception:POLLPRI:T{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Urgent data arrived."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is sent then."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . The following is not true currently:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" It is no I/O event when the connection"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is broken from the local end using"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR shutdown (2)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR close (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "An alternative to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is to let the kernel inform the application about events"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "via a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For that the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_ASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag must be set on a socket file descriptor via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and a valid signal handler for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be installed via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaction (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Signals"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "discussion below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Socket address structures"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each socket domain has its own format for socket addresses,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a domain-specific address structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each of these structures begins with an"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "integer \"family\" field (typed as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sa_family_t )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that indicates the type of the address structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This allows"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the various system calls (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockname (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getpeername (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which are generic to all socket domains,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to determine the domain of a particular socket address."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To allow any type of socket address to be passed to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interfaces in the sockets API,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct sockaddr\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is defined."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The purpose of this type is purely to allow casting of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "domain-specific socket address types to a \"generic\" type,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so as to avoid compiler warnings about type mismatches in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls to the sockets API."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In addition, the sockets API provides the data type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct sockaddr_storage\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is suitable to accommodate all supported domain-specific socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "address structures; it is large enough and is aligned properly."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(In particular, it is large enough to hold"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IPv6 socket addresses.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The structure includes the following field, which can be used to identify"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the type of socket address actually stored in the structure:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sa_family_t ss_family;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sockaddr_storage"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure is useful in programs that must handle socket addresses"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a generic way"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(e.g., programs that must deal with both IPv4 and IPv6 socket addresses)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Socket options"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The socket options listed below can be set by using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and read with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the socket level set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOL_SOCKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for all sockets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unless otherwise noted,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " optval"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a pointer to an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " int ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In the list below, the text used to describe argument types"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" for each socket option should be more consistent"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_ACCEPTCONN is in POSIX.1-2001, and its origin is explained in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" W R Stevens, UNPv1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ACCEPTCONN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Returns a value indicating whether or not this socket has been marked"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to accept connections with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listen (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value 0 indicates that this is not a listening socket,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the value 1 indicates that this is a listening socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This socket option is read-only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_FILTER \" (since Linux 2.2), \" SO_ATTACH_BPF \" (since Linux 3.19)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Attach a classic BPF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SO_ATTACH_FILTER )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or an extended BPF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SO_ATTACH_BPF )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program to the socket for use as a filter of incoming packets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A packet will be dropped if the filter program returns zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the filter program returns a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "nonzero value which is less than the packet's data length,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the packet will be truncated to the length returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the value returned by the filter is greater than or equal to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "packet's data length, the packet is allowed to proceed unmodified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sock_fprog"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure, defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <linux/filter.h> :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct sock_fprog {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    unsigned short      len;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sock_filter *filter;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The argument for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_BPF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a file descriptor returned by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call and must refer to a program of type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BPF_PROG_TYPE_SOCKET_FILTER."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These options may be set multiple times for a given socket,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "each time replacing the previous filter program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The classic and extended versions may be called on the same socket,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the previous filter will always be replaced such that a socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "never has more than one filter defined."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Both classic and extended BPF are explained in the kernel source file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Documentation/networking/filter.txt"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_REUSEPORT_CBPF \", \" SO_ATTACH_REUSEPORT_EBPF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For use with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEPORT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option, these options allow the user to set a classic BPF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SO_ATTACH_REUSEPORT_CBPF )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or an extended BPF"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SO_ATTACH_REUSEPORT_EBPF )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program which defines how packets are assigned to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the sockets in the reuseport group (that is, all sockets which have"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEPORT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set and are using the same local address to receive packets)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The BPF program must return an index between 0 and N"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 representing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the socket which should receive the packet"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(where N is the number of sockets in the group)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the BPF program returns an invalid index,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket selection will fall back to the plain"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEPORT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mechanism."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Sockets are numbered in the order in which they are added to the group"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(that is, the order of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls for UDP sockets or the order of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listen (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls for TCP sockets)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New sockets added to a reuseport group will inherit the BPF program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a socket is removed from a reuseport group (via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " close (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the last socket in the group will be moved into the closed socket's"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "position."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These options may be set repeatedly at any time on any socket in the group"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to replace the current BPF program used by all sockets in the group."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_REUSEPORT_CBPF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "takes the same argument type as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_REUSEPORT_EBPF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "takes the same argument type as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_BPF."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "UDP support for this feature is available since Linux 4.5;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TCP support is available since Linux 4.6."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_BINDTODEVICE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bind this socket to a particular device like "
        },
        {
          "type": "ESCAPE",
          "content": "\\(lq"
        },
        {
          "type": "TEXT",
          "content": "eth0"
        },
        {
          "type": "ESCAPE",
          "content": "\\(rq"
        },
        {
          "type": "TEXT",
          "content": ","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as specified in the passed interface name."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "name is an empty string or the option length is zero, the socket device"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "binding is removed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The passed option is a variable-length null-terminated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interface name string with the maximum size of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IFNAMSIZ ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a socket is bound to an interface,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only packets received from that particular interface are processed by the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that this works only for some socket types, particularly"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is not supported for packet sockets (use normal"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Before Linux 3.8,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this socket option could be set, but could not retrieved with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since Linux 3.8, it is readable."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " optlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument should contain the buffer size available"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to receive the device name and is recommended to be"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IFNAMSIZ"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The real device name length is reported back in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " optlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_BROADCAST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set or get the broadcast flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When enabled, datagram sockets are allowed to send"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "packets to a broadcast address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This option has no effect on stream-oriented sockets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_BSDCOMPAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enable BSD bug-to-bug compatibility."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is used by the UDP protocol module in Linux 2.0 and 2.2."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If enabled, ICMP errors received for a UDP socket will not be passed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the user program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In later kernel versions, support for this option has been phased out:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 2.4 silently ignores it, and Linux 2.6 generates a kernel warning"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(printk()) if a program uses this option."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 2.0 also enabled BSD bug-to-bug compatibility"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "options (random header changing, skipping of the broadcast flag) for raw"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets with this option, but that was removed in Linux 2.2."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_DEBUG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enable socket debugging."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Allowed only for processes with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_NET_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability or an effective user ID of 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_DETACH_FILTER \" (since Linux 2.2), \" SO_DETACH_BPF \" (since Linux 3.19)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These two options, which are synonyms,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may be used to remove the classic or extended BPF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program attached to a socket with either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_BPF ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The option value is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_DOMAIN \" (since Linux 2.6.32)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Retrieves the socket domain as an integer, returning a value such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET6 ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This socket option is read-only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ERROR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Get and clear the pending socket error."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This socket option is read-only."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Expects an integer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_DONTROUTE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Don't send via a gateway, send only to directly connected hosts."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The same effect can be achieved by setting the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_DONTROUTE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag on a socket"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Expects an integer boolean flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_INCOMING_CPU \" (gettable since Linux 3.19, settable since Linux 4.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" getsockopt 2c8c56e15df3d4c2af3d656e44feb18789f75837"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" setsockopt 70da268b569d32a9fddeea85dc18043de9d89f89"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Sets or gets the CPU affinity of a socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Expects an integer flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int cpu = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setsockopt(fd, SOL_SOCKET, SO_INCOMING_CPU, &cpu, sizeof(cpu));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Because all of the packets for a single stream"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., all packets for the same 4-tuple)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arrive on the single RX queue that is associated with a particular CPU,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the typical use case is to employ one listening process per RX queue,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the incoming flow being handled by a listener"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the same CPU that is handling the RX queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This provides optimal NUMA behavior and keeps CPU caches hot."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" From an email conversation with Eric Dumazet:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" >> Note that setting the option is not supported if SO_REUSEPORT is used."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" >"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" > Please define \"not supported\". Does this yield an API diagnostic?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" > If so, what is it?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" >"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" >> Socket will be selected from an array, either by a hash or BPF program"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" >> that has no access to this information."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" >"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" > Sorry -- I'm lost here. How does this comment relate to the proposed"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" > man page text above?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Simply that :"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If an application uses both SO_INCOMING_CPU and SO_REUSEPORT, then"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_REUSEPORT logic, selecting the socket to receive the packet, ignores"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SO_INCOMING_CPU setting."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_KEEPALIVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enable sending of keep-alive messages on connection-oriented sockets."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Expects an integer boolean flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_LINGER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sets or gets the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_LINGER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The argument is a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " linger"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct linger {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int l_onoff;    /* linger active */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int l_linger;   /* how many seconds to linger for */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When enabled, a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " close (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " shutdown (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will not return until all queued messages for the socket have been"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "successfully sent or the linger timeout has been reached."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the call returns immediately and the closing is done in the background."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the socket is closed as part of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exit (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it always lingers in the background."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_LOCK_FILTER"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit d59577b6ffd313d0ab3be39cb1ab47e29bdc9182"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When set, this option will prevent"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "changing the filters associated with the socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These filters include any set using the socket options"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_FILTER,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_BPF,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_REUSEPORT_CBPF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_ATTACH_REUSEPORT_EPBF ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The typical use case is for a privileged process to set up a raw socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(an operation that requires the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_NET_RAW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability), apply a restrictive filter, set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_LOCK_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and then either drop its privileges or pass the socket file descriptor"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to an unprivileged process via a UNIX domain socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_LOCK_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option has been enabled, attempts to change or remove the filter"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attached to a socket, or to disable the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_LOCK_FILTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option will fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_MARK \" (since Linux 2.6.25)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 4a19ec5800fc3bb64e2d87c4d9fdd9e636086fe0"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and    914a9ab386a288d0f22252fc268ecbc048cdcbd5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Set the mark for each packet sent through this socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(similar to the netfilter MARK target but socket-based)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Changing the mark can be used for mark-based"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "routing without netfilter or for packet filtering."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting this option requires the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_NET_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_OOBINLINE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this option is enabled,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "out-of-band data is directly placed into the receive data stream."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise, out-of-band data is passed only when the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_OOB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is set during receiving."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" don't document it because it can do too much harm."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\".B SO_NO_CHECK"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     The kernel has support for the SO_NO_CHECK socket"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     option (boolean: 0 == default, calculate checksum on xmit,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     1 == do not calculate checksum on xmit)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Additional note from Andi Kleen on SO_NO_CHECK (2010-08-30)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     On Linux UDP checksums are essentially free and there's no reason"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     to turn them off and it would disable another safety line."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     That is why I didn't document the option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enable or disable the receiving of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_CREDENTIALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "control message."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For more information see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSSEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enable or disable the receiving of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_SECURITY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "control message."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For more information see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PEEK_OFF \" (since Linux 3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit ef64a54f6e558155b4f149bb10666b9e914b6c54"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This option, which is currently supported only for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets, sets the value of the \"peek offset\" for the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call when used with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_PEEK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When this option is set to a negative value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(it is set to "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 for all new sockets),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "traditional behavior is provided:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_PEEK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag will peek data from the front of the queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When the option is set to a value greater than or equal to zero,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the next peek at data queued in the socket will occur at"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the byte offset specified by the option value."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "At the same time, the \"peek offset\" will be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "incremented by the number of bytes that were peeked from the queue,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that a subsequent peek will return the next data in the queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If data is removed from the front of the queue via a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or similar) without the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_PEEK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, the \"peek offset\" will be decreased by the number of bytes removed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words, receiving data without the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_PEEK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag will cause the \"peek offset\" to be adjusted to maintain"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the correct relative position in the queued data,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that a subsequent peek will retrieve the data that would have been"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "retrieved had the data not been removed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For datagram sockets, if the \"peek offset\" points to the middle of a packet,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the data returned will be marked with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_TRUNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following example serves to illustrate the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PEEK_OFF ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Suppose a stream socket has the following queued input data:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    aabbccddeeff"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following sequence of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recv (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls would have the effect noted in the comments:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int ov = 4;                  // Set peek offset to 4"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setsockopt(fd, SOL_SOCKET, SO_PEEK_OFF, &ov, sizeof(ov));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "recv(fd, buf, 2, MSG_PEEK);  // Peeks \"cc\"; offset set to 6"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "recv(fd, buf, 2, MSG_PEEK);  // Peeks \"dd\"; offset set to 8"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "recv(fd, buf, 2, 0);         // Reads \"aa\"; offset set to 6"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "recv(fd, buf, 2, MSG_PEEK);  // Peeks \"ee\"; offset set to 8"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PEERCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return the credentials of the peer process connected to this socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For further details, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PRIORITY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set the protocol-defined priority for all packets to be sent on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux uses this value to order the networking queues:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "packets with a higher priority may be processed first depending"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the selected device queueing discipline."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" For"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR ip (7),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" this also sets the IP type-of-service (TOS) field for outgoing packets."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Setting a priority outside the range 0 to 6 requires the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_NET_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PROTOCOL \" (since Linux 2.6.32)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Retrieves the socket protocol as an integer, returning a value such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IPPROTO_SCTP ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This socket option is read-only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sets or gets the maximum socket receive buffer in bytes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The kernel doubles this value (to allow space for bookkeeping overhead)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when it is set using"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Most (all?) other implementations do not do this -- MTK, Dec 05"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setsockopt (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and this doubled value is returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following thread on LMKL is quite informative:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" getsockopt/setsockopt with SO_RCVBUF and SO_SNDBUF \"non-standard\" behavior"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 17 July 2012"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://thread.gmane.org/gmane.linux.kernel/1328935"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value is set by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/rmem_default"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file, and the maximum allowed value is set by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/rmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The minimum (doubled) value for this option is 256."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVBUFFORCE \" (since Linux 2.6.14)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Using this socket option, a privileged"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_NET_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process can perform the same task as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVBUF ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "limit can be overridden."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVLOWAT \" and \" SO_SNDLOWAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Specify the minimum number of bytes in the buffer until the socket layer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will pass the data to the protocol"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SO_SNDLOWAT )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the user on receiving"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SO_RCVLOWAT )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These two values are initialized to 1."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDLOWAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not changeable on Linux"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( setsockopt (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOPROTOOPT )."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVLOWAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is changeable"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only since Linux 2.4."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system calls currently do not respect the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVLOWAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setting on Linux,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and mark a socket readable when even a single byte of data is available."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A subsequent read from the socket will block until"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVLOWAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes are available."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=111049368106984&w=2"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Tested on kernel 2.6.14 -- mtk, 30 Nov 05"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVTIMEO \" and \" SO_SNDTIMEO"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Not implemented in 2.0."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Implemented in 2.1.11 for getsockopt: always return a zero struct."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Implemented in 2.3.41 for setsockopt, and actually used."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Specify the receiving or sending timeouts until reporting an error."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The argument is a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct timeval\" ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If an input or output function blocks for this period of time, and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data has been sent or received, the return value of that function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be the amount of data transferred; if no data has been transferred"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the timeout has been reached, then "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EWOULDBLOCK ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in fact to EAGAIN"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINPROGRESS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "just as if the socket was specified to be nonblocking."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the timeout is set to zero (the default),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the operation will never timeout."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Timeouts only have effect for system calls that perform socket I/O (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " read (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " send (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "timeouts have no effect for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " epoll_wait (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and so on."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEADDR"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tcommit c617f398edd4db2b8567a28e899a88f8f574798d"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\thttps://lwn.net/Articles/542629/"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Indicates that the rules used in validating addresses supplied in a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call should allow reuse of local addresses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "means that a socket may bind, except when there"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is an active listening socket bound to the address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the listening socket is bound to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " INADDR_ANY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a specific port then it is not possible"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to bind to this port for any local address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Argument is an integer boolean flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEPORT \" (since Linux 3.9)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Permits multiple"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET6"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sockets to be bound to an identical socket address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This option must be set on each socket (including the first socket)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "prior to calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To prevent port hijacking,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all of the processes binding to the same address must have the same"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "effective UID."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This option can be employed with both TCP and UDP sockets."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For TCP sockets, this option allows"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "load distribution in a multi-threaded server to be improved by"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using a distinct listener socket for each thread."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This provides improved load distribution as compared"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to traditional techniques such using a single"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2)ing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread that distributes connections,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or having multiple threads that compete to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the same socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For UDP sockets,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the use of this option can provide better distribution"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of incoming datagrams to multiple processes (or threads) as compared"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the traditional technique of having multiple processes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "compete to receive datagrams on the same socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RXQ_OVFL \" (since Linux 2.6.33)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 3b885787ea4112eaa80945999ea0901bf742707f"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Indicates that an unsigned 32-bit value ancillary message (cmsg)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should be attached to received skbs indicating"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the number of packets dropped by the socket since its creation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sets or gets the maximum socket send buffer in bytes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The kernel doubles this value (to allow space for bookkeeping overhead)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when it is set using"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Most (all?) other implementations do not do this -- MTK, Dec 05"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See also the comment to SO_RCVBUF (17 Jul 2012 LKML mail)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setsockopt (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and this doubled value is returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default value is set by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/wmem_default"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file and the maximum allowed value is set by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/wmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The minimum (doubled) value for this option is 2048."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDBUFFORCE \" (since Linux 2.6.14)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Using this socket option, a privileged"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_NET_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "process can perform the same task as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDBUF ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "limit can be overridden."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_TIMESTAMP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Enable or disable the receiving of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_TIMESTAMP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "control message."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The timestamp control message is sent with level"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOL_SOCKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg_data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct timeval\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicating the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "reception time of the last packet passed to the user in this call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cmsg (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details on control messages."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_TYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Gets the socket type as an integer (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This socket option is read-only."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_BUSY_POLL \" (since Linux 3.11)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Sets the approximate time in microseconds to busy poll on a blocking receive"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when there is no data."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Increasing this value requires"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_NET_ADMIN ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default for this option is controlled by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/busy_read"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The value in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/busy_poll"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file determines how long"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will busy poll when they operate on sockets with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_BUSY_POLL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set and no events to report are found."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In both cases,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "busy polling will only be done when the socket last received data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from a network device that supports this option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "While busy polling may improve latency of some applications,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "care must be taken when using it since this will increase"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "both CPU utilization and power usage."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Signals"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When writing onto a connection-oriented socket that has been shut down"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(by the local or the remote end)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGPIPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is sent to the writing process and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPIPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The signal is not sent when the write call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MSG_NOSIGNAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When requested with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FIOSETOWN"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCSPGRP"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is sent when an I/O event occurs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is possible to use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " poll (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " select (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the signal handler to find out which socket the event occurred on."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An alternative (in Linux 2.2) is to set a real-time signal using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the handler of the real time signal will be called with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file descriptor in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of its"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " siginfo_t ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for more information."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Under some circumstances (e.g., multiple processes accessing a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "single socket), the condition that caused the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may have already disappeared when the process reacts to the signal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this happens, the process should wait again because Linux"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will resend the signal later."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SS Ancillary messages"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " /proc interfaces"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The core socket networking parameters can be accessed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "via files in the directory"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/net/core/ ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rmem_default"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the default setting in bytes of the socket receive buffer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the maximum socket receive buffer size in bytes which a user may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set by using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wmem_default"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the default setting in bytes of the socket send buffer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the maximum socket send buffer size in bytes which a user may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set by using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDBUF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "socket option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " message_cost \" and \" message_burst"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "configure the token bucket filter used to load limit warning messages"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "caused by external network events."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " netdev_max_backlog"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Maximum number of packets in the global input queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " optmem_max"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Maximum length of ancillary data and user control data like the iovecs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "per socket."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" netdev_fastroute is not documented because it is experimental"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Ioctls"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These operations can be accessed using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " error \" = ioctl(\" ip_socket \", \" ioctl_type \", \" &value_result \");\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCGSTAMP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Return a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct timeval"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the receive timestamp of the last packet passed to the user."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is useful for accurate round trip time measurements."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setitimer (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for a description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct timeval\" ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This ioctl should be used only if the socket option"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_TIMESTAMP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not set on the socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise, it returns the timestamp of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "last packet that was received while"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_TIMESTAMP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not set, or it fails if no such packet has been received,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOENT )."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCSPGRP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Set the process or process group that is to receive"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals when I/O becomes possible or urgent data is available."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The argument is a pointer to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid_t ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For further details, see the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FIOASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Change the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_ASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag to enable or disable asynchronous I/O mode of the socket."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Asynchronous I/O mode means that the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signal or the signal set with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " F_SETSIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is raised when a new I/O event occurs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Argument is an integer boolean flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This operation is synonymous with the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_ASYNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag.)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCGPGRP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Get the current process or process group that receives"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGIO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGURG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "signals,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when none is set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Valid"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fcntl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operations:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FIOGETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The same as the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCGPGRP"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FIOSETOWN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The same as the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCSPGRP"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_BINDTODEVICE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was introduced in Linux 2.0.30."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_PASSCRED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is new in Linux 2.2."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interfaces were introduced in Linux 2.2."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_RCVTIMEO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_SNDTIMEO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are supported since Linux 2.3.41."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Earlier, timeouts were fixed to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a protocol-specific setting, and could not be read or written."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Linux assumes that half of the send/receive buffer is used for internal"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "kernel structures; thus the values in the corresponding"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "files are twice what can be observed on the wire."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Linux will allow port reuse only with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEADDR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when this option was set both in the previous program that performed a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the port and in the program that wants to reuse the port."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This differs from some implementations (e.g., FreeBSD)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where only the later program needs to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SO_REUSEADDR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Typically this difference is invisible, since, for example, a server"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program is designed to always set this option."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH AUTHORS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This man page was written by Andi Kleen."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " wireshark (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockopt (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setsockopt (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pcap (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " address_families (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ddp (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ip (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " packet (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tcp (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " udp (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tcpdump (8)"
        }
      ]
    ]
  }
]
