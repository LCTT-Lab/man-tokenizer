[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2014, Red Hat, Inc"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Written by Alexandre Oliva <aoliva@redhat.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(GPLv2+_DOC_FULL)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This is free documentation; you can redistribute it and/or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modify it under the terms of the GNU General Public License as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" published by the Free Software Foundation; either version 2 of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the License, or (at your option) any later version."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The GNU General Public License's references to \"object code\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and \"executables\" are to be interpreted as the output of any"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" document formatting or typesetting system, including"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" intermediate and printed output."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This manual is distributed in the hope that it will be useful,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but WITHOUT ANY WARRANTY; without even the implied warranty of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" GNU General Public License for more details."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" You should have received a copy of the GNU General Public"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" License along with this manual; if not, see"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" <http://www.gnu.org/licenses/>."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES 7 2015-03-02 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "attributes "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " POSIX safety concepts"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the text of this man page is based on the material taken from"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the \"POSIX Safety Concepts\" section of the GNU C Library manual."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Further details on the topics described here can be found in that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "manual."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Various function manual pages include a section ATTRIBUTES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that describes the safety of calling the function in various contexts."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This section annotates functions with the following safety markings:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MT-Safe"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MT-Safe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thread-Safe functions are safe to call in the presence"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of other threads."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "MT, in MT-Safe, stands for Multi Thread."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Being MT-Safe does not imply a function is atomic, nor that it uses any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the memory synchronization mechanisms POSIX exposes to users."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is even possible that calling MT-Safe functions in sequence"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not yield an MT-Safe combination."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, having a thread call two MT-Safe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions one right after the other does not guarantee behavior"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "equivalent to atomic execution of a combination of both functions,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since concurrent calls in other threads may interfere in a destructive way."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Whole-program optimizations that could inline functions across library"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interfaces may expose unsafe reordering, and so performing inlining"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "across the GNU C Library interface is not recommended."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The documented"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "MT-Safety status is not guaranteed under whole-program optimization."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, functions defined in user-visible headers are designed to be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "safe for inlining."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I AS-Safe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I AS-Safe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or Async-Signal-Safe functions are safe to call from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" asynchronous signal handlers."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" AS, in AS-Safe, stands for Asynchronous Signal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Many functions that are AS-Safe may set"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR errno ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or modify the floating-point environment,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" because their doing so does not make them"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" unsuitable for use in signal handlers."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, programs could misbehave should asynchronous signal handlers"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modify this thread-local state,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and the signal handling machinery cannot be counted on to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserve it."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Therefore, signal handlers that call functions that may set"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I errno"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or modify the floating-point environment"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I must"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" save their original values, and restore them before returning."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I AC-Safe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I AC-Safe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or Async-Cancel-Safe functions are safe to call when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" asynchronous cancellation is enabled."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" AC in AC-Safe stands for Asynchronous Cancellation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The POSIX standard defines only three functions to be AC-Safe, namely"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR pthread_cancel (3),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR pthread_setcancelstate (3),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR pthread_setcanceltype (3)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" At present the GNU C Library provides no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" guarantees beyond these three functions,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but does document which functions are presently AC-Safe."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This documentation is provided for use"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" by the GNU C Library developers."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Just like signal handlers, cancellation cleanup routines must configure"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the floating point environment they require."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The routines cannot assume a floating point environment,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" particularly when asynchronous cancellation is enabled."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If the configuration of the floating point"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" environment cannot be performed atomically then it is also possible that"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the environment encountered is internally inconsistent."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MT-Unsafe "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" \", \" AS-Unsafe \", \" AC-Unsafe"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MT-Unsafe "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" \", \" AS-Unsafe \", \" AC-Unsafe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions are not safe to call in a multithreaded programs."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" functions are not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" safe to call within the safety contexts described above."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Calling them"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" within such contexts invokes undefined behavior."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions not explicitly documented as safe in a safety context should"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" be regarded as Unsafe."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I Preliminary"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I Preliminary"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" safety properties are documented, indicating these"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" properties may"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" be counted on in future releases of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the GNU C Library."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Such preliminary properties are the result of an assessment of the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" properties of our current implementation,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" rather than of what is mandated and permitted"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" by current and future standards."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Although we strive to abide by the standards, in some cases our"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" implementation is safe even when the standard does not demand safety,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and in other cases our implementation does not meet the standard safety"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" requirements."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The latter are most likely bugs; the former, when marked"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR Preliminary ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" should not be counted on: future standards may"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" require changes that are not compatible with the additional safety"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" properties afforded by the current implementation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Furthermore,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the POSIX standard does not offer a detailed definition of safety."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We assume that, by \"safe to call\", POSIX means that,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as long as the program does not invoke undefined behavior,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the \"safe to call\" function behaves as specified,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and does not cause other functions to deviate from their specified behavior."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We have chosen to use its loose"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" definitions of safety, not because they are the best definitions to use,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but because choosing them harmonizes this manual with POSIX."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Please keep in mind that these are preliminary definitions and annotations,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and certain aspects of the definitions are still under"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" discussion and might be subject to clarification or change."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Over time,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" we envision evolving the preliminary safety notes into stable commitments,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as stable as those of our interfaces."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" As we do, we will remove the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I Preliminary"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" keyword from safety notes."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" As long as the keyword remains, however,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" they are not to be regarded as a promise of future behavior."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Other keywords that appear in safety notes are defined in subsequent sections."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SS Unsafe features"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions that are unsafe to call in certain contexts are annotated with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" keywords that document their features that make them unsafe to call."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" AS-Unsafe features in this section indicate the functions are never safe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to call when asynchronous signals are enabled."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" AC-Unsafe features"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" indicate they are never safe to call when asynchronous cancellation is"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" enabled."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" There are no MT-Unsafe marks in this section."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" .I code"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I lock"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AS-Unsafe feature may be"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" interrupted by a signal while holding a non-recursive lock."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If the signal handler calls another such function that takes the same lock,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the result is a deadlock."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions annotated with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I lock"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AC-Unsafe feature may, if canceled asynchronously,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" fail to release a lock that would have been released if their execution"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" had not been interrupted by asynchronous thread cancellation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Once a lock is left taken,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" attempts to take that lock will block indefinitely."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I corrupt"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" .I corrupt"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AS-Unsafe feature may corrupt"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" data structures and misbehave when they interrupt,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or are interrupted by, another such function."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Unlike functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR lock ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" these take recursive locks to avoid MT-Safety problems,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but this is not enough to stop a signal handler from observing"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" a partially-updated data structure."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Further corruption may arise from the interrupted function's"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" failure to notice updates made by signal handlers."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I corrupt"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AC-Unsafe feature may leave"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" data structures in a corrupt, partially updated state."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Subsequent uses of the data structure may misbehave."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" A special case, probably not worth documenting separately, involves"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" reallocing, or even freeing pointers.  Any case involving free could"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" be easily turned into an ac-safe leak by resetting the pointer before"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" releasing it; I don't think we have any case that calls for this sort"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" of fixing.  Fixing the realloc cases would require a new interface:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" instead of @code{ptr=realloc(ptr,size)} we'd have to introduce"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" @code{acsafe_realloc(&ptr,size)} that would modify ptr before"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" releasing the old memory.  The ac-unsafe realloc could be implemented"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" in terms of an internal interface with this semantics (say"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" __acsafe_realloc), but since realloc can be overridden, the function"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" we call to implement realloc should not be this internal interface,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" but another internal interface that calls __acsafe_realloc if realloc"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" was not overridden, and calls the overridden realloc with async"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" cancel disabled.  --lxoliva"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I heap"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I heap"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" may call heap memory management functions from the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR malloc (3)/ free (3)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" family of functions and are only as safe as those functions."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This note is thus equivalent to:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     | AS-Unsafe lock | AC-Unsafe lock fd mem |"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" @sampsafety{@asunsafe{@asulock{}}@acunsafe{@aculock{} @acsfd{} @acsmem{}}}"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" Check for cases that should have used plugin instead of or in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" addition to this.  Then, after rechecking gettext, adjust i18n if"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" needed."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I dlopen"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I dlopen"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" use the dynamic loader to load"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" shared libraries into the current execution image."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This involves opening files, mapping them into memory,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" allocating additional memory, resolving symbols,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" applying relocations and more,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" all of this while holding internal dynamic loader locks."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The locks are enough for these functions to be AS-Unsafe and AC-Unsafe,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but other issues may arise."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" At present this is a placeholder for all"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" potential safety issues raised by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR dlopen (3)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" dlopen runs init and fini sections of the module; does this mean"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" dlopen always implies plugin?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I plugin"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions annotated with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I plugin"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" may run code from plugins that"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" may be external to the GNU C Library."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Such plugin functions are assumed to be"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MT-Safe, AS-Unsafe and AC-Unsafe."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Examples of such plugins are stack unwinding libraries,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" name service switch (NSS) and character set conversion (iconv) back-ends."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Although the plugins mentioned as examples are all brought in by means"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of dlopen, the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I plugin"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" keyword does not imply any direct"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" involvement of the dynamic loader or the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I libdl"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" interfaces,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" those are covered by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR dlopen ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" For example, if one function loads a module and finds the addresses"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of some of its functions,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" while another just calls those already-resolved functions,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the former will be marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR dlopen ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" whereas the latter will get the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR plugin ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" When a single function takes all of these actions, then it gets both marks."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I i18n"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I i18n"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" may call internationalization"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" functions of the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR gettext (3)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" family and will be only as safe as those"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" functions."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This note is thus equivalent to:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     | MT-Safe env | AS-Unsafe corrupt heap dlopen | AC-Unsafe corrupt |"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" @sampsafety{@mtsafe{@mtsenv{}}@asunsafe{@asucorrupt{} @ascuheap{} @ascudlopen{}}@acunsafe{@acucorrupt{}}}"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I timer"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I timer"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" use the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR alarm (3)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" function or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" similar to set a time-out for a system call or a long-running operation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In a multi-threaded program, there is a risk that the time-out signal"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" will be delivered to a different thread,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" thus failing to interrupt the intended thread."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Besides being MT-Unsafe, such functions are always"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" AS-Unsafe, because calling them in signal handlers may interfere with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" timers set in the interrupted code, and AC-Unsafe,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" because there is no safe way to guarantee an earlier timer"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" will be reset in case of asynchronous cancellation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Conditionally safe features"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For some features that make functions unsafe to call in certain contexts,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "there are known ways to avoid the safety problem other than"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "refraining from calling the function altogether."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The keywords that follow refer to such features,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and each of their definitions indicates"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "how the whole program needs to be constrained in order to remove the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "safety problem indicated by the keyword."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Only when all the reasons that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "make a function unsafe are observed and addressed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by applying the documented constraints,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does the function become safe to call in a context."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " init"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " init"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Unsafe feature perform"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "MT-Unsafe initialization when they are first called."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Calling such a function at least once in single-threaded mode removes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this specific cause for the function to be regarded as MT-Unsafe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If no other cause for that remains,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the function can then be safely called after other threads are started."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I init"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AS-Unsafe or AC-Unsafe feature use the GNU C Library internal"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I libc_once"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" machinery or similar to initialize internal data structures."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If a signal handler interrupts such an initializer,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and calls any function that also performs"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I libc_once"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" initialization, it will deadlock if the thread library has been loaded."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Furthermore, if an initializer is partially complete before it is canceled"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or interrupted by a signal whose handler requires the same initialization,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" some or all of the initialization may be performed more than once,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" leaking resources or even resulting in corrupt internal data."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Applications that need to call functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I init"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AS-Safety or AC-Unsafe feature should ensure"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the initialization is performed"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" before configuring signal handlers or enabling cancellation,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" so that the AS-Safety and AC-Safety issues related with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I libc_once"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" do not arise."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" We may have to extend the annotations to cover conditions in which"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" initialization may or may not occur, since an initial call in a safe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" context is no use if the initialization doesn't take place at that"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" time: it doesn't remove the risk for later calls."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " race"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions annotated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " race"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue operate on"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "objects in ways that may cause data races or similar forms of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "destructive interference out of concurrent execution."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In some cases,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the objects are passed to the functions by users;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in others, they are used by the functions to return values to users;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in others, they are not even exposed to users."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We consider access to objects passed as (indirect) arguments to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" functions to be data race free."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The assurance of data race free objects"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is the caller's responsibility."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We will not mark a function as MT-Unsafe or AS-Unsafe"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" if it misbehaves when users fail to take the measures required by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" POSIX to avoid data races when dealing with such objects."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" As a general rule, if a function is documented as reading from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" an object passed (by reference) to it, or modifying it,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" users ought to use memory synchronization primitives"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to avoid data races just as they would should they perform"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the accesses themselves rather than by calling the library function."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Standard I/O"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .RI ( \"FILE *\" )"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" streams are the exception to the general rule,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in that POSIX mandates the library to guard against data races"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in many functions that manipulate objects of this specific opaque type."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We regard this as a convenience provided to users,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" rather than as a general requirement whose expectations"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" should extend to other types."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In order to remind users that guarding certain arguments is their"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility, we will annotate functions that take objects of certain"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" types as arguments."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We draw the line for objects passed by users as follows:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" objects whose types are exposed to users,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and that users are expected to access directly,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" such as memory buffers, strings,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and various user-visible structured types, do"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" give reason for functions to be annotated with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR race ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" It would be noisy and redundant with the general requirement,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and not many would be surprised by the library's lack of internal"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" guards when accessing objects that can be accessed directly by users."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" As for objects that are opaque or opaque-like,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in that they are to be manipulated only by passing them"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to library functions (e.g.,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR FILE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR DIR ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR obstack ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .IR iconv_t ),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" there might be additional expectations as to internal coordination"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of access by the library."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" We will annotate, with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I race"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" followed by a colon and the argument name,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" functions that take such objects but that do not take"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" care of synchronizing access to them by default."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" For example,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I FILE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" stream"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I unlocked"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" functions"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .RB ( unlocked_stdio (3))"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" will be annotated,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but those that perform implicit locking on"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I FILE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" streams by default will not,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" even though the implicit locking may be disabled on a per-stream basis."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In either case, we will not regard as MT-Unsafe functions that may"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" access user-supplied objects in unsafe ways should users fail to ensure"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the accesses are well defined."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The notion prevails that users are expected to safeguard against"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" data races any user-supplied objects that the library accesses"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" on their behalf."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" The above describes @mtsrace; @mtasurace is described below."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This user responsibility does not apply, however,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to objects controlled by the library itself,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" such as internal objects and static buffers used"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to return values from certain calls."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" When the library doesn't guard them against concurrent uses,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" these cases are regarded as MT-Unsafe and AS-Unsafe (although the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I race"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" mark under AS-Unsafe will be omitted"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as redundant with the one under MT-Unsafe)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" As in the case of user-exposed objects,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the mark may be followed by a colon and an identifier."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The identifier groups all functions that operate on a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" certain unguarded object; users may avoid the MT-Safety issues related"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" with unguarded concurrent access to such internal objects by creating a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" non-recursive mutex related with the identifier,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and always holding the mutex when calling any function marked"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as racy on that identifier,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as they would have to should the identifier be"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" an object under user control."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The non-recursive mutex avoids the MT-Safety issue,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but it trades one AS-Safety issue for another,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" so use in asynchronous signals remains undefined."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" When the identifier relates to a static buffer used to hold return values,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the mutex must be held for as long as the buffer remains in use"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" by the caller."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Many functions that return pointers to static buffers offer reentrant"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" variants that store return values in caller-supplied buffers instead."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In some cases, such as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR tmpname (3),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the variant is chosen not by calling an alternate entry point,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but by passing a non-NULL pointer to the buffer in which the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" returned values are to be stored."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" These variants are generally preferable in multi-threaded programs,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" although some of them are not MT-Safe because of other internal buffers,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" also documented with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I race"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" notes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue non-atomically"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "modify internal objects that are better regarded as constant,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because a substantial portion of the GNU C Library accesses them without"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "synchronization."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Unlike"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " race ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which causes both readers and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "writers of internal objects to be regarded as MT-Unsafe, "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" and AS-Unsafe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this mark is applied to writers only."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Writers remain "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" equally"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "MT-Unsafe "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" and AS-Unsafe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the then-mandatory constness of objects they"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "modify enables readers to be regarded as MT-Safe "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" and AS-Safe"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(as long as no other reasons for them to be unsafe remain),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since the lack of synchronization is not a problem when the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "objects are effectively constant."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The identifier that follows the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mark will appear by itself as a safety note in readers."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Programs that wish to work around this safety issue,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so as to call writers, may use a non-recursive"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "read-write lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "associated with the identifier, and guard"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls to functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "followed by the identifier with a write lock, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls to functions marked with the identifier"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by itself with a read lock."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The non-recursive locking removes the MT-Safety problem,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but it trades one AS-Safety problem for another,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" so use in asynchronous signals remains undefined."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" But what if, instead of marking modifiers with const:id and readers"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" with just id, we marked writers with race:id and readers with ro:id?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" Instead of having to define each instance of 'id', we'd have a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" general pattern governing all such 'id's, wherein race:id would"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" suggest the need for an exclusive/write lock to make the function"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" safe, whereas ro:id would indicate 'id' is expected to be read-only,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" but if any modifiers are called (while holding an exclusive lock),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" then ro:id-marked functions ought to be guarded with a read lock for"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" safe operation.  ro:env or ro:locale, for example, seems to convey"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" more clearly the expectations and the meaning, than just env or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" locale."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sig"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sig"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as a MT-Safety issue"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" (that implies an identical AS-Safety issue, omitted for brevity)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "may temporarily install a signal handler for internal purposes,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which may interfere with other uses of the signal,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "identified after a colon."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This safety problem can be worked around by ensuring that no other uses"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the signal will take place for the duration of the call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Holding a non-recursive mutex while calling all functions that use the same"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "temporary signal;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blocking that signal before the call and resetting its"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "handler afterwards is recommended."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" There is no safe way to guarantee the original signal handler is"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" restored in case of asynchronous cancellation,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" therefore so-marked functions are also AC-Unsafe."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" fixme: at least deferred cancellation should get it right, and would"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" obviate the restoring bit below, and the qualifier above."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Besides the measures recommended to work around the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MT-Safety and AS-Safety problem,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in order to avert the cancellation problem,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" disabling asynchronous cancellation"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" installing a cleanup handler to restore the signal to the desired state"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and to release the mutex are recommended."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " term"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " term"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue may change the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "terminal settings in the recommended way, namely: call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tcgetattr (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "modify some flags, and then call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tcsetattr (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this creates a window in which changes made by other threads are lost."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " term"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are MT-Unsafe."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The same window enables changes made by asynchronous signals to be lost."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" These functions are also AS-Unsafe,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but the corresponding mark is omitted as redundant."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "It is thus advisable for applications using the terminal to avoid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "concurrent and reentrant interactions with it,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by not using it in signal handlers or blocking signals that might use it,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and holding a lock while calling these functions and interacting"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the terminal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This lock should also be used for mutual exclusion with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " race:tcattr(fd) ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a file descriptor for the controlling terminal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The caller may use a single mutex for simplicity,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or use one mutex per terminal,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "even if referenced by different file descriptors."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions marked with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I term"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AC-Safety issue are supposed to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" restore terminal settings to their original state,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" after temporarily changing them, but they may fail to do so if canceled."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" fixme: at least deferred cancellation should get it right, and would"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" obviate the restoring bit below, and the qualifier above."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Besides the measures recommended to work around the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MT-Safety and AS-Safety problem,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in order to avert the cancellation problem,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" disabling asynchronous cancellation"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" installing a cleanup handler to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" restore the terminal settings to the original state and to release the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" mutex are recommended."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Other safety remarks"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Additional keywords may be attached to functions,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicating features that do not make a function unsafe to call,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but that may need to be taken into account in certain classes of programs:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " locale"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions annotated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " locale"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue read from"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the locale object without any form of synchronization."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "annotated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " locale"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "called concurrently with locale changes may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "behave in ways that do not correspond to any of the locales active"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "during their execution, but an unpredictable mix thereof."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "We do not mark these functions as MT-Unsafe, "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" or AS-Unsafe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "however,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because functions that modify the locale object are marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const:locale"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and regarded as unsafe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Being unsafe, the latter are not to be called when multiple threads"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are running or asynchronous signals are enabled,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and so the locale can be considered effectively constant"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in these contexts,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which makes the former safe."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Should the locking strategy suggested under @code{const} be used,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" failure to guard locale uses is not as fatal as data races in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" general: unguarded uses will @emph{not} follow dangling pointers or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" access uninitialized, unmapped or recycled memory.  Each access will"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" read from a consistent locale object that is or was active at some"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" point during its execution.  Without synchronization, however, it"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" cannot even be assumed that, after a change in locale, earlier"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" locales will no longer be used, even after the newly-chosen one is"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" used in the thread.  Nevertheless, even though unguarded reads from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the locale will not violate type safety, functions that access the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" locale multiple times may invoke all sorts of undefined behavior"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" because of the unexpected locale changes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " env"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " env"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue access the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "environment with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getenv (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or similar, without any guards to ensure"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "safety in the presence of concurrent modifications."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "We do not mark these functions as MT-Unsafe, "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" or AS-Unsafe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "however,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because functions that modify the environment are all marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const:env"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and regarded as unsafe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Being unsafe, the latter are not to be called when multiple threads"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are running or asynchronous signals are enabled,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and so the environment can be considered"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "effectively constant in these contexts,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which makes the former safe."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hostid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The function marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hostid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue reads from the system-wide data structures that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "hold the \"host ID\" of the machine."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These data structures cannot generally be modified atomically."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since it is expected that the \"host ID\" will not normally change,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the function that reads from it"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( gethostid (3))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is regarded as safe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whereas the function that modifies it"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( sethostid (3))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const:hostid ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicating it may require special care if it is to be called."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this specific case,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the special care amounts to system-wide"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(not merely intra-process) coordination."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigintr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigintr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue access the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "GNU C Library"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _sigintr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "internal data structure without any guards to ensure"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "safety in the presence of concurrent modifications."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "We do not mark these functions as MT-Unsafe, "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" or AS-Unsafe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "however,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because functions that modify this data structure are all marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const:sigintr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and regarded as unsafe."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Being unsafe,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the latter are not to be called when multiple threads are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "running or asynchronous signals are enabled,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and so the data structure can be considered"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "effectively constant in these contexts,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which makes the former safe."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I fd"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions annotated with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I fd"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AC-Safety issue may leak file"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" descriptors if asynchronous thread cancellation interrupts their"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" execution."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions that allocate or deallocate file descriptors will generally be"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" marked as such."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Even if they attempted to protect the file descriptor"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" allocation and deallocation with cleanup regions,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" allocating a new descriptor and storing its number where the cleanup region"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" could release it cannot be performed as a single atomic operation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Similarly,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" releasing the descriptor and taking it out of the data structure"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" normally responsible for releasing it cannot be performed atomically."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" There will always be a window in which the descriptor cannot be released"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" because it was not stored in the cleanup handler argument yet,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or it was already taken out before releasing it."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" It cannot be taken out after release:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" an open descriptor could mean either that the descriptor still"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" has to be closed,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or that it already did so but the descriptor was"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" reallocated by another thread or signal handler."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Such leaks could be internally avoided, with some performance penalty,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" by temporarily disabling asynchronous thread cancellation."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" since callers of allocation or deallocation functions would have to do"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" this themselves, to avoid the same sort of leak in their own layer,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" it makes more sense for the library to assume they are taking care of it"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" than to impose a performance penalty that is redundant when the problem"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is solved in upper layers, and insufficient when it is not."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This remark by itself does not cause a function to be regarded as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" AC-Unsafe."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, cumulative effects of such leaks may pose a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" problem for some programs."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If this is the case,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" suspending asynchronous cancellation for the duration of calls"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" to such functions is recommended."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I mem"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Functions annotated with"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I mem"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as an AC-Safety issue may leak"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" memory if asynchronous thread cancellation interrupts their execution."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The problem is similar to that of file descriptors: there is no atomic"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" interface to allocate memory and store its address in the argument to a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" cleanup handler,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or to release it and remove its address from that argument,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" without at least temporarily disabling asynchronous cancellation,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which these functions do not do."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This remark does not by itself cause a function to be regarded as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" generally AC-Unsafe."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, cumulative effects of such leaks may be"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" severe enough for some programs that disabling asynchronous cancellation"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" for the duration of calls to such functions may be required."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cwd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Functions marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cwd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as an MT-Safety issue may temporarily"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "change the current working directory during their execution,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which may cause relative pathnames to be resolved in unexpected ways in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "other threads or within asynchronous signal or cancellation handlers."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This is not enough of a reason to mark so-marked functions as MT-Unsafe,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or AS-Unsafe,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "but when this behavior is optional (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nftw (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " FTW_CHDIR ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "avoiding the option may be a good alternative to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using full pathnames or file descriptor-relative (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " openat (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system calls."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .TP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I !posix"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This remark, as an MT-Safety, AS-Safety or AC-Safety"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" note to a function,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" indicates the safety status of the function is known to differ"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" from the specified status in the POSIX standard."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" For example, POSIX does not require a function to be Safe,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but our implementation is, or vice-versa."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" For the time being, the absence of this remark does not imply the safety"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" properties we documented are identical to those mandated by POSIX for"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the corresponding functions."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " :identifier"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Annotations may sometimes be followed by identifiers,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "intended to group several functions that, for example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "access the data structures in an unsafe way, as in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " race"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or to provide more specific information,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "such as naming a signal in a function marked with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sig ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It is envisioned that it may be applied to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lock"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " corrupt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as well in the future."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In most cases, the identifier will name a set of functions,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but it may name global objects or function arguments,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or identifiable properties or logical components associated with them,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with a notation such as, for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " :buf(arg)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to denote a buffer associated with the argument"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " :tcattr(fd)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to denote the terminal attributes of a file descriptor"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fd ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The most common use for identifiers is to provide logical groups of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions and arguments that need to be protected by the same"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "synchronization primitive in order to ensure safe operation in a given"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "context."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /condition"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Some safety annotations may be conditional,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in that they only apply if a boolean expression involving arguments,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "global variables or even the underlying kernel evaluates to true."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Such conditions as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I /hurd"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I /!linux!bsd"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" indicate the preceding marker only"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" applies when the underlying kernel is the HURD,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or when it is neither Linux nor a BSD kernel, respectively."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /!ps"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /one_per_line"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicate the preceding marker only applies when argument"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ps"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL, or global variable"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " one_per_line"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is nonzero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When all marks that render a function unsafe are"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "adorned with such conditions,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and none of the named conditions hold,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the function can be regarded as safe."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthreads (7)"
        }
      ]
    ]
  }
]
