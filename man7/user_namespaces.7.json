[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2013, 2014 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (c) 2012, 2014 by Eric W. Biederman <ebiederm@xmission.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " USER_NAMESPACES 7 2018-02-02 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "user_namespaces "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " overview of Linux user namespaces"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an overview of namespaces, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "User namespaces isolate security-related identifiers and attributes,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in particular,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user IDs and group IDs (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " credentials (7)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the root directory,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "keys (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " keyrings (7)),"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME: This page says very little about the interaction"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" of user namespaces and keys. Add something on this topic."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and capabilities (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A process's user and group IDs can be different"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inside and outside a user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In particular,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a process can have a normal unprivileged user ID outside a user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while at the same time having a user ID of 0 inside the namespace;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in other words,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process has full privileges for operations inside the user namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but is unprivileged for operations outside the namespace."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Nested namespaces, namespace membership"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "User namespaces can be nested;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that is, each user namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "except the initial (\"root\")"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "has a parent user namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and can have zero or more child user namespaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The parent user namespace is the user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the process that creates the user namespace via a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The kernel imposes (since version 3.11) a limit of 32 nested levels of"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 8742f229b635bf1c1c84a3dfe5e47c814c20b5c8"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "user namespaces."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME Explain the rationale for this limit. (What is the rationale?)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that would cause this limit to be exceeded fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EUSERS ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each process is a member of exactly one user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A process created via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fork (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is a member of the same user namespace as its parent."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A single-threaded process can join another user namespace with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if it has the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in that namespace;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "upon doing so, it gains a full set of capabilities in that namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag makes the new child process (for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the caller (for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a member of the new user namespace created by the call."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NS_GET_PARENT"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation can be used to discover the parental relationship"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "between user namespaces; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl_ns (2)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Capabilities"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The child process created by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag starts out with a complete set"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of capabilities in the new user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Likewise, a process that creates a new user namespace using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or joins an existing user namespace using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "gains a full set of capabilities in that namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On the other hand,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that process has no capabilities in the parent (in the case of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or previous (in the case of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "even if the new namespace is created or joined by the root user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., a process with user ID 0 in the root namespace)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " execve (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will cause a process's capabilities to be recalculated in the usual way (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unless the process has a user ID of 0 within the namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the executable file has a nonempty inheritable capabilities mask,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process will lose all capabilities."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the discussion of user and group ID mappings, below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag sets the \"securebits\" flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to their default values (all flags disabled) in the child (for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or caller (for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that because the caller no longer has capabilities"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in its original user namespace after a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is not possible for a process to reset its \"securebits\" flags while"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "retaining its user namespace membership by using a pair of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls to move to another user namespace and then return to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its original user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The rules for determining whether or not a process has a capability"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a particular user namespace are as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1. 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A process has a capability inside a user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if it is a member of that namespace and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it has the capability in its effective capability set."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A process can gain capabilities in its effective capability"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set in various ways."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, it may execute a set-user-ID program or an"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "executable with associated file capabilities."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a process may gain capabilities via the effect of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as already described."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In the 3.8 sources, see security/commoncap.c::cap_capable():"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If a process has a capability in a user namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then it has that capability in all child (and further removed descendant)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "namespaces as well."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 3."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" * The owner of the user namespace in the parent of the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" * user namespace has all caps."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a user namespace is created, the kernel records the effective"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user ID of the creating process as being the \"owner\" of the namespace."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" (and likewise associates the effective group ID of the creating process"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" with the namespace)."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A process that resides"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the parent of the user namespace"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See kernel commit 520d9eabce18edfef76a60b7b839d54facafe1f9 for a fix"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" on this point"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "and whose effective user ID matches the owner of the namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has all capabilities in the namespace."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     This includes the case where the process executes a set-user-ID"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     program that confers the effective UID of the creator of the namespace."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "By virtue of the previous rule,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this means that the process has all capabilities in all"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "further removed descendant user namespaces as well."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NS_GET_OWNER_UID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation can be used to discover the user ID of the owner of the namespace;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl_ns (2)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Effect of capabilities within a user namespace"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Having a capability inside a user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "permits a process to perform operations (that require privilege)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only on resources governed by that namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words, having a capability in a user namespace permits a process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to perform privileged operations on resources that are governed by (nonuser)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "namespaces owned by (associated with) the user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see the next subsection)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On the other hand, there are many privileged operations that affect"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resources that are not associated with any namespace type,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for example, changing the system time (governed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_TIME ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "loading a kernel module (governed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_MODULE ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and creating a device (governed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_MKNOD )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Only a process with privileges in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " initial"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user namespace can perform such operations."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Holding"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "within the user namespace that owns a process's mount namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allows that process to create bind mounts"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and mount the following types of filesystems:"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" fs_flags = FS_USERNS_MOUNT in kernel sources"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(since Linux 3.8)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /sys"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(since Linux 3.8)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " devpts"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(since Linux 3.9)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tmpfs (5)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(since Linux 3.9)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ramfs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(since Linux 3.9)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mqueue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(since Linux 3.9)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bpf"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit b2197755b2633e164a439682fb05a9b5ea48f706"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(since Linux 4.4)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PD",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Holding"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "within the user namespace that owns a process's cgroup namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allows (since Linux 4.6)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that process to the mount the cgroup version 2 filesystem and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cgroup version 1 named hierarchies"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., cgroup filesystems mounted with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"\"\"none,name=\"\"\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Holding"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "within the user namespace that owns a process's PID namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allows (since Linux 3.8)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that process to mount"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "filesystems."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note however, that mounting block-based filesystems can be done"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only by a process that holds"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the initial user namespace."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Interaction of user namespaces and other types of namespaces"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting in Linux 3.8, unprivileged processes can create user namespaces,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the other types of namespaces can be created with just the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability in the caller's user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a nonuser namespace is created,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is owned by the user namespace in which the creating process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was a member at the time of the creation of the namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Actions on the nonuser namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "require capabilities in the corresponding user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEWUSER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified along with other"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CLONE_NEW*"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flags in a single"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call, the user namespace is guaranteed to be created first,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "giving the child"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( clone (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or caller"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( unshare (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "privileges over the remaining namespaces created by the call."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, it is possible for an unprivileged caller to specify this combination"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of flags."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a new namespace (other than a user namespace) is created via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel records the user namespace of the creating process as the owner of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the new namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This association can't be changed.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a process in the new namespace subsequently performs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "privileged operations that operate on global"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resources isolated by the namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the permission checks are performed according to the process's capabilities"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the user namespace that the kernel associated with the new namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, suppose that a process attempts to change the hostname"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( sethostname (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a resource governed by the UTS namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel will determine which user namespace owns"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process's UTS namespace, and check whether the process has the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "required capability"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SYS_ADMIN )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in that user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NS_GET_USERNS"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation can be used to discover the user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that owns a nonuser namespace; see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl_ns (2)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " User and group ID mappings: uid_map and gid_map"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a user namespace is created,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it starts out without a mapping of user IDs (group IDs)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the parent user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "files (available since Linux 3.5)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 22d917d80e842829d0ca0a561967d728eb1d6303"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "expose the mappings for user and group IDs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inside the user namespace for the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These files can be read to view the mappings in a user namespace and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "written to (once) to define the mappings."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The description in the following paragraphs explains the details for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map ;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is exactly the same,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but each instance of \"user ID\" is replaced by \"group ID\"."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file exposes the mapping of user IDs from the user namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the user namespace of the process that opened"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(but see a qualification to this point below)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In other words, processes that are in different user namespaces"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will potentially see different values when reading from a particular"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file, depending on the user ID mappings for the user namespaces"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the reading processes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each line in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file specifies a 1-to-1 mapping of a range of contiguous"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user IDs between two user namespaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(When a user namespace is first created, this file is empty.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The specification in each line takes the form of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "three numbers delimited by white space."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first two numbers specify the starting user ID in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "each of the two user namespaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The third number specifies the length of the mapped range."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In detail, the fields are interpreted as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " (1) 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The start of the range of user IDs in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the user namespace of the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " (2)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The start of the range of user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IDs to which the user IDs specified by field one map."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "How field two is interpreted depends on whether the process that opened"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are in the same user namespace, as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " a) 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the two processes are in different user namespaces:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field two is the start of a range of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user IDs in the user namespace of the process that opened"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " b)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the two processes are in the same user namespace:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field two is the start of the range of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user IDs in the parent user namespace of the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This case enables the opener of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the common case here is opening"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/self/uid_map )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to see the mapping of user IDs into the user namespace of the process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that created this user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " (3)"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The length of the range of user IDs that is mapped between the two"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user namespaces."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "System calls that return user IDs (group IDs)"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "for example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getuid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getgid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the credential fields in the structure returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stat (2)"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "return"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the user ID (group ID) mapped into the caller's user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a process accesses a file, its user and group IDs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are mapped into the initial user namespace for the purpose of permission"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "checking and assigning IDs when creating a file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a process retrieves file user and group IDs via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stat (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the IDs are mapped in the opposite direction,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to produce values relative to the process user and group ID mappings."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The initial user namespace has no parent namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but, for consistency, the kernel provides dummy user and group"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ID mapping files for this namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Looking at the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the same) from a shell in the initial namespace shows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bcat /proc/$$/uid_map"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "         0          0 4294967295"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This mapping tells us"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that the range starting at user ID 0 in this namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "maps to a range starting at 0 in the (nonexistent) parent namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the length of the range is the largest 32-bit unsigned integer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This leaves 4294967295 (the 32-bit signed "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 value) unmapped."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is deliberate:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"(uid_t)"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used in several interfaces (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setreuid (2))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as a way to specify \"no user ID\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Leaving"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"(uid_t)"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unmapped and unusable guarantees that there will be no"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "confusion when using these interfaces."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Defining user and group ID mappings: writing to uid_map and gid_map"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "After the creation of a new user namespace, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " one"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the processes in the namespace may be written to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " once"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to define the mapping of user IDs in the new user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An attempt to write more than once to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file in a user namespace fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Similar rules apply for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "files."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The lines written to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( gid_map )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must conform to the following rules:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The three fields must be valid numbers,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the last field must be greater than 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Lines are terminated by newline characters."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There is a limit on the number of lines in the file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In Linux 4.14 and earlier, this limit was (arbitrarily)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 5*12-byte records could fit in a 64B cache line"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "set at 5 lines."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since Linux 4.15,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 6397fac4915ab3002dc15aae751455da1a852f25"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the limit is 340 lines."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition, the number of bytes written to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the file must be less than the system page size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the write must be performed at the start of the file (i.e.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lseek (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pwrite (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can't be used to write to nonzero offsets in the file)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The range of user IDs (group IDs)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specified in each line cannot overlap with the ranges"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in any other lines."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In the initial implementation (Linux 3.8), this requirement was"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "satisfied by a simplistic implementation that imposed the further"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requirement that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the values in both field 1 and field 2 of successive lines must be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in ascending numerical order,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which prevented some otherwise valid maps from being created."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 3.9 and later"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 0bd14b4fd72afd5df41e9fd59f356740f22fceba"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "fix this limitation, allowing any valid set of nonoverlapping maps."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "At least one line must be written to the file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Writes that violate the above rules fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In order for a process to write to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/uid_map"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( /proc/[pid]/gid_map )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file, all of the following requirements must be met:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1. 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The writing process must have the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETUID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SETGID )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability in the user namespace of the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The writing process must either be in the user namespace of the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or be in the parent user namespace of the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 3."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The mapped user IDs (group IDs) must in turn have a mapping"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the parent user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 4."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "One of the following two cases applies:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Either"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the writing process has the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETUID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( CAP_SETGID )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " parent"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " + 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "No further restrictions apply:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process can make mappings to arbitrary user IDs (group IDs)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the parent user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "otherwise all of the following restrictions apply:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " + 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The data written to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( gid_map )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must consist of a single line that maps"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the writing process's effective user ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(group ID) in the parent user namespace to a user ID (group ID)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " +"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The writing process must have the same effective user ID as the process"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that created the user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " +"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the case of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call must first be denied by writing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file (see below) before writing to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Writes that violate the above rules fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Interaction with system calls that change process UIDs or GIDs"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In a user namespace where the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file has not been written, the system calls that change user IDs will fail."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Similarly, if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file has not been written, the system calls that change group IDs will fail."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "files have been written, only the mapped values may be used in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system calls that change user and group IDs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For user IDs, the relevant system calls include"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setuid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setfsuid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setreuid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setresuid (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For group IDs, the relevant system calls include"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setfsgid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setregid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setresgid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Writing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file before writing to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/gid_map"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Things changed in Linux 3.19"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 9cc46516ddf497ea16e8d7cb986ae03a0f6b92f8"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 66d2f338ee4c449396b6f99f5e75cd18eb6df272"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://lwn.net/Articles/626665/"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "will permanently disable"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in a user namespace and allow writing to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without having the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETGID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability in the parent user namespace."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " The /proc/[pid]/setgroups file"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 9cc46516ddf497ea16e8d7cb986ae03a0f6b92f8"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 66d2f338ee4c449396b6f99f5e75cd18eb6df272"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://lwn.net/Articles/626665/"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8989"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file displays the string"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " allow "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if processes in the user namespace that contains the process"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are permitted to employ the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call; it displays"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not permitted in that user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that regardless of the value in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file (and regardless of the process's capabilities), calls to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are also not permitted if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has not yet been set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A privileged process (one with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SYS_ADMIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability in the namespace) may write either of the strings"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " allow "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to this file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " before"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "writing a group ID mapping"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for this user namespace to the file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/gid_map ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Writing the string"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "prevents any process in the user namespace from employing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The essence of the restrictions described in the preceding"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "paragraph is that it is permitted to write to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only so long as calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is disallowed because"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has not been set."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This ensures that a process cannot transition from a state where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is allowed to a state where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is denied;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a process can transition only from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being disallowed to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being allowed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value of this file in the initial user namespace is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " allow "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": "."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has been written to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(which has the effect of enabling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the user namespace),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is no longer possible to disallow"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by writing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the write fails with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM )."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A child user namespace inherits the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "setting from its parent."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file has the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " deny "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": ","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system call can't subsequently be reenabled (by writing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        },
        {
          "type": "TEXT",
          "content": " allow "
        },
        {
          "type": "ESCAPE",
          "content": "\\(dq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the file) in this user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Attempts to do so fail with the error"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EPERM .)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This restriction also propagates down to all child user namespaces of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this user namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file was added in Linux 3.19,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but was backported to many earlier stable kernel series,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because it addresses a security issue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The issue concerned files with permissions such as \"rwx"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "rwx\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Such files give fewer permissions to \"group\" than they do to \"other\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means that dropping groups using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "might allow a process file access that it did not formerly have."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Before the existence of user namespaces this was not a concern,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since only a privileged process (one with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CAP_SETGID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "capability) could call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, with the introduction of user namespaces,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it became possible for an unprivileged process to create"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a new namespace in which the user had all privileges."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This then allowed formerly unprivileged"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "users to drop groups and thus gain file access"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that they did not previously have."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/setgroups"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file was added to address this security issue,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by denying any pathway for an unprivileged process to drop groups with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setgroups (2)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" /proc/PID/setgroups"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t[allow == setgroups() is allowed, \"deny\" == setgroups() is disallowed]"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t* Can write if have CAP_SYS_ADMIN in NS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t* Must write BEFORE writing to /proc/PID/gid_map"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" setgroups()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t* Must already have written to gid_map"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t* /proc/PID/setgroups must be \"allow\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" /proc/PID/gid_map -- writing"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t* Must already have written \"deny\" to /proc/PID/setgroups"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Unmapped user and group IDs"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There are various places where an unmapped user ID (group ID)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may be exposed to user space."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, the first process in a new user namespace may call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getuid (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before a user ID mapping has been defined for the namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In most such cases, an unmapped user ID is converted"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" from_kuid_munged(), from_kgid_munged()"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "to the overflow user ID (group ID);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the default value for the overflow user ID (group ID) is 65534."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the descriptions of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/overflowuid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sys/kernel/overflowgid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " proc (5)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The cases where unmapped IDs are mapped in this fashion include"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system calls that return user IDs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( getuid (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getgid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and similar),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "credentials passed over a UNIX domain socket,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" also SO_PEERCRED"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "credentials returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stat (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " waitid (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the System V IPC \"ctl\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IPC_STAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operations,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "credentials exposed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/status"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the files in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/sysvipc/* ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "credentials returned via the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_uid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " siginfo_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "received with a signal (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigaction (2)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "credentials written to the process accounting file (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " acct (5)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and credentials returned with POSIX message queue notifications (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mq_notify (3))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There is one notable case where unmapped user and group IDs are"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " not"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" from_kuid(), from_kgid()"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Also F_GETOWNER_UIDS is an exception"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "converted to the corresponding overflow ID value."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When viewing a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gid_map"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file in which there is no mapping for the second field,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that field is displayed as 4294967295 ("
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 as an unsigned integer)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Set-user-ID and set-group-ID programs"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a process inside a user namespace executes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a set-user-ID (set-group-ID) program,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the process's effective user (group) ID inside the namespace is changed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to whatever value is mapped for the user (group) ID of the file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, if either the user"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the group ID of the file has no mapping inside the namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the set-user-ID (set-group-ID) bit is silently ignored:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the new program is executed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the process's effective user (group) ID is left unchanged."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This mirrors the semantics of executing a set-user-ID or set-group-ID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program that resides on a filesystem that was mounted with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MS_NOSUID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, as described in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mount (2).)"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Miscellaneous"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a process's user and group IDs are passed over a UNIX domain socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to a process in a different user namespace (see the description of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SCM_CREDENTIALS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unix (7)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "they are translated into the corresponding values as per the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "receiving process's user and group ID mappings."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Namespaces are a Linux-specific feature."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Over the years, there have been a lot of features that have been added"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the Linux kernel that have been made available only to privileged users"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because of their potential to confuse set-user-ID-root applications."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In general, it becomes safe to allow the root user in a user namespace to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use those features because it is impossible, while in a user namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to gain more privilege than the root user of a user namespace has."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ============================================================"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Availability"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Use of user namespaces requires a kernel that is configured with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " CONFIG_USER_NS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "option."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "User namespaces require support in a range of subsystems across"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the kernel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When an unsupported subsystem is configured into the kernel,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is not possible to configure user namespaces support."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As at Linux 3.8, most relevant subsystems supported user namespaces,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but a number of filesystems did not have the infrastructure needed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to map user and group IDs between user namespaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 3.9 added the required infrastructure support for many of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the remaining unsupported filesystems"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Plan 9 (9P), Andrew File System (AFS), Ceph, CIFS, CODA, NFS, and OCFS2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 3.12 added support the last of the unsupported major filesystems,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit d6970d4b726cea6d7a9bc4120814f95c09571fc3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "XFS."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below is designed to allow experimenting with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "user namespaces, as well as other types of namespaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It creates namespaces as specified by command-line options and then executes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a command inside those namespaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The comments and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " usage()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function inside the program provide a full explanation of the program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The following shell session demonstrates its use."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "First, we look at the run-time environment:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Buname "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "rs"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P     # Need Linux 3.8 or later"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Linux 3.8.0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bid "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "u"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P         # Running as unprivileged user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "1000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bid "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "g"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "1000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Now start a new shell in new user"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "U ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mount"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "m ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and PID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "p )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "namespaces, with user ID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and group ID"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "1000 mapped to 0 inside the user namespace:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./userns_child_exec "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "p "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "m "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "U "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M '0 1000 1' "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G '0 1000 1' bash"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The shell has PID 1, because it is the first process in the new"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "PID namespace:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bash$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Becho $$"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Mounting a new"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "filesystem and listing all of the processes visible"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the new PID namespace shows that the shell can't see"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "any processes outside the PID namespace:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bash$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bmount "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "t proc proc /proc"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bash$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bps ax"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "  PID TTY      STAT   TIME COMMAND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    1 pts/3    S      0:00 bash"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   22 pts/3    R+     0:00 ps ax"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Inside the user namespace, the shell has user and group ID 0,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and a full set of permitted and effective capabilities:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bash$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bcat /proc/$$/status | egrep '^[UG]id'"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Uid:\t0\t0\t0\t0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Gid:\t0\t0\t0\t0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bash$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bcat /proc/$$/status | egrep '^Cap(Prm|Inh|Eff)'"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "CapInh:\t0000000000000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "CapPrm:\t0000001fffffffff"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "CapEff:\t0000001fffffffff"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/* userns_child_exec.c"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "   Licensed under GNU General Public License v2 or later"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "   Create a child process that executes a shell command in new"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   namespace(s); allow UID and GID mappings to be specified when"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   creating a user namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "*/"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sched.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/wait.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <signal.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <fcntl.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <limits.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <errno.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* A simple error"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "handling function: print an error message based"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   on the value in "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "errno"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " and terminate the calling process */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "struct child_args {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char **argv;        /* Command to be executed by child, with args */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int    pipe_fd[2];  /* Pipe used to synchronize parent and child */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int verbose;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "usage(char *pname)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"Usage: %s [options] cmd [arg...]"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", pname);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"Create a child process that executes a shell \""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            \"command in a new user namespace,"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            \"and possibly also other new namespace(s)."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"Options can be:"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define fpe(str) fprintf(stderr, \"    %s\", str);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "i          New IPC namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "m          New mount namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "n          New network namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "p          New PID namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "u          New UTS namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "U          New user namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M uid_map  Specify UID map for user namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G gid_map  Specify GID map for user namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "z          Map user"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s UID and GID to 0 in user namespace"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"            (equivalent to: "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "0 <uid> 1"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "0 <gid> 1"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ")"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "v          Display verbose messages"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"If "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "z, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M, or "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G is specified, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "U is required."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"It is not permitted to specify both "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "z and either "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M or "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"Map strings for "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M and "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G consist of records of the form:"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"    ID"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "inside"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ns   ID"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "outside"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ns   len"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"A map string can contain multiple records, separated\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        \" by commas;"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fpe(\"the commas are replaced by newlines before writing\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        \" to map files."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* Update the mapping file "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "map_file"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ", with the value provided in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "mapping"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ", a string that defines a UID or GID mapping. A UID or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   GID mapping consists of one or more newline"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "delimited records"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   of the form:"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "       ID_inside"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ns    ID"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "outside"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ns   length"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "   Requiring the user to supply a string that contains newlines is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   of course inconvenient for command"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "line use. Thus, we permit the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   use of commas to delimit records in this string, and replace them"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   with newlines before writing the string to the file. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "update_map(char *mapping, char *map_file)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int fd, j;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    size_t map_len;     /* Length of "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "mapping"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Replace commas in mapping string with newlines */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    map_len = strlen(mapping);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    for (j = 0; j < map_len; j++)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (mapping[j] == "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ","
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ")"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            mapping[j] = "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ";"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    fd = open(map_file, O_RDWR);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (fd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"ERROR: open %s: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", map_file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                strerror(errno));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (write(fd, mapping, map_len) != map_len) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"ERROR: write %s: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", map_file,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                strerror(errno));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(fd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* Linux 3.19 made a change in the handling of setgroups(2) and the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "gid_map"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " file to address a security issue. The issue allowed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   *unprivileged* users to employ user namespaces in order to drop"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   The upshot of the 3.19 changes is that in order to update the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "gid_maps"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " file, use of the setgroups() system call in this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   user namespace must first be disabled by writing \"deny\" to one of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   the /proc/PID/setgroups files for this namespace.  That is the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "   purpose of the following function. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "proc_setgroups_write(pid_t child_pid, char *str)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char setgroups_path[PATH_MAX];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int fd;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    snprintf(setgroups_path, PATH_MAX, \"/proc/%ld/setgroups\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (long) child_pid);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    fd = open(setgroups_path, O_RDWR);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (fd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* We may be on a system that doesn"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t support"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           /proc/PID/setgroups. In that case, the file won"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t exist,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           and the system won"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t impose the restrictions that Linux 3.19"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           added. That"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s fine: we don"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t need to do anything in order"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           to permit "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "gid_map"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " to be updated."
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "           However, if the error from open() was something other than"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           the ENOENT error that is expected for that case,  let the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           user know. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (errno != ENOENT)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr, \"ERROR: open %s: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", setgroups_path,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                strerror(errno));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (write(fd, str, strlen(str)) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"ERROR: write %s: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", setgroups_path,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            strerror(errno));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(fd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int              /* Start function for cloned child */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "childFunc(void *arg)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct child_args *args = (struct child_args *) arg;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char ch;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Wait until the parent has updated the UID and GID mappings."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       See the comment in main(). We wait for end of file on a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       pipe that will be closed by the parent process once it has"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       updated the mappings. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(args"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">pipe_fd[1]);    /* Close our descriptor for the write"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                   end of the pipe so that we see EOF"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                   when parent closes its descriptor */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (read(args"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">pipe_fd[0], &ch, 1) != 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                \"Failure in child: read from pipe returned != 0"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(args"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">pipe_fd[0]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Execute a shell command */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"About to exec %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", args"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    execvp(args"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">argv[0], args"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">argv);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    errExit(\"execvp\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define STACK_SIZE (1024 * 1024)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static char child_stack[STACK_SIZE];    /* Space for child"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s stack */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int flags, opt, map_zero;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pid_t child_pid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct child_args args;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *uid_map, *gid_map;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    const int MAP_BUF_SIZE = 100;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char map_buf[MAP_BUF_SIZE];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char map_path[PATH_MAX];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Parse command"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "line options. The initial "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "+"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " character in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       the final getopt() argument prevents GNU"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "style permutation"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       of command"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "line options. That"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s useful, since sometimes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       the "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "command"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " to be executed by this program itself"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       has command"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "line options. We don"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t want getopt() to treat"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       those as options to this program. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    flags = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    verbose = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    gid_map = NULL;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    uid_map = NULL;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    map_zero = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    while ((opt = getopt(argc, argv, \"+imnpuUM:G:zv\")) != "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        switch (opt) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "i"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": flags |= CLONE_NEWIPC;        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "m"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": flags |= CLONE_NEWNS;         break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": flags |= CLONE_NEWNET;        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "p"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": flags |= CLONE_NEWPID;        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "u"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": flags |= CLONE_NEWUTS;        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "v"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": verbose = 1;                  break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "z"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": map_zero = 1;                 break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "M"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": uid_map = optarg;             break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "G"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": gid_map = optarg;             break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "U"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ": flags |= CLONE_NEWUSER;       break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        default:  usage(argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "M or "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "G without "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "U is nonsensical */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (((uid_map != NULL || gid_map != NULL || map_zero) &&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                !(flags & CLONE_NEWUSER)) ||"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (map_zero && (uid_map != NULL || gid_map != NULL)))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        usage(argv[0]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    args.argv = &argv[optind];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* We use a pipe to synchronize the parent and child, in order to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       ensure that the parent sets the UID and GID maps before the child"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       calls execve(). This ensures that the child maintains its"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       capabilities during the execve() in the common case where we"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       want to map the child"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s effective user ID to 0 in the new user"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       namespace. Without this synchronization, the child would lose"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       its capabilities if it performed an execve() with nonzero"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       user IDs (see the capabilities(7) man page for details of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       transformation of a process"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s capabilities during execve()). */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (pipe(args.pipe_fd) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"pipe\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Create the child in new namespace(s) */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    child_pid = clone(childFunc, child_stack + STACK_SIZE,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                      flags | SIGCHLD, &args);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (child_pid == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"clone\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Parent falls through to here */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (verbose)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"%s: PID of child created by clone() is %ld"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                argv[0], (long) child_pid);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Update the UID and GID maps in the child */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (uid_map != NULL || map_zero) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        snprintf(map_path, PATH_MAX, \"/proc/%ld/uid_map\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (long) child_pid);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (map_zero) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            snprintf(map_buf, MAP_BUF_SIZE, \"0 %ld 1\", (long) getuid());"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            uid_map = map_buf;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        update_map(uid_map, map_path);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (gid_map != NULL || map_zero) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        proc_setgroups_write(child_pid, \"deny\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        snprintf(map_path, PATH_MAX, \"/proc/%ld/gid_map\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (long) child_pid);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (map_zero) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            snprintf(map_buf, MAP_BUF_SIZE, \"0 %ld 1\", (long) getgid());"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            gid_map = map_buf;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        update_map(gid_map, map_path);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Close the write end of the pipe, to signal to the child that we"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       have updated the UID and GID maps */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    close(args.pipe_fd[1]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (waitpid(child_pid, NULL, 0) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)      /* Wait for child */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"waitpid\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (verbose)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"%s: terminating"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " newgidmap (1),      "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" From the shadow package"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " newuidmap (1),      "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" From the shadow package"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " clone (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ptrace (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " setns (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " unshare (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " proc (5),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " subgid (5),         "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" From the shadow package"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " subuid (5),         "
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" From the shadow package"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " capabilities (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cgroup_namespaces (7)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " credentials (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespaces (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pid_namespaces (7)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The kernel source file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Documentation/namespaces/resource-control.txt ."
        }
      ]
    ]
  }
]
