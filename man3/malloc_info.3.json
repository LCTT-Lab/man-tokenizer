[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_INFO 3  2017-09-15 \"GNU\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "malloc_info "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " export malloc state to a stream"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <malloc.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int malloc_info(int \" options \", FILE *\" stream );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function exports an XML string that describes the current state"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the memory-allocation"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "implementation in the caller."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The string is printed on the file stream"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stream ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The exported string includes information about all arenas (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As currently implemented,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " options"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on error, it returns "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1, with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set to indicate the cause."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EINVAL"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " options"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was nonzero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was added to glibc in version 2.10."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lb lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".sp",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This function is a GNU extension."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The memory-allocation information is provided as an XML string"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(rather than a C structure)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "because the information may change over time"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(according to changes in the underlying implementation)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The output XML string includes a version field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open_memstream (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function can be used to send the output of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "directly into a buffer in memory, rather than to a file."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function is designed to address deficiencies in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_stats (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below takes up to four command-line arguments,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of which the first three are mandatory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first argument specifies the number of threads that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the program should create."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "All of the threads, including the main thread,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allocate the number of blocks of memory specified by the second argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The third argument controls the size of the blocks to be allocated."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The main thread creates blocks of this size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the second thread created by the program allocates blocks of twice this size,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the third thread allocates blocks of three times this size, and so on."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program calls"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "twice to display the memory-allocation state."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first call takes place before any threads"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are created or memory allocated."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The second call is performed after all threads have allocated memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the following example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the command-line arguments specify the creation of one additional thread,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and both the main thread and the additional thread"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allocate 10000 blocks of memory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After the blocks of memory have been allocated,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "shows the state of two allocation arenas."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$ \" \"getconf GNU_LIBC_VERSION\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "glibc 2.13"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$ \" \"./a.out 1 10000 100\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "============ Before allocating blocks ============"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<malloc version=\"1\">"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<heap nr=\"0\">"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<sizes>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</sizes>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"fast\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"rest\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"current\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"max\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"total\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"mprotect\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</heap>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"fast\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"rest\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"current\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"max\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"total\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"mprotect\" size=\"135168\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</malloc>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "============ After allocating blocks ============"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<malloc version=\"1\">"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<heap nr=\"0\">"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<sizes>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</sizes>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"fast\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"rest\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"current\" size=\"1081344\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"max\" size=\"1081344\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"total\" size=\"1081344\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"mprotect\" size=\"1081344\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</heap>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<heap nr=\"1\">"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<sizes>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</sizes>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"fast\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"rest\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"current\" size=\"1032192\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"max\" size=\"1032192\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"total\" size=\"1032192\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"mprotect\" size=\"1032192\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</heap>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"fast\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<total type=\"rest\" count=\"0\" size=\"0\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"current\" size=\"2113536\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<system type=\"max\" size=\"2113536\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"total\" size=\"2113536\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "<aspace type=\"mprotect\" size=\"2113536\"/>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "</malloc>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <pthread.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <malloc.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <errno.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static size_t blockSize;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static int numThreads, numBlocks;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define errExit(msg)    do { perror(msg); exit(EXIT_FAILURE); "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void *"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread_func(void *arg)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int j;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int tn = (int) arg;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* The multiplier "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "(2 + tn)"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": " ensures that each thread (including"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       the main thread) allocates a different amount of memory */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (j = 0; j < numBlocks; j++)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (malloc(blockSize * (2 + tn)) == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            errExit(\"malloc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "thread\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sleep(100);         /* Sleep until main thread terminates */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    return NULL;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int j, tn, sleepTime;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pthread_t *thr;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc < 4) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                \"%s num"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "threads num"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "blocks block"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "size [sleep"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "time]"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    numThreads = atoi(argv[1]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    numBlocks = atoi(argv[2]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    blockSize = atoi(argv[3]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    sleepTime = (argc > 4) ? atoi(argv[4]) : 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    thr = calloc(numThreads, sizeof(pthread_t));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (thr == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errExit(\"calloc\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"============ Before allocating blocks ============"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    malloc_info(0, stdout);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Create threads that allocate different amounts of memory */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (tn = 0; tn < numThreads; tn++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        errno = pthread_create(&thr[tn], NULL, thread_func,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                               (void *) tn);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (errno != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            errExit(\"pthread_create\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* If we add a sleep interval after the start"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "up of each"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           thread, the threads likely won"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t contend for malloc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           mutexes, and therefore additional arenas won"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "t be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           allocated (see malloc(3)). */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (sleepTime > 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            sleep(sleepTime);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* The main thread also allocates some memory */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (j = 0; j < numBlocks; j++)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (malloc(blockSize) == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            errExit(\"malloc\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    sleep(2);           /* Give all threads a chance to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                           complete allocations */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n============ After allocating blocks ============"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    malloc_info(0, stdout);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_stats (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " open_memstream (3)"
        }
      ]
    ]
  }
]
