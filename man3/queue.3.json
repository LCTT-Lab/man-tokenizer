[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 1993"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tThe Regents of the University of California.  All rights reserved."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(BSD_3_CLAUSE_UCB)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Redistribution and use in source and binary forms, with or without"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modification, are permitted provided that the following conditions"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" are met:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 1. Redistributions of source code must retain the above copyright"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    notice, this list of conditions and the following disclaimer."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2. Redistributions in binary form must reproduce the above copyright"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    notice, this list of conditions and the following disclaimer in the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    documentation and/or other materials provided with the distribution."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 3. Neither the name of the University nor the names of its contributors"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    may be used to endorse or promote products derived from this software"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    without specific prior written permission."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SUCH DAMAGE."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t@(#)queue.3\t8.2 (Berkeley) 1/24/94"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" $FreeBSD$"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Dd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " February 7, 2015"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Dt",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " QUEUE 3"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Os",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Sh",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_EMPTY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_ENTRY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_FIRST ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_FOREACH ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_FROM ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_SAFE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_FROM_SAFE ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD_INITIALIZER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INIT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INSERT_AFTER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INSERT_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_NEXT ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_REMOVE_AFTER ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_SWAP ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_CONCAT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_EMPTY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_ENTRY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_FIRST ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_FOREACH ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_FROM ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_SAFE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_FROM_SAFE ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD_INITIALIZER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INIT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_AFTER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_TAIL ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_LAST ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_NEXT ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_REMOVE_AFTER ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_SWAP ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_EMPTY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_ENTRY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_FIRST ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_FOREACH ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_FROM ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_SAFE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_FROM_SAFE ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD_INITIALIZER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INIT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_AFTER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_BEFORE ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_NEXT ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_PREV ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_REMOVE ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_SWAP ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_CONCAT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_EMPTY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_ENTRY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FIRST ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FOREACH ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_FROM ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_SAFE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_FROM_SAFE ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FOREACH_REVERSE ,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_FROM ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_SAFE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_FROM_SAFE ,"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD_INITIALIZER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INIT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_AFTER ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_BEFORE ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_TAIL ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_LAST ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_NEXT ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_PREV ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_REMOVE ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_SWAP"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nd",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " implementations of singly-linked lists, singly-linked tail queues,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lists and tail queues"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Sh",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".In",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sys/queue.h"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_EMPTY \"SLIST_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_ENTRY \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_FIRST \"SLIST_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_FOREACH \"TYPE *var\" \"SLIST_HEAD *head\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn SLIST_FOREACH_FROM \"TYPE *var\" \"SLIST_HEAD *head\" \"SLIST_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn SLIST_FOREACH_SAFE \"TYPE *var\" \"SLIST_HEAD *head\" \"SLIST_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn SLIST_FOREACH_FROM_SAFE \"TYPE *var\" \"SLIST_HEAD *head\" \"SLIST_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD \"HEADNAME\" \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD_INITIALIZER \"SLIST_HEAD head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INIT \"SLIST_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INSERT_AFTER \"TYPE *listelm\" \"TYPE *elm\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INSERT_HEAD \"SLIST_HEAD *head\" \"TYPE *elm\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_NEXT \"TYPE *elm\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn SLIST_REMOVE_AFTER \"TYPE *elm\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE_HEAD \"SLIST_HEAD *head\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE \"SLIST_HEAD *head\" \"TYPE *elm\" \"TYPE\" \"SLIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn SLIST_SWAP \"SLIST_HEAD *head1\" \"SLIST_HEAD *head2\" \"SLIST_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_CONCAT \"STAILQ_HEAD *head1\" \"STAILQ_HEAD *head2\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_EMPTY \"STAILQ_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_ENTRY \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_FIRST \"STAILQ_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_FOREACH \"TYPE *var\" \"STAILQ_HEAD *head\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_FOREACH_FROM \"TYPE *var\" \"STAILQ_HEAD *head\" \"STAILQ_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_FOREACH_SAFE \"TYPE *var\" \"STAILQ_HEAD *head\" \"STAILQ_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_FOREACH_FROM_SAFE \"TYPE *var\" \"STAILQ_HEAD *head\" \"STAILQ_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD \"HEADNAME\" \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD_INITIALIZER \"STAILQ_HEAD head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INIT \"STAILQ_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_AFTER \"STAILQ_HEAD *head\" \"TYPE *listelm\" \"TYPE *elm\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_HEAD \"STAILQ_HEAD *head\" \"TYPE *elm\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_TAIL \"STAILQ_HEAD *head\" \"TYPE *elm\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_LAST \"STAILQ_HEAD *head\" \"TYPE\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_NEXT \"TYPE *elm\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_REMOVE_AFTER \"STAILQ_HEAD *head\" \"TYPE *elm\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE_HEAD \"STAILQ_HEAD *head\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE \"STAILQ_HEAD *head\" \"TYPE *elm\" \"TYPE\" \"STAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_SWAP \"STAILQ_HEAD *head1\" \"STAILQ_HEAD *head2\" \"STAILQ_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_EMPTY \"LIST_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_ENTRY \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_FIRST \"LIST_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_FOREACH \"TYPE *var\" \"LIST_HEAD *head\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn LIST_FOREACH_FROM \"TYPE *var\" \"LIST_HEAD *head\" \"LIST_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn LIST_FOREACH_SAFE \"TYPE *var\" \"LIST_HEAD *head\" \"LIST_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn LIST_FOREACH_FROM_SAFE \"TYPE *var\" \"LIST_HEAD *head\" \"LIST_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD \"HEADNAME\" \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD_INITIALIZER \"LIST_HEAD head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INIT \"LIST_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_AFTER \"TYPE *listelm\" \"TYPE *elm\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_BEFORE \"TYPE *listelm\" \"TYPE *elm\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_HEAD \"LIST_HEAD *head\" \"TYPE *elm\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_NEXT \"TYPE *elm\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn LIST_PREV \"TYPE *elm\" \"LIST_HEAD *head\" \"TYPE\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_REMOVE \"TYPE *elm\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_SWAP \"LIST_HEAD *head1\" \"LIST_HEAD *head2\" \"TYPE\" \"LIST_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_CONCAT \"TAILQ_HEAD *head1\" \"TAILQ_HEAD *head2\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_EMPTY \"TAILQ_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_ENTRY \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FIRST \"TAILQ_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FOREACH \"TYPE *var\" \"TAILQ_HEAD *head\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn TAILQ_FOREACH_FROM \"TYPE *var\" \"TAILQ_HEAD *head\" \"TAILQ_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn TAILQ_FOREACH_SAFE \"TYPE *var\" \"TAILQ_HEAD *head\" \"TAILQ_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn TAILQ_FOREACH_FROM_SAFE \"TYPE *var\" \"TAILQ_HEAD *head\" \"TAILQ_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FOREACH_REVERSE \"TYPE *var\" \"TAILQ_HEAD *head\" \"HEADNAME\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn TAILQ_FOREACH_REVERSE_FROM \"TYPE *var\" \"TAILQ_HEAD *head\" \"HEADNAME\" \"TAILQ_ENTRY NAME\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn TAILQ_FOREACH_REVERSE_SAFE \"TYPE *var\" \"TAILQ_HEAD *head\" \"HEADNAME\" \"TAILQ_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn TAILQ_FOREACH_REVERSE_FROM_SAFE \"TYPE *var\" \"TAILQ_HEAD *head\" \"HEADNAME\" \"TAILQ_ENTRY NAME\" \"TYPE *temp_var\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD \"HEADNAME\" \"TYPE\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD_INITIALIZER \"TAILQ_HEAD head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INIT \"TAILQ_HEAD *head\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_AFTER \"TAILQ_HEAD *head\" \"TYPE *listelm\" \"TYPE *elm\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_BEFORE \"TYPE *listelm\" \"TYPE *elm\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_HEAD \"TAILQ_HEAD *head\" \"TYPE *elm\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_TAIL \"TAILQ_HEAD *head\" \"TYPE *elm\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_LAST \"TAILQ_HEAD *head\" \"HEADNAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_NEXT \"TYPE *elm\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_PREV \"TYPE *elm\" \"HEADNAME\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_REMOVE \"TAILQ_HEAD *head\" \"TYPE *elm\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Fn",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_SWAP \"TAILQ_HEAD *head1\" \"TAILQ_HEAD *head2\" \"TYPE\" \"TAILQ_ENTRY NAME\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Sh",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These macros define and operate on four types of data structures:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "singly-linked lists, singly-linked tail queues, lists, and tail queues."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "All four structures support the following functionality:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Insertion of a new entry at the head of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Insertion of a new entry after any element in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "O(1) removal of an entry from the head of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Forward traversal through the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Swapping the contents of two lists."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Singly-linked lists are the simplest of the four data structures"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and support only the above functionality."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Singly-linked lists are ideal for applications with large datasets"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and few or no removals,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or for implementing a LIFO queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Singly-linked lists add the following functionality:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "O(n) removal of any entry in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Singly-linked tail queues add the following functionality:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Entries can be added at the end of a list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "O(n) removal of any entry in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "They may be concatenated."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "However:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All list insertions must specify the head of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each head entry requires two pointers rather than one."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Code size is about 15% greater and operations run about 20% slower"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "than singly-linked lists."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Singly-linked tail queues are ideal for applications with large datasets and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "few or no removals,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or for implementing a FIFO queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All doubly linked types of data structures (lists and tail queues)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "additionally allow:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Insertion of a new entry before any element in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "O(1) removal of any entry in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "However:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each element requires two pointers rather than one."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Code size and execution time of operations (except for removal) is about"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "twice that of the singly-linked data-structures."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Linked lists are the simplest of the doubly linked data structures."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "They add the following functionality over the above:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "They may be traversed backwards."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "However:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To traverse backwards, an entry to begin the traversal and the list in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which it is contained must be specified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Tail queues add the following functionality:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Entries can be added at the end of a list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "They may be traversed backwards, from tail to head."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "They may be concatenated."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "However:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bl",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -enum -compact -offset indent"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All list insertions and removals must specify the head of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each head entry requires two pointers rather than one."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".It",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Code size is about 15% greater and operations run about 20% slower"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "than singly-linked lists."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".El",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the macro definitions,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the name of a user defined structure,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that must contain a field of type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_ENTRY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_ENTRY ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_ENTRY ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_ENTRY ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "named"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NAME ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The argument"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HEADNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the name of a user defined structure that must be declared"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the macros"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the examples below for further explanation of how these"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macros are used."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Singly-linked lists"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A singly-linked list is headed by a structure defined by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This structure contains a single pointer to the first element"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The elements are singly linked for minimum space and pointer manipulation"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "overhead at the expense of O(n) removal for arbitrary elements."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New elements can be added to the list after an existing element or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the head of the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure is declared as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "SLIST_HEAD(HEADNAME, TYPE) head;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HEADNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the name of the structure to be defined, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the type of the elements to be linked into the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A pointer to the head of the list can later be declared as:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "struct HEADNAME *headp;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(The names"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " headp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are user selectable.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_HEAD_INITIALIZER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to an initializer for the list"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_EMPTY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to true if there are no elements in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_ENTRY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "declares a structure that connects the elements in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_FIRST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the first element in the list or NULL if the list is empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_FOREACH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "traverses the list referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the forward direction, assigning each element in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "turn to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " var ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_FROM"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found SLIST element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the SLIST referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traverses the list referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in the forward direction, assigning each element in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" turn to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, unlike"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn SLIST_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" here it is permitted to both remove"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as well as free it from within the loop safely without interfering with the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traversal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_FROM_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found SLIST element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the SLIST referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initializes the list referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INSERT_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the head of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_INSERT_AFTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listelm ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_NEXT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the next element in the list."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_REMOVE_AFTER"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" removes the element after"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa elm"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" from the list."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Unlike"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa SLIST_REMOVE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" this macro does not traverse the entire list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the head of the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For optimum efficiency,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "elements being removed from the head of the list should explicitly use"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this macro instead of the generic"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SLIST_REMOVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the list."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm SLIST_SWAP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" swaps the contents of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head1"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head2 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Singly-linked list example"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "SLIST_HEAD(slisthead, entry) head ="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    SLIST_HEAD_INITIALIZER(head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct slisthead *headp;\t\t/* Singly-linked List"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                           head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct entry {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tSLIST_ENTRY(entry) entries;\t/* Singly-linked List. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} *n1, *n2, *n3, *np;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "SLIST_INIT(&head);\t\t\t/* Initialize the list. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = malloc(sizeof(struct entry));\t/* Insert at the head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SLIST_INSERT_HEAD(&head, n1, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n2 = malloc(sizeof(struct entry));\t/* Insert after. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SLIST_INSERT_AFTER(n1, n2, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "SLIST_REMOVE(&head, n2, entry, entries);/* Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "free(n2);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n3 = SLIST_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SLIST_REMOVE_HEAD(&head, entries);\t/* Deletion from the head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "free(n3);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Forward traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "SLIST_FOREACH(np, &head, entries)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tnp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t\t\t\t\t/* Safe forward traversal. */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"SLIST_FOREACH_SAFE(np, &head, entries, np_temp) {"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tnp\\->do_stuff();"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t..."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tSLIST_REMOVE(&head, np, entry, entries);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tfree(np);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "while (!SLIST_EMPTY(&head)) {\t\t/* List Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = SLIST_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tSLIST_REMOVE_HEAD(&head, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Singly-linked tail queues"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A singly-linked tail queue is headed by a structure defined by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This structure contains a pair of pointers,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "one to the first element in the tail queue and the other to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the last element in the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The elements are singly linked for minimum space and pointer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "manipulation overhead at the expense of O(n) removal for arbitrary"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "elements."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New elements can be added to the tail queue after an existing element,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the head of the tail queue, or at the end of the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure is declared as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "STAILQ_HEAD(HEADNAME, TYPE) head;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HEADNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the name of the structure to be defined, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the type of the elements to be linked into the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A pointer to the head of the tail queue can later be declared as:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "struct HEADNAME *headp;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(The names"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " headp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are user selectable.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_HEAD_INITIALIZER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to an initializer for the tail queue"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_CONCAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "concatenates the tail queue headed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "onto the end of the one headed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removing all entries from the former."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_EMPTY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to true if there are no items on the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_ENTRY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "declares a structure that connects the elements in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_FIRST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the first item on the tail queue or NULL if the tail queue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_FOREACH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "traverses the tail queue referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the forward direction, assigning each element"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in turn to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " var ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_FROM"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found STAILQ element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the STAILQ referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traverses the tail queue referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in the forward direction, assigning each element"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in turn to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, unlike"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn STAILQ_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" here it is permitted to both remove"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as well as free it from within the loop safely without interfering with the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traversal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_FROM_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found STAILQ element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the STAILQ referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initializes the tail queue referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the head of the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_TAIL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the end of the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_INSERT_AFTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listelm ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_LAST"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" returns the last item on the tail queue."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If the tail queue is empty the return value is"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Dv NULL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_NEXT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the next item on the tail queue, or NULL this item is the last."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_REMOVE_AFTER"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" removes the element after"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa elm"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" from the tail queue."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Unlike"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa STAILQ_REMOVE ,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" this macro does not traverse the entire tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the element at the head of the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For optimum efficiency,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "elements being removed from the head of the tail queue should"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "use this macro explicitly rather than the generic"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " STAILQ_REMOVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the tail queue."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm STAILQ_SWAP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" swaps the contents of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head1"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head2 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Singly-linked tail queue example"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "STAILQ_HEAD(stailhead, entry) head ="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    STAILQ_HEAD_INITIALIZER(head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct stailhead *headp;\t\t/* Singly-linked tail queue head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct entry {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tSTAILQ_ENTRY(entry) entries;\t/* Tail queue. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} *n1, *n2, *n3, *np;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "STAILQ_INIT(&head);\t\t\t/* Initialize the queue. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = malloc(sizeof(struct entry));\t/* Insert at the head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_INSERT_HEAD(&head, n1, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = malloc(sizeof(struct entry));\t/* Insert at the tail. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_INSERT_TAIL(&head, n1, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n2 = malloc(sizeof(struct entry));\t/* Insert after. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_INSERT_AFTER(&head, n1, n2, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_REMOVE(&head, n2, entry, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "free(n2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Deletion from the head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "n3 = STAILQ_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_REMOVE_HEAD(&head, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "free(n3);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Forward traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_FOREACH(np, &head, entries)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tnp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t\t\t\t\t/* Safe forward traversal. */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"STAILQ_FOREACH_SAFE(np, &head, entries, np_temp) {"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tnp\\->do_stuff();"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t..."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tSTAILQ_REMOVE(&head, np, entry, entries);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tfree(np);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"}"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* TailQ Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while (!STAILQ_EMPTY(&head)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = STAILQ_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tSTAILQ_REMOVE_HEAD(&head, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Faster TailQ Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "n1 = STAILQ_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while (n1 != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn2 = STAILQ_NEXT(n1, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = n2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "STAILQ_INIT(&head);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Lists"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A list is headed by a structure defined by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This structure contains a single pointer to the first element"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The elements are doubly linked so that an arbitrary element can be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removed without traversing the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New elements can be added to the list after an existing element,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before an existing element, or at the head of the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure is declared as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "LIST_HEAD(HEADNAME, TYPE) head;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HEADNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the name of the structure to be defined, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the type of the elements to be linked into the list."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A pointer to the head of the list can later be declared as:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "struct HEADNAME *headp;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(The names"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " headp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are user selectable.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_HEAD_INITIALIZER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to an initializer for the list"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_EMPTY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to true if there are no elements in the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_ENTRY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "declares a structure that connects the elements in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_FIRST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the first element in the list or NULL if the list"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_FOREACH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "traverses the list referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the forward direction, assigning each element in turn to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " var ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_FROM"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found LIST element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the LIST referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traverses the list referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in the forward direction, assigning each element in turn to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, unlike"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fn LIST_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" here it is permitted to both remove"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as well as free it from within the loop safely without interfering with the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traversal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_FROM_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found LIST element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the LIST referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initializes the list referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the head of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_AFTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listelm ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_INSERT_BEFORE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listelm ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_NEXT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the next element in the list, or NULL if this is the last."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_PREV"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" returns the previous element in the list, or NULL if this is the first."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" List"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" must contain element"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa elm ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LIST_REMOVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the list."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm LIST_SWAP"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" swaps the contents of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head1"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head2 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " List example"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "LIST_HEAD(listhead, entry) head ="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    LIST_HEAD_INITIALIZER(head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct listhead *headp;\t\t\t/* List head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct entry {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tLIST_ENTRY(entry) entries;\t/* List. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} *n1, *n2, *n3, *np, *np_temp;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "LIST_INIT(&head);\t\t\t/* Initialize the list. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = malloc(sizeof(struct entry));\t/* Insert at the head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "LIST_INSERT_HEAD(&head, n1, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n2 = malloc(sizeof(struct entry));\t/* Insert after. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "LIST_INSERT_AFTER(n1, n2, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n3 = malloc(sizeof(struct entry));\t/* Insert before. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "LIST_INSERT_BEFORE(n2, n3, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "LIST_REMOVE(n2, entries);\t\t/* Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "free(n2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Forward traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "LIST_FOREACH(np, &head, entries)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tnp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \t\t\t\t\t/* Safe forward traversal. */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" LIST_FOREACH_SAFE(np, &head, entries, np_temp) {"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \tnp\\->do_stuff();"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \t..."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \tLIST_REMOVE(np, entries);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \tfree(np);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" }"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "while (!LIST_EMPTY(&head)) {\t\t/* List Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = LIST_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tLIST_REMOVE(n1, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = LIST_FIRST(&head);\t\t\t/* Faster List Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while (n1 != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn2 = LIST_NEXT(n1, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = n2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "LIST_INIT(&head);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Tail queues"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A tail queue is headed by a structure defined by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This structure contains a pair of pointers,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "one to the first element in the tail queue and the other to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the last element in the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The elements are doubly linked so that an arbitrary element can be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removed without traversing the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New elements can be added to the tail queue after an existing element,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before an existing element, at the head of the tail queue,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or at the end of the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure is declared as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "TAILQ_HEAD(HEADNAME, TYPE) head;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HEADNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the name of the structure to be defined, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the type of the elements to be linked into the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A pointer to the head of the tail queue can later be declared as:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal -offset indent"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "struct HEADNAME *headp;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(The names"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Li",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " headp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are user selectable.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_HEAD_INITIALIZER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to an initializer for the tail queue"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_CONCAT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "concatenates the tail queue headed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "onto the end of the one headed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removing all entries from the former."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_EMPTY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "evaluates to true if there are no items on the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_ENTRY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "declares a structure that connects the elements in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FIRST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the first item on the tail queue or NULL if the tail queue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FOREACH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "traverses the tail queue referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the forward direction, assigning each element in turn to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " var ."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " var"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Dv",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NULL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the loop completes normally, or if there were no elements."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_FROM"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found TAILQ element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the TAILQ referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_FOREACH_REVERSE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "traverses the tail queue referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the reverse direction, assigning each element in turn to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " var ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_FROM"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found TAILQ element and begins the reverse loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the last element in the TAILQ referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macros"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traverse the list referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in the forward or reverse direction respectively,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" assigning each element in turn to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" However, unlike their unsafe counterparts,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permit to both remove"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as well as free it from within the loop safely without interfering with the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" traversal."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_FROM_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found TAILQ element and begins the loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the first element in the TAILQ referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Pp"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The macro"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_FROM_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" behaves identically to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Nm TAILQ_FOREACH_REVERSE_SAFE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is NULL, else it treats"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" as a previously found TAILQ element and begins the reverse loop at"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa var"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" instead of the last element in the TAILQ referenced by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Fa head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "initializes the tail queue referenced by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_HEAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the head of the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_TAIL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at the end of the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_AFTER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listelm ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_INSERT_BEFORE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserts the new element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " listelm ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_LAST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the last item on the tail queue."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the tail queue is empty the return value is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Dv",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " NULL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_NEXT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the next item on the tail queue, or NULL if this item is the last."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_PREV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the previous item on the tail queue, or NULL if this item"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the first."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_REMOVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the element"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elm"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from the tail queue."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Pp",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The macro"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TAILQ_SWAP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "swaps the contents of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Fa",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " head2 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ss",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Tail queue example"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bd",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -literal"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "TAILQ_HEAD(tailhead, entry) head ="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    TAILQ_HEAD_INITIALIZER(head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct tailhead *headp;\t\t\t/* Tail queue head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct entry {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tTAILQ_ENTRY(entry) entries;\t/* Tail queue. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} *n1, *n2, *n3, *np;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "TAILQ_INIT(&head);\t\t\t/* Initialize the queue. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = malloc(sizeof(struct entry));\t/* Insert at the head. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TAILQ_INSERT_HEAD(&head, n1, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n1 = malloc(sizeof(struct entry));\t/* Insert at the tail. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TAILQ_INSERT_TAIL(&head, n1, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n2 = malloc(sizeof(struct entry));\t/* Insert after. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TAILQ_INSERT_AFTER(&head, n1, n2, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "n3 = malloc(sizeof(struct entry));\t/* Insert before. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TAILQ_INSERT_BEFORE(n2, n3, entries);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "TAILQ_REMOVE(&head, n2, entries);\t/* Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "free(n2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Forward traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TAILQ_FOREACH(np, &head, entries)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tnp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \t\t\t\t\t/* Safe forward traversal. */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" TAILQ_FOREACH_SAFE(np, &head, entries, np_temp) {"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \tnp\\->do_stuff();"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \t..."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \tTAILQ_REMOVE(&head, np, entries);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" \tfree(np);"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" }"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Reverse traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "TAILQ_FOREACH_REVERSE(np, &head, tailhead, entries)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tnp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* TailQ Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while (!TAILQ_EMPTY(&head)) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = TAILQ_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tTAILQ_REMOVE(&head, n1, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\t\t\t\t\t/* Faster TailQ Deletion. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "n1 = TAILQ_FIRST(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while (n1 != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn2 = TAILQ_NEXT(n1, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tfree(n1);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\tn1 = n2;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "TAILQ_INIT(&head);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "n2 = malloc(sizeof(struct entry));  /* Insert before. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "CIRCLEQ_INSERT_BEFORE(&head, n1, n2, entries);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                    /* Forward traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for (np = head.cqh_first; np != (void *)&head;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        np = np"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">entries.cqe_next)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    np"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                    /* Reverse traversal. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for (np = head.cqh_last; np != (void *)&head; np = np"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">entries.cqe_prev)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    np"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "> ..."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                    /* Delete. */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "while (head.cqh_first != (void *)&head)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    CIRCLEQ_REMOVE(&head, head.cqh_first, entries);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Ed",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Sh",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Not in POSIX.1, POSIX.1-2001 or POSIX.1-2008."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Present on the BSDs."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".Nm",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " queue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions first appeared in"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Bx",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4.4 ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".Sh",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".Xr insque 3"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .Xr tree 3"
        }
      ]
    ]
  }
]
