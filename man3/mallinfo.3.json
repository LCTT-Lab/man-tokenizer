[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": "'\\\" t"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLINFO 3  2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "mallinfo "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " obtain memory allocation information"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <malloc.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " struct mallinfo mallinfo(void);"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns a copy of a structure containing information about"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "memory allocations performed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and related functions."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This structure is defined as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct mallinfo {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int arena;     /* Non-mmapped space allocated (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int ordblks;   /* Number of free chunks */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int smblks;    /* Number of free fastbin blocks */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int hblks;     /* Number of mmapped regions */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int hblkhd;    /* Space allocated in mmapped regions (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int usmblks;   /* Maximum total allocated space (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int fsmblks;   /* Space in freed fastbin blocks (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int uordblks;  /* Total allocated space (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int fordblks;  /* Total free space (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int keepcost;  /* Top-most, releasable space (bytes) */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The fields of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure contain the following information:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 10"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arena"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The total amount of memory allocated by means other than"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., memory allocated on the heap)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This figure includes both in-use blocks and blocks on the free list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ordblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of ordinary (i.e., non-fastbin) free blocks."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " smblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of fastbin free blocks (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt (3))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of blocks currently allocated using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(See the discussion of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt (3).)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hblkhd"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number of bytes in blocks currently allocated using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " usmblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The \"highwater mark\" for allocated space"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "that is,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the maximum amount of space that was ever allocated."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field is maintained only in nonthreading environments."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fsmblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The total number of bytes in fastbin free blocks."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " uordblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The total number of bytes used by in-use allocations."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fordblks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The total number of bytes in free blocks."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " keepcost"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The total amount of releasable free space at the top"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the heap."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is the maximum number of bytes that could ideally"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., ignoring page alignment restrictions, and so on) be released by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_trim (3)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH VERSIONS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Available already in glibc 2.0, possibly earlier"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lb lb lbw28"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Unsafe init const:mallopt"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".sp",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would access some global internal objects."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If modify them with non-atomically,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may get inconsistent results."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The identifier"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " const:mallopt"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mean that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "would modify the global internal objects with atomics, that make sure"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is safe enough, others modify with non-atomically maybe not."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This function is not specified by POSIX or the C standards."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A similar function exists on many System V derivatives,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and was specified in the SVID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . http://sourceware.org/bugzilla/show_bug.cgi?id=208"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" See the 24 Aug 2011 mail by Paul Pluzhnikov:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     \"[patch] Fix mallinfo() to accumulate results for all arenas\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" on libc-alpha@sourceware.org"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Information is returned for only the main memory allocation area."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Allocations in other arenas are excluded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_stats (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for alternatives that include information about other arenas."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The fields of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure are typed as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " int ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, because some internal bookkeeping values may be of type"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " long ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the reported values may wrap around zero and thus be inaccurate."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below employs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to retrieve memory allocation statistics before and after"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allocating and freeing some blocks of memory."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The statistics are displayed on standard output."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The first two command-line arguments specify the number and size of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "blocks to be allocated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The remaining three arguments specify which of the allocated blocks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should be freed with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "These three arguments are optional, and specify (in order):"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the step size to be used in the loop that frees blocks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the default is 1, meaning free all blocks in the range);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the ordinal position of the first block to be freed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(default 0, meaning the first allocated block);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and a number one greater than the ordinal position"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the last block to be freed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(default is one greater than the maximum block number)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If these three arguments are omitted,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the defaults cause all allocated blocks to be freed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the following example run of the program,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "1000 allocations of 100 bytes are performed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and then every second allocated block is freed:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out 1000 100 2"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "============== Before allocating blocks =============="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total non"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "mmapped bytes (arena):       0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of free chunks (ordblks):            1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of free fastbin blocks (smblks):     0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of mapped regions (hblks):           0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bytes in mapped regions (hblkhd):      0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Max. total allocated space (usmblks):  0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Free bytes held in fastbins (fsmblks): 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total allocated space (uordblks):      0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total free space (fordblks):           0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Topmost releasable block (keepcost):   0"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "============== After allocating blocks =============="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total non"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "mmapped bytes (arena):       135168"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of free chunks (ordblks):            1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of free fastbin blocks (smblks):     0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of mapped regions (hblks):           0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bytes in mapped regions (hblkhd):      0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Max. total allocated space (usmblks):  0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Free bytes held in fastbins (fsmblks): 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total allocated space (uordblks):      104000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total free space (fordblks):           31168"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Topmost releasable block (keepcost):   31168"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "============== After freeing blocks =============="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total non"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "mmapped bytes (arena):       135168"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of free chunks (ordblks):            501"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of free fastbin blocks (smblks):     0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "# of mapped regions (hblks):           0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bytes in mapped regions (hblkhd):      0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Max. total allocated space (usmblks):  0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Free bytes held in fastbins (fsmblks): 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total allocated space (uordblks):      52000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total free space (fordblks):           83168"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Topmost releasable block (keepcost):   31168"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <malloc.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "display_mallinfo(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct mallinfo mi;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    mi = mallinfo();"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Total non"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "mmapped bytes (arena):       %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.arena);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"# of free chunks (ordblks):            %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.ordblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"# of free fastbin blocks (smblks):     %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.smblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"# of mapped regions (hblks):           %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.hblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Bytes in mapped regions (hblkhd):      %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.hblkhd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Max. total allocated space (usmblks):  %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.usmblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Free bytes held in fastbins (fsmblks): %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.fsmblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Total allocated space (uordblks):      %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.uordblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Total free space (fordblks):           %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.fordblks);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Topmost releasable block (keepcost):   %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", mi.keepcost);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define MAX_ALLOCS 2000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *alloc[MAX_ALLOCS];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int numBlocks, j, freeBegin, freeEnd, freeStep;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    size_t blockSize;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc < 3 || strcmp(argv[1], \""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "help\") == 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"%s num"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "blocks block"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "size [free"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "step \""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                \"[start"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "free [end"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "free]]]"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    numBlocks = atoi(argv[1]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    blockSize = atoi(argv[2]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    freeStep = (argc > 3) ? atoi(argv[3]) : 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    freeBegin = (argc > 4) ? atoi(argv[4]) : 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    freeEnd = (argc > 5) ? atoi(argv[5]) : numBlocks;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"============== Before allocating blocks =============="
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    display_mallinfo();"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (j = 0; j < numBlocks; j++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (numBlocks >= MAX_ALLOCS) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr, \"Too many allocations"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        alloc[j] = malloc(blockSize);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (alloc[j] == NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"malloc\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n============== After allocating blocks =============="
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    display_mallinfo();"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (j = freeBegin; j < freeEnd; j += freeStep)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        free(alloc[j]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n============== After freeing blocks =============="
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    display_mallinfo();"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nh",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_stats (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_trim (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt (3)"
        }
      ]
    ]
  }
]
