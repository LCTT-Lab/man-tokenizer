[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright 1995 by Jim Van Zandt <jrv@vanzandt.mv.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TSEARCH 3  2018-04-30 \"GNU\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "tsearch, tfind, tdelete, twalk, tdestroy "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " manage a binary search tree"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <search.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void *tsearch(const void *\" key \", void **\" rootp ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                int (*\" compar \")(const void *, const void *));\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void *tfind(const void *\" key \", void *const *\" rootp ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                int (*\" compar \")(const void *, const void *));\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void *tdelete(const void *\" key \", void **\" rootp ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                int (*\" compar \")(const void *, const void *));\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void twalk(const void *\" root \", void (*\" action \")(const void *\" nodep ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                                   const VISIT \" which ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                                   const int \" depth \"));\""
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"#define _GNU_SOURCE\" \"         /* See feature_test_macros(7) */\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <search.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void tdestroy(void *\" root \", void (*\" free_node \")(void *\" nodep ));"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tfind (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " twalk (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "manage a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "binary search tree."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "They are generalized from Knuth (6.2.2) Algorithm T."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first field in each node of the tree is a pointer to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "corresponding data item."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The calling program must store the actual data.)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " compar"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to a comparison routine, which takes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointers to two items."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It should return an integer which is negative,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "zero, or positive, depending on whether the first item is less than,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "equal to, or greater than the second."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "searches the tree for an item."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to the item to be searched for."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rootp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to a variable which points to the root of the tree."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the tree is empty,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the variable that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rootp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to should be set to NULL."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the item is found in the tree, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a pointer"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the corresponding tree node."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(In other words,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a pointer to a pointer to the data item.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the item is not found, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "adds it, and returns a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pointer to the corresponding tree node."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tfind ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is like"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "except that if the item is not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "found, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tfind ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns NULL."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "deletes an item from the tree."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Its arguments are the same as for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " twalk ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "performs depth-first, left-to-right traversal of a binary"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tree."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " root"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to the starting node for the traversal."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If that node is not the root, then only part of the tree will be visited."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " twalk ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls the user function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " action"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "each time a node is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "visited (that is, three times for an internal node, and once for a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "leaf)."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " action ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in turn, takes three arguments."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first argument is a pointer to the node being visited."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The structure of the node is unspecified,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but it is possible to cast the pointer to a pointer-to-pointer-to-element"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in order to access the element stored within the node."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The application must not modify the structure pointed to by this argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The second argument is an integer which"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "takes one of the values"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " preorder ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " postorder ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " endorder"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "depending on whether this is the first, second, or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "third visit to the internal node,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " leaf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if this is the single visit to a leaf node."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(These symbols are defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <search.h> .)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The third argument is the depth of the node;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the root node has depth zero."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(More commonly,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " preorder ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " postorder ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " endorder"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are known as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " preorder ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inorder ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " postorder :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before visiting the children, after the first and before the second,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and after visiting the children."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus, the choice of name"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " post"
        },
        {
          "type": "ESCAPE",
          "content": "\\%"
        },
        {
          "type": "TEXT",
          "content": "order"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is rather confusing.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdestroy ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "removes the whole tree pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " root ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "freeing all resources allocated by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For the data in each tree node the function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free_node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The pointer to the data is passed as the argument to the function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If no such work is necessary,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free_node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must point to a function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "doing nothing."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a pointer to a matching node in the tree, or to"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the newly added node, or NULL if there was insufficient memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to add the item."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tfind ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a pointer to the node, or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "NULL if no match is found."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If there are multiple items that match the key,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the item whose node is returned is unspecified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a pointer to the parent of the node deleted, or"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "NULL if the item was not found."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the deleted node was the root node,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a dangling pointer that must not be accessed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tfind (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "also"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return NULL if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rootp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was NULL on entry."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lb lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tsearch (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tfind (),"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".br",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe race:rootp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " twalk ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe race:root"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdestroy ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX.1-2001, POSIX.1-2008, SVr4."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdestroy ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a GNU extension."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " twalk ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "takes a pointer to the root, while the other functions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "take a pointer to a variable which points to the root."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " tdelete ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "frees the memory required for the node in the tree."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The user is responsible for freeing the memory for the corresponding"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The example program depends on the fact that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " twalk ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "makes no"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "further reference to a node after calling the user function with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument \"endorder\" or \"leaf\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This works with the GNU library"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "implementation, but is not in the System V documentation."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following program inserts twelve random numbers into a binary"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tree, where duplicate numbers are collapsed, then prints the numbers"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in order."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE     /* Expose declaration of tdestroy() */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <search.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <time.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void *root = NULL;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void *"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "xmalloc(unsigned n)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    void *p;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    p = malloc(n);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (p)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return p;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"insufficient memory"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "compare(const void *pa, const void *pb)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (*(int *) pa < *(int *) pb)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (*(int *) pa > *(int *) pb)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    return 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "action(const void *nodep, const VISIT which, const int depth)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int *datap;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    switch (which) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    case preorder:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    case postorder:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        datap = *(int **) nodep;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"%6d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", *datap);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    case endorder:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    case leaf:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        datap = *(int **) nodep;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"%6d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", *datap);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int i, *ptr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    void *val;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    srand(time(NULL));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    for (i = 0; i < 12; i++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ptr = xmalloc(sizeof(int));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        *ptr = rand() & 0xff;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        val = tsearch((void *) ptr, &root, compare);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (val == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        else if ((*(int **) val) != ptr)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            free(ptr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    twalk(root, action);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    tdestroy(root, free);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bsearch (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hsearch (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lsearch (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " qsort (3)"
        }
      ]
    ]
  }
]
