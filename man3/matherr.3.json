[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": "'\\\" t"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2008, Linux Foundation, written by Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MATHERR 3 2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "matherr "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " SVID math library exception handling"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <math.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int matherr(struct exception *\" exc );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " extern _LIB_VERSION_TYPE _LIB_VERSION;"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Link with "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "I"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "lm"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the mechanism described in this page is no longer supported by glibc."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Before glibc 2.27, it had been marked as obsolete."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since glibc 2.27,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" glibc commit 813378e9fe17e029caf627cab76fe23eb46815fa"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "the mechanism has been removed altogether."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "New applications should use the techniques described in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " math_error (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fenv (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This page documents the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mechanism as an aid for maintaining and porting older applications."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The System V Interface Definition (SVID) specifies that various"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "math functions should invoke a function called"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if a math exception is detected."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This function is called before the math function returns;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns, the system then returns to the math function,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which in turn returns to the caller."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the programmer must define the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _SVID_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "feature test macro"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(before including"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "header files),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and assign the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _SVID_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the external variable"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _LIB_VERSION ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The system provides a default version of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This version does nothing, and returns zero"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see below for the significance of this)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be overridden by a programmer-defined"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "version, which will be invoked when an exception occurs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The function is invoked with one argument, a pointer to an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exception"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure, defined as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct exception {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int    type;      /* Exception type */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char  *name;      /* Name of function causing exception */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    double arg1;      /* 1st argument to function */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    double arg2;      /* 2nd argument to function */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    double retval;    /* Function return value */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field has one of the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 12"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DOMAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A domain error occurred (the function argument was outside the range"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for which the function is defined)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The return value depends on the function;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EDOM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SING"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A pole error occurred (the function result is an infinity)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The return value in most cases is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HUGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(the largest single precision floating-point number),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "appropriately signed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In most cases,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EDOM ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " OVERFLOW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An overflow occurred."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In most cases, the value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " HUGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ERANGE ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " UNDERFLOW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An underflow occurred."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "0.0 is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ERANGE ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " TLOSS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Total loss of significance."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "0.0 is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ERANGE ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PLOSS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Partial loss of significance."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This value is unused on glibc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(and many other systems)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " arg2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields are the arguments supplied to the function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( arg2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is undefined for functions that take only one argument)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " retval"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field specifies the return value that the math"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function will return to its caller."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The programmer-defined"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can modify this field to change the return value of the math function."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns zero, then the system sets"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as described above, and may print an error message on standard error"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see below)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns a nonzero value, then the system does not set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and doesn't print an error message."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Math functions that employ matherr()"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The table below lists the functions and circumstances in which"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The \"Type\" column indicates the value assigned to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The \"Result\" column is the default return value assigned to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">retval ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The \"Msg?\" and \"errno\" columns describe the default behavior if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns zero."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the \"Msg?\" columns contains \"y\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the system prints an error message on standard error."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The table uses the following notations and abbreviations:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "x        first argument to function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y        second argument to function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fin      finite value for argument"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "neg      negative value for argument"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int      integral value for argument"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "o/f      result overflowed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "u/f      result underflowed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "|x|      absolute value of x"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "X_TLOSS  is a constant defined in "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "I<math.h>"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Details below from glibc 2.8's sysdeps/ieee754/k_standard.c"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" A subset of cases were test by experimental programs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "lB lB lB cB lB"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l c l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Function\tType\tResult\tMsg?\terrno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "acos(|x|>1)\tDOMAIN\tHUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "asin(|x|>1)\tDOMAIN\tHUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "atan2(0,0)\tDOMAIN\tHUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "acosh(x<1)\tDOMAIN\tNAN\ty\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" retval is 0.0/0.0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "atanh(|x|>1)\tDOMAIN\tNAN\ty\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" retval is 0.0/0.0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "atanh(|x|==1)\tSING\t(x>0.0)?\ty\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" retval is x/0.0"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\tHUGE_VAL :"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE_VAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cosh(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sinh(fin) o/f\tOVERFLOW\t(x>0.0) ?\tn\tERANGE"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\tHUGE : "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sqrt(x<0)\tDOMAIN\t0.0\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "hypot(fin,fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exp(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exp(fin) u/f\tUNDERFLOW\t0.0\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exp2(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exp2(fin) u/f\tUNDERFLOW\t0.0\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exp10(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exp10(fin) u/f\tUNDERFLOW\t0.0\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "j0(|x|>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "j1(|x|>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "jn(|x|>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y0(x>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y1(x>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "yn(x>X_TLOSS)\tTLOSS\t0.0\ty\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y0(0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y0(x<0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y1(0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "y1(x<0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "yn(n,0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "yn(x<0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lgamma(fin) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lgamma("
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "int) or\tSING\tHUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "lgamma(0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tgamma(fin) o/f\tOVERFLOW\tHUGE_VAL\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tgamma("
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "int)\tSING\tNAN\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tgamma(0)\tSING\tcopysign(\ty\tERANGE"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\tHUGE_VAL,x)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log(0)\tSING\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log(x<0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log2(0)\tSING\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\tn\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" different from log()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log2(x<0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\tn\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" different from log()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log10(0)\tSING\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log10(x<0)\tDOMAIN\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pow(0.0,0.0)\tDOMAIN\t0.0\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pow(x,y) o/f\tOVERFLOW\tHUGE\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pow(x,y) u/f\tUNDERFLOW\t0.0\tn\tERANGE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pow(NaN,0.0)\tDOMAIN\tx\tn\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "0**neg\tDOMAIN\t0.0\ty\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" +0 and -0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "neg**non-int\tDOMAIN\t0.0\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "scalb() o/f\tOVERFLOW\t(x>0.0) ?\tn\tERANGE"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\tHUGE_VAL :"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "HUGE_VAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "scalb() u/f\tUNDERFLOW\tcopysign(\tn\tERANGE"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "\t"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "0.0,x)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fmod(x,0)\tDOMAIN\tx\ty\tEDOM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "remainder(x,0)\tDOMAIN\tNAN\ty\tEDOM\t"
        },
        {
          "type": "COMMENT_INLINE",
          "content": "\\\" retval is 0.0/0.0"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lb lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The example program demonstrates the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The program takes up to three command-line arguments."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first argument is the floating-point number to be given to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the optional second argument is provided, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _LIB_VERSION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _SVID_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called, and the integer supplied in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command-line argument is used as the return value from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the optional third command-line argument is supplied,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then it specifies an alternative return value that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should assign as the return value of the math function."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following example run, where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " log (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is given an argument of 0.0, does not use"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ():"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ./a.out 0.0\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "errno: Numerical result out of range"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x=-inf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the following run,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called, and returns 0:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ./a.out 0.0 0\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "matherr SING exception in log() function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        args:   0.000000, 0.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        retval: "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "340282346638528859811704183484516925440.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "log: SING error"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "errno: Numerical argument out of domain"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x=-340282346638528859811704183484516925440.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The message \"log: SING error\" was printed by the C library."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the following run,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called, and returns a nonzero value:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ./a.out 0.0 1\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "matherr SING exception in log() function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        args:   0.000000, 0.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        retval: "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "340282346638528859811704183484516925440.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x=-340282346638528859811704183484516925440.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In this case, the C library did not print a message, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In the following run,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " matherr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is called, changes the return value of the math function,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and returns a nonzero value:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ./a.out 0.0 1 12345.0\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "matherr SING exception in log() function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        args:   0.000000, 0.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        retval: "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "340282346638528859811704183484516925440.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "x=12345.000000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _SVID_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <errno.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <math.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int matherr_ret = 0;     /* Value that matherr()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                   should return */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static int change_retval = 0;   /* Should matherr() change"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                   function"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "s return value? */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static double new_retval;       /* New function return value */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "matherr(struct exception *exc)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"matherr %s exception in %s() function"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           (exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type == DOMAIN) ?    \"DOMAIN\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           (exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type == OVERFLOW) ?  \"OVERFLOW\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           (exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type == UNDERFLOW) ? \"UNDERFLOW\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           (exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type == SING) ?      \"SING\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           (exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type == TLOSS) ?     \"TLOSS\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           (exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">type == PLOSS) ?     \"PLOSS\" : \"???\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">name);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"        args:   %f, %f"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">arg1, exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">arg2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    fprintf(stderr, \"        retval: %f"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">retval);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (change_retval)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exc"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">retval = new_retval;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return matherr_ret;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    double x;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc < 2) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Usage: %s <argval>\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                \" [<matherr"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ret> [<new"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "func"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "retval>]]"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc > 2) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        _LIB_VERSION = _SVID_;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        matherr_ret = atoi(argv[2]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc > 3) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        change_retval = 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        new_retval = atof(argv[3]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    x = log(atof(argv[1]));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (errno != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"errno\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"x=%f"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", x);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " fenv (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " math_error (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " standards (7)"
        }
      ]
    ]
  }
]
