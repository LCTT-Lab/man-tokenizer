[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2003, 2017 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DL_ITERATE_PHDR 3 2017-09-15 \"GNU\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "dl_iterate_phdr "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " walk through list of shared objects"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"#define _GNU_SOURCE\" \"         /* See feature_test_macros(7) */\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <link.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int dl_iterate_phdr(\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          int (*\" callback \") (struct dl_phdr_info *\" info ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                           size_t \" size \", void *\" data \"),\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"          void *\" data \");\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function allows an application to inquire at run time to find"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "out which shared objects it has loaded,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the order in which they were loaded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function walks through the list of an"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "application's shared objects and calls the function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " callback"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "once for each object,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "until either all shared objects have been processed or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " callback"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns a nonzero value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Each call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " callback"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "receives three arguments:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " info ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is a pointer to a structure containing information"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "about the shared object;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is the size of the structure pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " info ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is a copy of whatever value was passed by the calling"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program as the second argument (also named"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " data )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " info"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is a structure of the following type:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct dl_phdr_info {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ElfW(Addr)        dlpi_addr;  /* Base address of object */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    const char       *dlpi_name;  /* (Null-terminated) name of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                     object */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    const ElfW(Phdr) *dlpi_phdr;  /* Pointer to array of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                     ELF program headers"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                     for this object */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ElfW(Half)        dlpi_phnum; /* # of items in "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Idlpi_phdr"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* The following fields were added in glibc 2.4, after the first"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       version of this structure was available.  Check the "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Isize"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       argument passed to the dl_iterate_phdr callback to determine"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       whether or not each later member is available.  */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    unsigned long long int dlpi_adds;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* Incremented when a new object may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       have been added */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    unsigned long long int dlpi_subs;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* Incremented when an object may"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       have been removed */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    size_t dlpi_tls_modid;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* If there is a PT_TLS segment, its module"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       ID as used in TLS relocations, else zero */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    void  *dlpi_tls_data;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    /* The address of the calling thread's instance"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       of this module's PT_TLS segment, if it has"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       one and it has been allocated in the calling"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                       thread, otherwise a null pointer */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ElfW ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "macro definition turns its argument into the name of an ELF data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "type suitable for the hardware architecture."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, on a 32-bit platform,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ElfW(Addr)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "yields the data type name"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Elf32_Addr ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Further information on these types can be found in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <elf.h> \" and \" <link.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "header files.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field indicates the base address of the shared object"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., the difference between the virtual memory address of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the shared object and the offset of that object in the file"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from which it was loaded)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is a null-terminated string giving the pathname"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "from which the shared object was loaded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "To understand the meaning of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_phdr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_phnum"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields, we need to be aware that an ELF shared object consists"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of a number of segments, each of which has a corresponding"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "program header describing the segment."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_phdr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field is a pointer to an array of the program headers for this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "shared object."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_phnum"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field indicates the size of this array."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These program headers are structures of the following form:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "typedef struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Word  p_type;    /* Segment type */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Off   p_offset;  /* Segment file offset */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Addr  p_vaddr;   /* Segment virtual address */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Addr  p_paddr;   /* Segment physical address */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Word  p_filesz;  /* Segment size in file */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Word  p_memsz;   /* Segment size in memory */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Word  p_flags;   /* Segment flags */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Elf32_Word  p_align;   /* Segment alignment */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} Elf32_Phdr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Note that we can calculate the location of a particular program header,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " x ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in virtual memory using the formula:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "addr == info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_addr + info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phdr[x].p_vaddr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Possible values for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " p_type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "include the following (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <elf.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for further details):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_LOAD         1    /* Loadable program segment */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_DYNAMIC      2    /* Dynamic linking information */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_INTERP       3    /* Program interpreter */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_NOTE         4    /* Auxiliary information */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_SHLIB        5    /* Reserved */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_PHDR         6    /* Entry for header table itself */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_TLS          7    /* Thread-local storage segment */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_GNU_EH_FRAME 0x6474e550 /* GCC .eh_frame_hdr segment */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define PT_GNU_STACK  0x6474e551 /* Indicates stack executability */"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" For PT_GNU_STACK, see http://www.airs.com/blog/archives/518"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define PT_GNU_RELRO  0x6474e552 /* Read-only after relocation */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns whatever value was returned by the last call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " callback ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has been supported in glibc since version 2.2.4."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lb lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".sp",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function is not specified in any standard."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Various other systems provide a version of this function,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "although details of the returned"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_phdr_info"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure differ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On the BSDs and Solaris, the structure includes the fields"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_addr ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_name ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_phdr ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_phnum"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in addition to other implementation-specific fields."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Future versions of the C library may add further fields to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_phdr_info"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure; in that event, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " size"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument provides a mechanism for the callback function to discover"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whether it is running on a system with added fields."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The first object visited by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " callback"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the main program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For the main program, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlpi_name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field will be an empty string."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following program displays a list of pathnames of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "shared objects it has loaded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For each shared object, the program lists some information"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(virtual address, size, flags, and type)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for each of the objects ELF segments."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following shell session demonstrates the output"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "produced by the program on an x86-64 system."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The first shared object for which output is displayed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(where the name is an empty string)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the main program."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Name: \"\" (9 segments)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     0: [      0x400040; memsz:    1f8] flags: 0x5; PT_PHDR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     1: [      0x400238; memsz:     1c] flags: 0x4; PT_INTERP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     2: [      0x400000; memsz:    ac4] flags: 0x5; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     3: [      0x600e10; memsz:    240] flags: 0x6; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     4: [      0x600e28; memsz:    1d0] flags: 0x6; PT_DYNAMIC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     5: [      0x400254; memsz:     44] flags: 0x4; PT_NOTE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     6: [      0x400970; memsz:     3c] flags: 0x4; PT_GNU_EH_FRAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     7: [         (nil); memsz:      0] flags: 0x6; PT_GNU_STACK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     8: [      0x600e10; memsz:    1f0] flags: 0x4; PT_GNU_RELRO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Name: \"linux-vdso.so.1\" (4 segments)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     0: [0x7ffc6edd1000; memsz:    e89] flags: 0x5; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     1: [0x7ffc6edd1360; memsz:    110] flags: 0x4; PT_DYNAMIC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     2: [0x7ffc6edd17b0; memsz:     3c] flags: 0x4; PT_NOTE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     3: [0x7ffc6edd17ec; memsz:     3c] flags: 0x4; PT_GNU_EH_FRAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Name: \"/lib64/libc.so.6\" (10 segments)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     0: [0x7f55712ce040; memsz:    230] flags: 0x5; PT_PHDR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     1: [0x7f557145b980; memsz:     1c] flags: 0x4; PT_INTERP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     2: [0x7f55712ce000; memsz: 1b6a5c] flags: 0x5; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     3: [0x7f55716857a0; memsz:   9240] flags: 0x6; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     4: [0x7f5571688b80; memsz:    1f0] flags: 0x6; PT_DYNAMIC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     5: [0x7f55712ce270; memsz:     44] flags: 0x4; PT_NOTE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     6: [0x7f55716857a0; memsz:     78] flags: 0x4; PT_TLS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     7: [0x7f557145b99c; memsz:   544c] flags: 0x4; PT_GNU_EH_FRAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     8: [0x7f55712ce000; memsz:      0] flags: 0x6; PT_GNU_STACK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     9: [0x7f55716857a0; memsz:   3860] flags: 0x4; PT_GNU_RELRO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Name: \"/lib64/ld-linux-x86-64.so.2\" (7 segments)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     0: [0x7f557168f000; memsz:  20828] flags: 0x5; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     1: [0x7f55718afba0; memsz:   15a8] flags: 0x6; PT_LOAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     2: [0x7f55718afe10; memsz:    190] flags: 0x6; PT_DYNAMIC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     3: [0x7f557168f1c8; memsz:     24] flags: 0x4; PT_NOTE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     4: [0x7f55716acec4; memsz:    604] flags: 0x4; PT_GNU_EH_FRAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     5: [0x7f557168f000; memsz:      0] flags: 0x6; PT_GNU_STACK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "     6: [0x7f55718afba0; memsz:    460] flags: 0x4; PT_GNU_RELRO"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <link.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "callback(struct dl_phdr_info *info, size_t size, void *data)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *type;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int p_type, j;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Name: "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "\"%s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "\" (%d segments)"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_name,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phnum);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (j = 0; j < info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phnum; j++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        p_type = info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phdr[j].p_type;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        type =  (p_type == PT_LOAD) ? \"PT_LOAD\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_DYNAMIC) ? \"PT_DYNAMIC\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_INTERP) ? \"PT_INTERP\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_NOTE) ? \"PT_NOTE\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_INTERP) ? \"PT_INTERP\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_PHDR) ? \"PT_PHDR\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_TLS) ? \"PT_TLS\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_GNU_EH_FRAME) ? \"PT_GNU_EH_FRAME\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_GNU_STACK) ? \"PT_GNU_STACK\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (p_type == PT_GNU_RELRO) ? \"PT_GNU_RELRO\" : NULL;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        printf(\"    %2d: [%14p; memsz:%7lx] flags: 0x%x; \", j,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (void *) (info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_addr + info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phdr[j].p_vaddr),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phdr[j].p_memsz,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                info"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">dlpi_phdr[j].p_flags);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (type != NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            printf(\"%s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", type);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            printf(\"[other (0x%x)]"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", p_type);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    dl_iterate_phdr(callback, NULL);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ldd (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " objdump (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " readelf (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dladdr (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " elf (5),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ld.so (8)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"Executable and Linking Format Specification\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "available at various locations online."
        }
      ]
    ]
  }
]
