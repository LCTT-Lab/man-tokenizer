[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2008 Petr Baudis <pasky@suse.cz>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and copyright (c) 2009, Linux Foundation, written by Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Redistribution and use in source and binary forms, with or without"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modification, are permitted provided that the following conditions"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" are met:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-12-08 Petr Baudis <pasky@suse.cz>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    Rewrite the BSD manpage in the Linux man pages style and account"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    for glibc specificities, provide an example."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2009-01-14 mtk, many edits and changes, rewrote example program."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GETIFADDRS 3 2017-09-15 \"GNU\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "getifaddrs, freeifaddrs "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " get interface addresses"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/types.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <ifaddrs.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int getifaddrs(struct ifaddrs **\" \"ifap\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void freeifaddrs(struct ifaddrs *\" \"ifa\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function creates a linked list of structures describing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the network interfaces of the local system,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and stores the address of the first item of the list in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " *ifap ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The list consists of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifaddrs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structures, defined as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct ifaddrs {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct ifaddrs  *ifa_next;    /* Next item in list */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char            *ifa_name;    /* Name of interface */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    unsigned int     ifa_flags;   /* Flags from SIOCGIFFLAGS */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr *ifa_addr;    /* Address of interface */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr *ifa_netmask; /* Netmask of interface */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    union {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        struct sockaddr *ifu_broadaddr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         /* Broadcast address of interface */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        struct sockaddr *ifu_dstaddr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                         /* Point-to-point destination address */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    } ifa_ifu;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define              ifa_broadaddr ifa_ifu.ifu_broadaddr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define              ifa_dstaddr   ifa_ifu.ifu_dstaddr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    void            *ifa_data;    /* Address-specific data */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_next"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field contains a pointer to the next structure on the list,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or NULL if this is the last item of the list."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "points to the null-terminated interface name."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The constant"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B IF NAMESIZE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" indicates the maximum length of this field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field contains the interface flags, as returned by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIOCGIFFLAGS"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ioctl (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "operation (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " netdevice (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for a list of these flags)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field points to a structure containing the interface address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sa_family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "subfield should be consulted to determine the format of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "address structure.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field may contain a null pointer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_netmask"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field points to a structure containing the netmask associated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_addr ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if applicable for the address family."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field may contain a null pointer."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Depending on whether the bit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IFF_BROADCAST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IFF_POINTOPOINT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(only one can be set at a time),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_broadaddr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will contain the broadcast address associated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(if applicable for the address family) or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_dstaddr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will contain the destination address of the point-to-point interface."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field points to a buffer containing address-family-specific data;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this field may be NULL if there is no such data for this interface."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The data returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is dynamically allocated and should be freed using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when no longer needed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns zero;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on error, "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 is returned, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set appropriately."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may fail and set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for any of the errors specified for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockname (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recvmsg (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendto (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " realloc (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function first appeared in glibc 2.3, but before glibc 2.3.3,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the implementation supported only IPv4 addresses;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IPv6 support was added in glibc 2.3.3."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Support of address families other than IPv4 is available only"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on kernels that support netlink."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lbw27 lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeifaddrs ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".sp",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Not in POSIX.1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This function first appeared in BSDi and is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "present on the BSD systems, but with slightly different"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "semantics documented"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "returning one entry per interface,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "not per address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and other fields can actually be NULL if the interface has no address,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and no link-level address is returned if the interface has an IP address"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "assigned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Also, the way of choosing either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_broadaddr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_dstaddr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "differs on various systems."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" , but the BSD-derived documentation generally"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" appears to be confused and obsolete on this point."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" i.e., commonly it still says one of them will be NULL, even if"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the ifa_ifu union is already present"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The addresses returned on Linux will usually be the IPv4 and IPv6 addresses"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "assigned to the interface, but also one"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_PACKET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "address per interface containing lower-level details about the interface"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and its physical layer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifa_data"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field may contain a pointer to a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct rtnl_link_stats\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <linux/if_link.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(in Linux 2.4 and earlier,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"struct net_device_stats\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "defined in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <linux/netdevice.h> ),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which contains various interface attributes and statistics."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below demonstrates the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getifaddrs (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeifaddrs (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getnameinfo (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Here is what we see when running this program on one system:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lo       AF_PACKET (17)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                tx_packets =        524; rx_packets =        524"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                tx_bytes   =      38788; rx_bytes   =      38788"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wlp3s0   AF_PACKET (17)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                tx_packets =     108391; rx_packets =     130245"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                tx_bytes   =   30420659; rx_bytes   =   94230014"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "em1      AF_PACKET (17)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                tx_packets =          0; rx_packets =          0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                tx_bytes   =          0; rx_bytes   =          0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lo       AF_INET (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                address: <127.0.0.1>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wlp3s0   AF_INET (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                address: <192.168.235.137>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lo       AF_INET6 (10)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                address: <::1>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wlp3s0   AF_INET6 (10)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                address: <fe80::7ee9:d3ff:fef5:1a91%wlp3s0>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE     /* To get defns of NI_MAXSERV and NI_MAXHOST */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <arpa/inet.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <netdb.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <ifaddrs.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <linux/if_link.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct ifaddrs *ifaddr, *ifa;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int family, s, n;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char host[NI_MAXHOST];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (getifaddrs(&ifaddr) == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        perror(\"getifaddrs\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Walk through linked list, maintaining head pointer so we"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       can free list later */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (ifa = ifaddr, n = 0; ifa != NULL; ifa = ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_next, n++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_addr == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        family = ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_addr"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">sa_family;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* Display interface name and family (including symbolic"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "           form of the latter for the common families) */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        printf(\"%"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "8s %s (%d)"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_name,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               (family == AF_PACKET) ? \"AF_PACKET\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               (family == AF_INET) ? \"AF_INET\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               (family == AF_INET6) ? \"AF_INET6\" : \"???\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               family);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        /* For an AF_INET* interface address, display the address */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (family == AF_INET || family == AF_INET6) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            s = getnameinfo(ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_addr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    (family == AF_INET) ? sizeof(struct sockaddr_in) :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                                          sizeof(struct sockaddr_in6),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    host, NI_MAXHOST,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    NULL, 0, NI_NUMERICHOST);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (s != 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                printf(\"getnameinfo() failed: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", gai_strerror(s));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            printf(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "t"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "taddress: <%s>"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", host);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        } else if (family == AF_PACKET && ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_data != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            struct rtnl_link_stats *stats = ifa"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ifa_data;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            printf(\""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "t"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "ttx_packets = %10u; rx_packets = %10u"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   \""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "t"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "ttx_bytes   = %10u; rx_bytes   = %10u"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   stats"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">tx_packets, stats"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">rx_packets,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                   stats"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">tx_bytes, stats"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">rx_bytes);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    freeifaddrs(ifaddr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getsockname (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " packet (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ifconfig (8)"
        }
      ]
    ]
  }
]
