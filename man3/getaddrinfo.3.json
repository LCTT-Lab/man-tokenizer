[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2007, 2008 Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright (c) 2006 Ulrich Drepper <drepper@redhat.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" A few pieces of an earlier version remain:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright 2000, Sam Varshavchik <mrsam@courier-mta.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" References: RFC 2553"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2005-08-09, mtk, added AI_ALL, AI_ADDRCONFIG, AI_V4MAPPED,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t\t\tand AI_NUMERICSERV."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2006-11-25, Ulrich Drepper <drepper@redhat.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     Add text describing Internationalized Domain Name extensions."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2007-06-08, mtk: added example programs"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-02-26, mtk; clarify discussion of NULL 'hints' argument; other"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     minor rewrites."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-06-18, mtk: many parts rewritten"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2008-12-04, Petr Baudis <pasky@suse.cz>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tDescribe results ordering and reference /etc/gai.conf."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . glibc's 2.9 NEWS file documents DCCP and UDP-lite support"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"           and is SCTP support now also there?"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GETADDRINFO 3 2017-09-15 \"GNU\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "getaddrinfo, freeaddrinfo, gai_strerror "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " network address and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "service translation"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/types.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <netdb.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int getaddrinfo(const char *\" \"node\" \", const char *\" \"service\" ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                const struct addrinfo *\" \"hints\" ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                struct addrinfo **\" \"res\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void freeaddrinfo(struct addrinfo *\" \"res\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"const char *gai_strerror(int \" \"errcode\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " -4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Feature Test Macro Requirements for glibc (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " feature_test_macros (7)):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeaddrinfo (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_strerror ():"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Since glibc 2.22: _POSIX_C_SOURCE >= 200112L"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    Glibc 2.21 and earlier: _POSIX_C_SOURCE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " b"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Given"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which identify an Internet host and a service,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns one or more"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structures, each of which contains an Internet address"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that can be specified in a call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function combines the functionality provided by the"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getipnodebyname (3),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getipnodebyaddr (3),"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gethostbyname (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getservbyname (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "functions into a single interface, but unlike the latter functions,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is reentrant and allows programs to eliminate IPv4-versus-IPv6 dependencies."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure used by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the following fields:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct addrinfo {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int              ai_flags;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int              ai_family;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int              ai_socktype;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int              ai_protocol;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    socklen_t        ai_addrlen;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr *ai_addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char            *ai_canonname;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo *ai_next;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument points to an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure that specifies criteria for selecting the socket address"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structures returned in the list pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not NULL it points to an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure whose"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_family ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_socktype ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specify criteria that limit the set of socket addresses returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 12"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field specifies the desired address family for the returned addresses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Valid values for this field include"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET6 ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The value"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNSPEC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "indicates that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should return socket addresses for any address family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(either IPv4 or IPv6, for example) that can be used with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_socktype"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field specifies the preferred socket type, for example"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Specifying 0 in this field indicates that socket addresses of any type"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field specifies the protocol for the returned socket addresses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Specifying 0 in this field indicates that socket addresses with"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "any protocol can be returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This field specifies additional options, described below."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Multiple flags are specified by bitwise OR-ing them together."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "All the other fields in the structure pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must contain either 0 or a null pointer, as appropriate."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as NULL is equivalent to setting"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_socktype"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to 0;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_UNSPEC ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"(AI_V4MAPPED"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "|"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "AI_ADDRCONFIG)\" ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(POSIX specifies different defaults for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_flags ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "see NOTES.)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies either a numerical network address"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(for IPv4, numbers-and-dots notation as supported by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inet_aton (3);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for IPv6, hexadecimal string format as supported by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inet_pton (3)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or a network hostname, whose network addresses are looked up and resolved."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_NUMERICHOST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must be a numerical network address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_NUMERICHOST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag suppresses any potentially lengthy network host address lookups."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_PASSIVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the returned socket addresses will be suitable for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)ing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a socket that will"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " accept (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "connections."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The returned socket address will contain the \"wildcard address\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( INADDR_ANY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for IPv4 addresses,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IN6ADDR_ANY_INIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for IPv6 address)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The wildcard address is used by applications (typically servers)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that intend to accept connections on any of the host's network addresses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not NULL, then the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_PASSIVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_PASSIVE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is not set in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the returned socket addresses will be suitable for use with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendto (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sendmsg (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the network address will be set to the loopback interface address"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( INADDR_LOOPBACK"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for IPv4 addresses,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IN6ADDR_LOOPBACK_INIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for IPv6 address);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this is used by applications that intend to communicate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with peers running on the same host."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sets the port in each returned address structure."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this argument is a service name (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " services (5)),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it is translated to the corresponding port number."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This argument can also be specified as a decimal number,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which is simply converted to binary."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL, then the port number of the returned socket addresses"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will be left uninitialized."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_NUMERICSERV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not NULL, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "must point to a string containing a numeric port number."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is used to inhibit the invocation of a name resolution service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in cases where it is known not to be required."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but not both, may be NULL."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function allocates and initializes a linked list of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structures, one for each network address that matches"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "subject to any restrictions imposed by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and returns a pointer to the start of the list in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The items in the linked list are linked by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_next"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "There are several reasons why"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the linked list may have more than one"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure, including: the network host is multihomed, accessible"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "over multiple protocols (e.g., both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET6 );"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the same service is available from multiple socket types (one"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "address and another"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "address, for example)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Normally, the application should try"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the addresses in the order in which they are returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The sorting function used within"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is defined in RFC"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "3484; the order can be tweaked for a particular"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "system by editing"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /etc/gai.conf"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(available since glibc 2.5)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "includes the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_CANONNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, then the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_canonname"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of the first of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structures in the returned list is set to point to the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "official name of the host."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" In glibc prior to 2.3.4, the ai_canonname of each addrinfo"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" structure was set pointing to the canonical name; that was"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" more than POSIX.1-2001 specified, or other implementations provided."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MTK, Aug 05"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The remaining fields of each returned"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure are initialized as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_family ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_socktype ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fields return the socket creation parameters (i.e., these fields have"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the same meaning as the corresponding arguments of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " socket (2))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "might return"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET6 ;"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_socktype"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "might return"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_STREAM ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns the protocol for the socket."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A pointer to the socket address is placed in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_addr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field, and the length of the socket address, in bytes,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is placed in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_addrlen"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "includes the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_ADDRCONFIG"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, then IPv4 addresses are returned in the list pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only if the local system has at least one"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IPv4 address configured, and IPv6 addresses are returned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "only if the local system has at least one IPv6 address configured."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The loopback address is not considered for this case as valid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as a configured address."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag is useful on, for example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IPv4-only systems, to ensure that"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not return IPv6 socket addresses that would always fail in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " connect (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " bind (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_V4MAPPED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_family"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AF_INET6 ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and no matching IPv6 addresses could be found,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then return IPv4-mapped IPv6 addresses in the list pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_V4MAPPED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_ALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then return both IPv6 and IPv4-mapped IPv6 addresses"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the list pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res ."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_ALL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is ignored if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_V4MAPPED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not also specified."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function frees the memory that was allocated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the dynamically allocated linked list"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Extensions to getaddrinfo() for Internationalized Domain Names"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Starting with glibc 2.3.4,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has been extended to selectively allow the incoming and outgoing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "hostnames to be transparently converted to and from the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Internationalized Domain Name (IDN) format (see RFC 3490,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"Internationalizing Domain Names in Applications (IDNA)\" )."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Four new flags are defined:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_IDN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this flag is specified, then the node name given in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is converted to IDN format if necessary."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The source encoding is that of the current locale."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the input name contains non-ASCII characters, then the IDN encoding"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Those parts of the node name (delimited by dots) that contain"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "non-ASCII characters are encoded using ASCII Compatible Encoding (ACE)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "before being passed to the name resolution functions."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Implementation Detail:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" To minimize effects on system performance the implementation might"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" want to check whether the input string contains any non-ASCII"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" characters.  If there are none the IDN step can be skipped completely."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" On systems which allow not-ASCII safe encodings for a locale this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" might be a problem."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_CANONIDN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After a successful name lookup, and if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_CANONNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag was specified,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "will return the canonical name of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "node corresponding to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure value passed back."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The return value is an exact copy of the value returned by the name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resolution function."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the name is encoded using ACE, then it will contain the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " xn"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "prefix for one or more components of the name."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To convert these components into a readable form the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_CANONIDN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag can be passed in addition to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_CANONNAME ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The resulting string is encoded using the current locale's encoding."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"Implementation Detail:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"If no component of the returned name starts with xn\\-\\- the IDN"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"step can be skipped, therefore avoiding unnecessary slowdowns."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_IDN_ALLOW_UNASSIGNED \", \" AI_IDN_USE_STD3_ASCII_RULES"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting these flags will enable the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IDNA_ALLOW_UNASSIGNED (allow unassigned Unicode code points) and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "IDNA_USE_STD3_ASCII_RULES (check output to make sure it is a STD3"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "conforming hostname)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flags respectively to be used in the IDNA handling."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME glibc defines the following additional errors, some which"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" can probably be returned by getaddrinfo(); they need to"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" be documented."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #ifdef __USE_GNU"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #define EAI_INPROGRESS  -100  /* Processing request in progress.  */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #define EAI_CANCELED    -101  /* Request canceled.  */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #define EAI_NOTCANCELED -102  /* Request not canceled.  */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #define EAI_ALLDONE     -103  /* All requests done.  */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #define EAI_INTR        -104  /* Interrupted by a signal.  */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #define EAI_IDN_ENCODE  -105  /* IDN encoding failed.  */"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    #endif"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns 0 if it succeeds, or one of the following nonzero error codes:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_ADDRFAMILY"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Not in SUSv3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The specified network host does not have any network addresses in the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "requested address family."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_AGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The name server returned a temporary failure indication."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Try again later."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_BADFLAGS"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains invalid flags; or,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "included"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_CANONNAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was NULL."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_FAIL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The name server returned a permanent failure indication."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_FAMILY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The requested address family is not supported."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_MEMORY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Out of memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_NODATA"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Not in SUSv3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The specified network host exists, but does not have any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "network addresses defined."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_NONAME"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not known; or both"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are NULL; or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_NUMERICSERV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not a numeric port-number string."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_SERVICE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The requested service is not available for the requested socket type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It may be available through another socket type."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, this error could occur if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was \"shell\" (a service available only on stream sockets), and either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IPPROTO_UDP ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_socktype"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM ;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the error could occur if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was not NULL, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_socktype"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_RAW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(a socket type that does not support the concept of services)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_SOCKTYPE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The requested socket type is not supported."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This could occur, for example, if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_socktype"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints.ai_protocol"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are inconsistent (e.g.,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SOCK_DGRAM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " IPPROTO_TCP ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "respectively)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_SYSTEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Other system error, check"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_strerror ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function translates these error codes to a human readable string,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "suitable for error reporting."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " FILES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /etc/gai.conf"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lbw15 lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe env locale"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeaddrinfo (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_strerror ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".sp",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX.1-2001, POSIX.1-2008."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function is documented in RFC"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "2553."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "supports the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " address % scope-id"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "notation for specifying the IPv6 scope-ID."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_ADDRCONFIG ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_ALL ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_V4MAPPED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are available since glibc 2.3.3."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " AI_NUMERICSERV"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is available since glibc 2.3.4."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "According to POSIX.1, specifying"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" POSIX.1-2001, POSIX.1-2008"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as NULL should cause"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ai_flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to be assumed as 0."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The GNU C library instead assumes a value of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"(AI_V4MAPPED"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "|"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "AI_ADDRCONFIG)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for this case,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since this value is considered an improvement on the specification."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" getnameinfo.3 refers to this example"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" socket.2 refers to this example"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" bind.2 refers to this example"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" connect.2 refers to this example"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" recvfrom.2 refers to this example"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" sendto.2 refers to this example"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following programs demonstrate the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_strerror (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " freeaddrinfo (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getnameinfo (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The programs are an echo server and client for UDP datagrams."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Server program"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/types.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <netdb.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define BUF_SIZE 500"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo hints;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo *result, *rp;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int sfd, s;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sockaddr_storage peer_addr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    socklen_t peer_addr_len;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ssize_t nread;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char buf[BUF_SIZE];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc != 2) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Usage: %s port"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&hints, 0, sizeof(struct addrinfo));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_protocol = 0;          /* Any protocol */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_canonname = NULL;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_addr = NULL;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_next = NULL;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = getaddrinfo(NULL, argv[1], &hints, &result);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"getaddrinfo: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", gai_strerror(s));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* getaddrinfo() returns a list of address structures."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       Try each address until we successfully bind(2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       If socket(2) (or bind(2)) fails, we (close the socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       and) try the next address. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (rp = result; rp != NULL; rp = rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_next) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        sfd = socket(rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_family, rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_socktype,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_protocol);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (sfd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (bind(sfd, rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addr, rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addrlen) == 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            break;                  /* Success */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        close(sfd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (rp == NULL) {               /* No address succeeded */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Could not bind"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    freeaddrinfo(result);           /* No longer needed */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Read datagrams and echo them back to sender */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (;;) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        peer_addr_len = sizeof(struct sockaddr_storage);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        nread = recvfrom(sfd, buf, BUF_SIZE, 0,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                (struct sockaddr *) &peer_addr, &peer_addr_len);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (nread == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;               /* Ignore failed request */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        char host[NI_MAXHOST], service[NI_MAXSERV];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        s = getnameinfo((struct sockaddr *) &peer_addr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        peer_addr_len, host, NI_MAXHOST,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        service, NI_MAXSERV, NI_NUMERICSERV);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s == 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            printf(\"Received %zd bytes from %s:%s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    nread, host, service);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        else"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr, \"getnameinfo: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", gai_strerror(s));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (sendto(sfd, buf, nread, 0,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    (struct sockaddr *) &peer_addr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    peer_addr_len) != nread)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr, \"Error sending response"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Client program"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/types.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <sys/socket.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <netdb.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define BUF_SIZE 500"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo hints;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo *result, *rp;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int sfd, s, j;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    size_t len;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    ssize_t nread;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char buf[BUF_SIZE];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc < 3) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Usage: %s host port msg..."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Obtain address(es) matching host/port */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    memset(&hints, 0, sizeof(struct addrinfo));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_family = AF_UNSPEC;    /* Allow IPv4 or IPv6 */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_flags = 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    hints.ai_protocol = 0;          /* Any protocol */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = getaddrinfo(argv[1], argv[2], &hints, &result);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"getaddrinfo: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", gai_strerror(s));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* getaddrinfo() returns a list of address structures."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       Try each address until we successfully connect(2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       If socket(2) (or connect(2)) fails, we (close the socket"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       and) try the next address. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (rp = result; rp != NULL; rp = rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_next) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        sfd = socket(rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_family, rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_socktype,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                     rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_protocol);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (sfd == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (connect(sfd, rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addr, rp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addrlen) != "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            break;                  /* Success */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        close(sfd);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (rp == NULL) {               /* No address succeeded */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Could not connect"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    freeaddrinfo(result);           /* No longer needed */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Send remaining command"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "line arguments as separate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       datagrams, and read responses from server */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (j = 3; j < argc; j++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        len = strlen(argv[j]) + 1;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                /* +1 for terminating null byte */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (len > BUF_SIZE) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    \"Ignoring long message in argument %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", j);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (write(sfd, argv[j], len) != len) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr, \"partial/failed write"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        nread = read(sfd, buf, BUF_SIZE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (nread == "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"read\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        printf(\"Received %zd bytes: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", nread, buf);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getipnodebyaddr (3),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .BR getipnodebyname (3),"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo_a (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gethostbyname (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getnameinfo (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inet (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai.conf (5),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hostname (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ip (7)"
        }
      ]
    ]
  }
]
