[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": "'\\\" t"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2012 by Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOPT 3  2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "mallopt "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " set memory allocation parameters"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <malloc.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int mallopt(int \" param \", int \" value );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function adjusts parameters that control the behavior of the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "memory-allocation functions (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3))."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " param"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument specifies the parameter to be modified, and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies the new value for that parameter."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following values can be specified for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " param :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this parameter has a nonzero value,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it defines a hard limit on the maximum number of arenas that can be created."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "An arena represents a pool of memory that can be used by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(and similar) calls to service allocation requests."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Arenas are thread safe and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "therefore may have multiple concurrent memory requests."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The trade-off is between the number of threads and the number of arenas."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The more arenas you have, the lower the per-thread contention,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the higher the memory usage."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value of this parameter is 0,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "meaning that the limit on the number of arenas is determined"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "according to the setting of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_TEST ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This parameter has been available since glibc 2.10 via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "enable"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "experimental"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "malloc ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and since glibc 2.15 by default."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In some versions of the allocator there was no limit on the number"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of created arenas (e.g., CentOS 5, RHEL 5)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When employing newer glibc versions, applications may in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "some cases exhibit high contention when accessing arenas."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In these cases, it may be beneficial to increase"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to match the number of threads."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is similar in behavior to strategies taken by tcmalloc and jemalloc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(e.g., per-thread allocation pools)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_TEST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This parameter specifies a value, in number of arenas created,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at which point the system configuration will be examined"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to determine a hard limit on the number of created arenas."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the definition of an arena.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The computation of the arena hard limit is implementation-defined"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and is usually calculated as a multiple of the number of available CPUs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Once the hard limit is computed, the result is final and constrains"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the total number of arenas."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value for the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_TEST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter is 2 on systems where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sizeof(long)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 4; otherwise the default value is 8."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This parameter has been available since glibc 2.10 via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "enable"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "experimental"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "malloc ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and since glibc 2.15 by default."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The value of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_TEST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is not used when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has a nonzero value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting this parameter controls how glibc responds when various kinds"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of programming errors are detected (e.g., freeing the same pointer twice)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The 3 least significant bits (2, 1, and 0) of the value assigned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to this parameter determine the glibc behavior, as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Bit 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, then print a one-line message on"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " stderr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that provides details about the error."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The message starts with the string \"***"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "glibc detected"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "***\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "followed by the program name,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the name of the memory-allocation function in which the error was detected,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a brief description of the error,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the memory address where the error was detected."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Bit 1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set, then,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "after printing any error message specified by bit 0,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the program is terminated by calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " abort (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In glibc versions since 2.4,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if bit 0 is also set,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then, between printing the error message and aborting,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the program also prints a stack trace in the manner of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " backtrace (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and prints the process's memory mapping in the style of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /proc/[pid]/maps"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " proc (5))."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Bit 2 (since glibc 2.4)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This bit has an effect only if bit 0 is also set."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this bit is set,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the one-line message describing the error is simplified"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to contain just the name of the function where the error"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was detected and the brief description of the error."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The remaining bits in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Combining the above details,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the following numeric values are meaningful for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 12"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 0 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Ignore error conditions; continue execution (with undefined results)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Print a detailed error message and continue execution."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 2"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Abort the program."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Print detailed error message, stack trace, and memory mappings,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and abort the program."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 5"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Print a simple error message and continue execution."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " 7"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Print simple error message, stack trace, and memory mappings,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and abort the program."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since glibc 2.3.4, the default value for the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter is 3."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In glibc version 2.3.3 and earlier, the default value is 1."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Using a nonzero"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "value can be useful because otherwise a crash may happen much later,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the true cause of the problem is then very hard to track down."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_MAX"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following text adapted from comments in the glibc source:"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This parameter specifies the maximum number of allocation requests that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may be simultaneously serviced using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This parameter exists because some systems have a limited number"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of internal tables for use by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and using more than a few of them may degrade performance."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value is 65,536,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a value which has no special significance and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which serves only as a safeguard."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting this parameter to 0 disables the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for servicing large allocation requests."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For allocations greater than or equal to the limit specified (in bytes) by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that can't be satisfied from the free list,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the memory-allocation functions employ"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "instead of increasing the program break using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sbrk (2)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Allocating memory using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has the significant advantage that the allocated memory blocks"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can always be independently released back to the system."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(By contrast,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the heap can be trimmed only if memory is freed at the top end.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On the other hand, there are some disadvantages to the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2):"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "deallocated space is not placed on the free list"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for reuse by later allocations;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "memory may be wasted because"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "allocations must be page-aligned;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the kernel must perform the expensive task of zeroing out"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "memory allocated via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Balancing these factors leads to a default setting of 128*1024 for the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The lower limit for this parameter is 0."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The upper limit is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DEFAULT_MMAP_THRESHOLD_MAX :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "512*1024 on 32-bit systems or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 4*1024*1024*sizeof(long)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on 64-bit systems."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Note:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Nowadays, glibc uses a dynamic mmap threshold by default."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The initial value of the threshold is 128*1024,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but when blocks larger than the current threshold and less than or equal to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DEFAULT_MMAP_THRESHOLD_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are freed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the threshold is adjusted upward to the size of the freed block."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When dynamic mmap thresholding is in effect,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the threshold for trimming the heap is also dynamically adjusted"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to be twice the dynamic mmap threshold."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Dynamic adjustment of the mmap threshold is disabled if any of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TOP_PAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_THRESHOLD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameters is set."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MXFAST \" (since glibc 2.3)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The following text adapted from comments in the glibc sources:"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Set the upper limit for memory allocation requests that are satisfied"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using \"fastbins\"."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The measurement unit for this parameter is bytes.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Fastbins are storage areas that hold deallocated blocks of memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the same size without merging adjacent free blocks."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Subsequent reallocation of blocks of the same size can be handled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "very quickly by allocating from the fastbin,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "although memory fragmentation and the overall memory footprint"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the program can increase."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value for this parameter is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"64*sizeof(size_t)/4\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., 64 on 32-bit architectures)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The range for this parameter is 0 to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"80*sizeof(size_t)/4\" ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MXFAST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to 0 disables the use of fastbins."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_PERTURB \" (since glibc 2.4)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this parameter is set to a nonzero value,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then bytes of allocated memory (other than allocations via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " calloc (3))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are initialized to the complement of the value"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in the least significant byte of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and when allocated memory is released using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the freed bytes are set to the least significant byte of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be useful for detecting errors where programs"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "incorrectly rely on allocated memory being initialized to zero,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or reuse values in memory that has already been freed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value for this parameter is 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TOP_PAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This parameter defines the amount of padding to employ when calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sbrk (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to modify the program break."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(The measurement unit for this parameter is bytes.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This parameter has an effect in the following circumstances:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When the program break is increased, then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TOP_PAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bytes are added to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sbrk (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "request."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When the heap is trimmed as a consequence of calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see the discussion of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this much free space is preserved at the top of the heap."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "In either case,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the amount of padding is always rounded to a system page boundary."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Modifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TOP_PAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a trade-off between increasing the number of system calls"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(when the parameter is set low)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and wasting unused memory at the top of the heap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(when the parameter is set high)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value for this parameter is 128*1024."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" DEFAULT_TOP_PAD in glibc source"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When the amount of contiguous free memory at the top of the heap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "grows sufficiently large,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "employs"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sbrk (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to release this memory back to the system."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This can be useful in programs that continue to execute for"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a long period after freeing a significant amount of memory.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter specifies the minimum size (in bytes) that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this block of memory must reach before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sbrk (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used to trim the heap."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The default value for this parameter is 128*1024."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Setting"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "1 disables trimming completely."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Modifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is a trade-off between increasing the number of system calls"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(when the parameter is set low)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and wasting unused memory at the top of the heap"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(when the parameter is set high)."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Environment variables"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A number of environment variables can be defined"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to modify some of the same parameters as are controlled by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Using these variables has the advantage that the source code"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of the program need not be changed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To be effective, these variables must be defined before the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "first call to a memory-allocation function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(If the same parameters are adjusted via"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "settings take precedence.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For security reasons,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "these variables are ignored in set-user-ID and set-group-ID programs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The environment variables are as follows"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(note the trailing underscore at the end of the name of some variables):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_ARENA_MAX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_MAX ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_ARENA_TEST"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_ARENA_TEST ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_CHECK_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This environment variable controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this variable is set to a nonzero value,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then a special implementation of the memory-allocation functions is used."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This is accomplished using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_hook (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "feature.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This implementation performs additional error checking,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but is slower"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" On glibc 2.12/x86, a simple malloc()+free() loop is about 70% slower"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" when MALLOC_CHECK_ was set."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "than the standard set of memory-allocation functions."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This implementation does not detect all possible errors;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "memory leaks can still occur.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The value assigned to this environment variable should be a single digit,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "whose meaning is as described for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any characters beyond the initial digit are ignored."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For security reasons, the effect of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_CHECK_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is disabled by default for set-user-ID and set-group-ID programs."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, if the file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /etc/suid"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "debug"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exists (the content of the file is irrelevant), then"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_CHECK_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "also has an effect for set-user-ID and set-group-ID programs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_MMAP_MAX_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_MAX ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_MMAP_THRESHOLD_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MMAP_THRESHOLD ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_PERTURB_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_PERTURB ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_TRIM_THRESHOLD_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TRIM_THRESHOLD ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_TOP_PAD_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Controls the same parameter as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_TOP_PAD ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns 1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On error, it returns 0."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On error,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH VERSIONS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Available already in glibc 2.0, possibly earlier"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This function is not specified by POSIX or the C standards."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A similar function exists on many System V derivatives,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but the range of values for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " param"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "varies across systems."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The SVID defined options"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_MXFAST ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_NLBLKS ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_GRAIN ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_KEEP ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but only the first of these is implemented in glibc."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .SH NOTES"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Specifying an invalid value for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " param"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not generate an error."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A calculation error within the glibc implementation means that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "a call of the form:"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . This looks buggy:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" setting the M_MXFAST limit rounds up:    (s + SIZE_SZ) & ~MALLOC_ALIGN_MASK)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" malloc requests are rounded up:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    (req) + SIZE_SZ + MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://sources.redhat.com/bugzilla/show_bug.cgi?id=12129"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "mallopt(M_MXFAST, n)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "does not result in fastbins being employed for all allocations of size up to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " n ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "To ensure desired results,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " n"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "should be rounded up to the next multiple greater than or equal to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " (2k+1)*sizeof(size_t) ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "where"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " k"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is an integer."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Bins are multiples of 2 * sizeof(size_t) + sizeof(size_t)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallopt ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used to set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_PERTURB ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then, as expected, the bytes of allocated memory are initialized"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the complement of the byte in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and when that memory is freed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the bytes of the region are initialized to the byte specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " value ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, there is an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " off-by- sizeof(size_t)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "error in the implementation:"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME . http://sources.redhat.com/bugzilla/show_bug.cgi?id=12140"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "instead of initializing precisely the block of memory"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "being freed by the call"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " free(p) ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the block starting at"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " p+sizeof(size_t)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is initialized."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below demonstrates the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the program is supplied with an (integer) command-line argument,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then that argument is used to set the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "parameter."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The program then allocates a block of memory,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and frees it twice (an error)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following shell session shows what happens when we run this program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "under glibc, with the default value for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from first free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "*** glibc detected *** ./a.out: double free or corruption (top): 0x09d30008 ***"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "======= Backtrace: ========="
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/lib/libc.so.6(+0x6c501)[0x523501]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/lib/libc.so.6(+0x6dd70)[0x524d70]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/lib/libc.so.6(cfree+0x6d)[0x527e5d]"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        },
        {
          "type": "TEXT",
          "content": "./a.out[0x80485db]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "/lib/libc.so.6(__libc_start_main+0xe7)[0x4cdce7]"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        },
        {
          "type": "TEXT",
          "content": "./a.out[0x8048471]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "======= Memory map: ========"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "001e4000"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "001fe000 r"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "xp 00000000 08:06 1083555    /lib/libgcc_s.so.1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "001fe000"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "001ff000 r"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "p 00019000 08:06 1083555    /lib/libgcc_s.so.1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[some lines omitted]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "b7814000"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "b7817000 rw"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "p 00000000 00:00 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "bff53000"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "bff74000 rw"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "p 00000000 00:00 0          [stack]"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Aborted (core dumped)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The following runs show the results when employing other values for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " M_CHECK_ACTION :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out 1"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P             # Diagnose error and continue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from first free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "*** glibc detected *** ./a.out: double free or corruption (top): 0x09cbe008 ***"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from second free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out 2"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P             # Abort without error message"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from first free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Aborted (core dumped)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out 0"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P             # Ignore error and continue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from first free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from second free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The next run shows how to set the same parameter using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " MALLOC_CHECK_"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "environment variable:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "BMALLOC_CHECK_=1 ./a.out"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from first free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "*** glibc detected *** ./a.out: free(): invalid pointer: 0x092c2008 ***"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(): returned from second free() call"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <malloc.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *p;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc > 1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (mallopt(M_CHECK_ACTION, atoi(argv[1])) != 1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            fprintf(stderr, \"mallopt() failed\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    p = malloc(1000);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (p == NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"malloc() failed\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    free(p);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"main(): returned from first free() call"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    free(p);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"main(): returned from second free() call"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nh",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mmap (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sbrk (2),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mallinfo (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_hook (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_info (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_stats (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " malloc_trim (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mcheck (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mtrace (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " posix_memalign (3)"
        }
      ]
    ]
  }
]
