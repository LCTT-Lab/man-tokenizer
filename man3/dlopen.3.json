[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright 1995 Yggdrasil Computing, Incorporated."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" written by Adam J. Richter (adam@yggdrasil.com),"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" with typesetting help from Daniel Quinlan (quinlan@yggdrasil.com)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and Copyright 2003, 2015 Michael Kerrisk <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(GPLv2+_DOC_FULL)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This is free documentation; you can redistribute it and/or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modify it under the terms of the GNU General Public License as"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" published by the Free Software Foundation; either version 2 of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the License, or (at your option) any later version."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The GNU General Public License's references to \"object code\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and \"executables\" are to be interpreted as the output of any"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" document formatting or typesetting system, including"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" intermediate and printed output."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" This manual is distributed in the hope that it will be useful,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" but WITHOUT ANY WARRANTY; without even the implied warranty of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" GNU General Public License for more details."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" You should have received a copy of the GNU General Public"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" License along with this manual; if not, see"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" <http://www.gnu.org/licenses/>."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by David A. Wheeler <dwheeler@dwheeler.com> 2000-11-28."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Applied patch by Terran Melconian, aeb, 2001-12-14."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by Hacksaw <hacksaw@hacksaw.org> 2003-03-13."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by Matt Domsch, 2003-04-09: _init and _fini obsolete"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by Michael Kerrisk <mtk.manpages@gmail.com> 2003-05-16."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by Walter Harms: dladdr, dlvsym"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Modified by Petr Baudis <pasky@suse.cz>, 2008-12-04: dladdr caveat"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " DLOPEN 3 2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "dlclose, dlopen, dlmopen "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "open and close a shared object"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <dlfcn.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void *dlopen(const char *\" filename \", int \" flags );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int dlclose(void *\" handle );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #define _GNU_SOURCE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".br",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <dlfcn.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"void *dlmopen (Lmid_t \" lmid \", const char *\" filename \", int \" flags );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Link with "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "I"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ldl"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " dlopen()"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "loads the dynamic shared object (shared library)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "file named by the null-terminated"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "string"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and returns an opaque \"handle\" for the loaded object."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This handle is employed with other functions in the dlopen API, such as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlsym (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dladdr (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlinfo (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME On Solaris, when handle is NULL, we seem to get back"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" a handle for (something like) the root of the namespace."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The point here is that if we do a dlmopen(LM_ID_NEWLM), then"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the filename==NULL case returns a different handle than"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" in the initial namespace. But, on glibc, the same handle is"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" returned. This is probably a bug in glibc."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "is NULL, then the returned handle is for the main program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains a slash (\"/\"), then it is interpreted as a (relative"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or absolute) pathname."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise, the dynamic linker searches for the object as follows"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ld.so (8)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for further details):"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " o 4"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(ELF only) If the executable file for the calling program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains a DT_RPATH tag, and does not contain a DT_RUNPATH tag,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the directories listed in the DT_RPATH tag are searched."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " o"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If, at the time that the program was started, the environment variable"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LD_LIBRARY_PATH"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was defined to contain a colon-separated list of directories,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then these are searched."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(As a security measure, this variable is ignored for set-user-ID and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "set-group-ID programs.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " o"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(ELF only) If the executable file for the calling program"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contains a DT_RUNPATH tag, then the directories listed in that tag"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are searched."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " o"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The cache file"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /etc/ld.so.cache"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(maintained by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ldconfig (8))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is checked to see whether it contains an entry for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " o"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The directories"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /lib"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " /usr/lib"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are searched (in that order)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the object specified by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has dependencies on other shared objects,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then these are also automatically loaded by the dynamic linker"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using the same rules."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(This process may occur recursively,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if those objects in turn have dependencies, and so on.)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "One of the following two values must be included in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LAZY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Perform lazy binding."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Resolve symbols only as the code that references them is executed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the symbol is never referenced, then it is never resolved."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(Lazy binding is performed only for function references;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "references to variables are always immediately bound when"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the shared object is loaded.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since glibc 2.1.1,"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" commit 12b5b6b7f78ea111e89bbf638294a5413c791072"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "this flag is overridden by the effect of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LD_BIND_NOW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "environment variable."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NOW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this value is specified, or the environment variable"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LD_BIND_NOW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is set to a nonempty string,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "all undefined symbols in the shared object are resolved before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If this cannot be done, an error is returned."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Zero or more of the following values may also be ORed in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags :"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The symbols defined by this shared object will be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "made available for symbol resolution of subsequently loaded shared objects."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LOCAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This is the converse of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the default if neither flag is specified."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Symbols defined in this shared object are not made available to resolve"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "references in subsequently loaded shared objects."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NODELETE \" (since glibc 2.2)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Do not unload the shared object during"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Consequently, the object's static variables are not reinitialized"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the object is reloaded with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "at a later time."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NOLOAD \" (since glibc 2.2)\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Don't load the shared object."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be used to test if the object is already resident"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns NULL if it is not, or the object's handle if it is resident)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This flag can also be used to promote the flags on a shared object"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that is already loaded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For example, a shared object that was previously loaded with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LOCAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be reopened with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NOLOAD"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "|"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "RTLD_GLOBAL ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_DEEPBIND \" (since glibc 2.3.4)\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Inimitably described by UD in"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://sources.redhat.com/ml/libc-hacker/2004-09/msg00083.html."
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Place the lookup scope of the symbols in this"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "shared object ahead of the global scope."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means that a self-contained object will use"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "its own symbols in preference to global symbols with the same name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "contained in objects that have already been loaded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL, then the returned handle is for the main program."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When given to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlsym (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this handle causes a search for a symbol in the main program,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "followed by all shared objects loaded at program startup,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and then all shared objects loaded by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with the flag"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "External references in the shared object are resolved using the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "shared objects in that object's dependency list and any other"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "objects previously opened with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the executable was linked with the flag \""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "rdynamic\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(or, synonymously, \""
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "export"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "dynamic\"),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the global symbols in the executable will also be used"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to resolve references in a dynamically loaded shared object."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the same shared object is loaded again with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the same object handle is returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The dynamic linker maintains reference"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "counts for object handles, so a dynamically loaded shared object is not"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "deallocated until"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has been called on it as many times as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has succeeded on it."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any initialization returns (see below) are called just once."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "However, a subsequent"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call that loads the same shared object with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NOW"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may force symbol resolution for a shared object earlier loaded with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LAZY ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "fails for any reason, it returns NULL."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " dlmopen()"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This function performs the same task as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "arguments, as well as the return value, are the same,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "except for the differences noted below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function differs from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "primarily in that it accepts an additional argument,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lmid ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that specifies the link-map list (also referred to as a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " namespace )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in which the shared object should be loaded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(By comparison,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "adds the dynamically loaded shared object to the same namespace as"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the shared object from which the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "call is made.)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " Lmid_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "type is an opaque handle that refers to a namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lmid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument is either the ID of an existing namespace"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FIXME: Is using dlinfo() RTLD_DI_LMID the right technique?"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "(which can be obtained using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlinfo (3)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_DI_LMID"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "request) or one of the following special values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LM_ID_BASE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Load the shared object in the initial namespace"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(i.e., the application's namespace)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LM_ID_NEWLM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Create a new namespace and load the shared object in that namespace."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The object must have been correctly linked"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to reference all of the other shared objects that it requires,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since the new namespace is initially empty."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " filename"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL, then the only permitted value for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lmid"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " LM_ID_BASE ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " dlclose()"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The function"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "decrements the reference count on the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "dynamically loaded shared object referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " handle ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the reference count drops to zero,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then the object is unloaded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "All shared objects that were automatically loaded when"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was invoked on the object referred to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " handle"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are recursively closed in the same manner."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A successful return from"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "does not guarantee that the symbols associated with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " handle"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are removed from the caller's address space."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition to references resulting from explicit"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls, a shared object may have been implicitly loaded"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(and reference counted) because of dependencies in other shared objects."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Only when all references have been released can the shared object"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "be removed from the address space."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "return a non-NULL handle for the loaded library."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "On error"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(file could not be found, was not readable, had the wrong format,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or caused errors during loading),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "these functions return NULL."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns 0; on error, it returns a nonzero value."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Errors from these functions can be diagnosed using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlerror (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " VERSIONS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are present in glibc 2.0 and later."
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "first appeared in glibc 2.3.4."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lbw30 lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX.1-2001 describes"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function is a GNU extension."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NOLOAD ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_NODELETE ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_DEEPBIND"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flags are GNU extensions;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the first two of these flags are also present on Solaris."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " dlmopen() and namespaces"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "A link-map list defines an isolated namespace for the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "resolution of symbols by the dynamic linker."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Within a namespace,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "dependent shared objects are implicitly loaded according to the usual rules,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and symbol references are likewise resolved according to the usual rules,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but such resolution is confined to the definitions provided by the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "objects that have been (explicitly and implicitly) loaded into the namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function permits object-load isolation"
        },
        {
          "type": "ESCAPE",
          "content": "\\(em"
        },
        {
          "type": "TEXT",
          "content": "the ability"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to load a shared object in a new namespace without"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "exposing the rest of the application to the symbols"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "made available by the new object."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that the use of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LOCAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is not sufficient for this purpose,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "since it prevents a shared object's symbols from being available to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " any"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "other shared object."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In some cases,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "we may want to make the symbols provided by a dynamically"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "loaded shared object available to (a subset of) other shared objects"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "without exposing those symbols to the entire application."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This can be achieved by using a separate namespace and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function also can be used to provide better isolation than the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LOCAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In particular, shared objects loaded with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LOCAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "may be promoted to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if they are dependencies of another shared object loaded with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_LOCAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is insufficient to isolate a loaded shared object except in the (uncommon)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "case where one has explicit control over all shared object dependencies."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Possible uses of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are plugins where the author of the plugin-loading framework"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can't trust the plugin authors and does not wish"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "any undefined symbols from the plugin framework to be resolved to plugin"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "symbols."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Another use is to load the same object more than once."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Without the use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this would require the creation of distinct copies of the shared object file."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this can be achieved by loading the same shared object file into"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "different namespaces."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The glibc implementation supports a maximum of"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" DL_NNS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "16 namespaces."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Initialization and finalization functions"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Shared objects may export functions using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __attribute__((constructor))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " __attribute__((destructor))"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function attributes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Constructor functions are executed before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns, and destructor functions are executed before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlclose ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A shared object may export multiple constructors and destructors,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and priorities can be associated with each function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to determine the order in which they are executed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gcc"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "info pages (under \"Function attributes\")"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" info gcc \"C Extensions\" \"Function attributes\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "for further information."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "An older method of (partially) achieving the same result is via the use of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "two special symbols recognized by the linker:"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _init"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _fini ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If a dynamically loaded shared object exports a routine named"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _init (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then that code is executed after loading a shared object, before"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "returns."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the shared object exports a routine named"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _fini (),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then that routine is called just before the object is unloaded."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In this case, one must avoid linking against the system startup files,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which contain default versions of these files;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this can be done by using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gcc (1)"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "nostartfiles"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "command-line option."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _init"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " _fini"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is now deprecated in favor of the aforementioned"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "constructors and destructors,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "which among other advantages,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "permit multiple initialization and finalization functions to be defined."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Using these routines, or the gcc"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B \\-nostartfiles"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" or"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .B \\-nostdlib"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" options, is not recommended."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Their use may result in undesired behavior,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" since the constructor/destructor routines will not be executed"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" (unless special measures are taken)."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" void _init(void) __attribute__((constructor));"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .\\\" void _fini(void) __attribute__((destructor));"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Since glibc 2.2.3,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " atexit (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be used to register an exit handler that is automatically"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "called when a shared object is unloaded."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " History"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These functions are part of the dlopen API, derived from SunOS."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "As at glibc 2.24, specifying the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag when calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlmopen ()"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" dlerror(): \"invalid mode\""
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "generates an error."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Furthermore, specifying"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " RTLD_GLOBAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "when calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlopen ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "results in a program crash"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ( SIGSEGV )"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the call is made from any object loaded in a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "namespace other than the initial namespace."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below loads the (glibc) math library,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "looks up the address of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cos (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function, and prints the cosine of 2.0."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The following is an example of building and running the program:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "Bcc dlopen_demo.c "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "ldl"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "0.416147"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <dlfcn.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <gnu/lib-names.h>  /* Defines LIBM_SO (which will be a"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                               string such as \"libm.so.6\") */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    void *handle;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    double (*cosine)(double);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *error;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    handle = dlopen(LIBM_SO, RTLD_LAZY);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (!handle) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"%s"
        },
        {
          "type": "ESCAPE",
          "content": "\\e"
        },
        {
          "type": "TEXT",
          "content": "n\", dlerror());"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    dlerror();    /* Clear any existing error */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    cosine = (double (*)(double)) dlsym(handle, \"cos\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* According to the ISO C standard, casting between function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       pointers and 'void *', as done above, produces undefined results."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       POSIX.1-2003 and POSIX.1-2008 accepted this state of affairs and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       proposed the following workaround:"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "           *(void **) (&cosine) = dlsym(handle, \"cos\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "       This (clumsy) cast conforms with the ISO C standard and will"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       avoid any compiler warnings."
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "       The 2013 Technical Corrigendum to POSIX.1-2008 (a.k.a."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       POSIX.1-2013) improved matters by requiring that conforming"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       implementations support casting 'void *' to a function pointer."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       Nevertheless, some compilers (e.g., gcc with the '-pedantic'"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       option) may complain about the cast used in this program. */"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html#tag_03_112_08"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://pubs.opengroup.org/onlinepubs/9699919799/functions/dlsym.html#tag_16_96_07"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" http://austingroupbugs.net/view.php?id=74"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    error = dlerror();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (error != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"%s"
        },
        {
          "type": "ESCAPE",
          "content": "\\e"
        },
        {
          "type": "TEXT",
          "content": "n\", error);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%f"
        },
        {
          "type": "ESCAPE",
          "content": "\\e"
        },
        {
          "type": "TEXT",
          "content": "n\", (*cosine)(2.0));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    dlclose(handle);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ld (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ldd (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pldd (1),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dl_iterate_phdr (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dladdr (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlerror (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlinfo (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dlsym (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " rtld-audit (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ld.so (8),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ldconfig (8)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "gcc info pages, ld info pages"
        }
      ]
    ]
  }
]
