[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2009 Petr Baudis <pasky@suse.cz>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" and clean-ups and additions (C) Copyright 2010 Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"                                 <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" References: http://people.redhat.com/drepper/asynchnl.pdf,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     http://www.imperialviolet.org/2005/06/01/asynchronous-dns-lookups-with-glibc.html"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GETADDRINFO_A 3 2017-09-15 \"GNU\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "getaddrinfo_a, gai_suspend, gai_error, gai_cancel "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " asynchronous"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "network address and service translation"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"#define _GNU_SOURCE\" \"         /* See feature_test_macros(7) */\""
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <netdb.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int getaddrinfo_a(int \" \"mode\" \", struct gaicb *\" \"list[]\" ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                int \" \"nitems\" \", struct sigevent *\" \"sevp\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int gai_suspend(const struct gaicb * const \" \"list[]\" \", int \" \"nitems\" ,"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"                const struct timespec *\" \"timeout\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int gai_error(struct gaicb *\" \"req\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int gai_cancel(struct gaicb *\" \"req\" );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Link with "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "I"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "lanl"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo_a ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function performs the same task as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "but allows multiple name look-ups to be performed asynchronously,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with optional notification on completion of look-up operations."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mode"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument has one of the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GAI_WAIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Perform the look-ups synchronously."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The call blocks until the look-ups have completed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GAI_NOWAIT"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Perform the look-ups asynchronously."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The call returns immediately,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and the requests are resolved in the background."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See the discussion of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sevp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument below."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The array"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "specifies the look-up requests to process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nitems"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument specifies the number of elements in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The requested look-up operations are started in parallel."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "NULL elements in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are ignored."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Each request is described by a"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gaicb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure, defined as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "struct gaicb {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    const char            *ar_name;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    const char            *ar_service;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    const struct addrinfo *ar_request;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo       *ar_result;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "};"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The elements of this structure correspond to the arguments of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thus,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ar_name"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "corresponds to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " node"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ar_service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " service"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument, identifying an Internet host and a service."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ar_request"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "element corresponds to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hints"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument, specifying the criteria for selecting"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the returned socket address structures."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Finally,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ar_result"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "corresponds to the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " res"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument; you do not need to initialize this element,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it will be automatically set when the request"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is resolved."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " addrinfo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure referenced by the last two elements is described in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mode"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is specified as"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " GAI_NOWAIT ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "notifications about resolved requests"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "can be obtained by employing the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigevent"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure pointed to by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sevp"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "For the definition and general details of this structure, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigevent (7)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sevp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">sigev_notify"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field can have the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGEV_NONE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Don't provide any notification."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGEV_SIGNAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a look-up completes, generate the signal"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigev_signo"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for the process."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigevent (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for general details."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " si_code"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "field of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " siginfo_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure will be set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SI_ASYNCNL ."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" si_pid and si_uid are also set, to the values of the calling process,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which doesn't provide useful information, so we'll skip mentioning it."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGEV_THREAD"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "When a look-up completes, invoke"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigev_notify_function"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "as if it were the start function of a new thread."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "See"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigevent (7)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGEV_SIGNAL"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " SIGEV_THREAD ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it may be useful to point"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sevp"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">sigev_value.sival_ptr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list ."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_suspend ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function suspends execution of the calling thread,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "waiting for the completion of one or more requests in the array"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nitems"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument specifies the size of the array"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The call blocks until one of the following occurs:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " * 3"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "One or more of the operations in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " list"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "completes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The call is interrupted by a signal that is caught."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " *"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The time interval specified in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " timeout"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "elapses."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This argument specifies a timeout in seconds plus nanoseconds (see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " nanosleep (2)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for details of the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " timespec"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "structure)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " timeout"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL, then the call blocks indefinitely"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(until one of the events above occurs)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "No explicit indication of which request was completed is given;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "you must determine which request(s) have completed by iterating with"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_error ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "over the list of requests."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_error ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns the status of the request"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " req :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "either"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_INPROGRESS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the request was not completed yet,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "0 if it was handled successfully,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or an error code if the request could not be resolved."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_cancel ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function cancels the request"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " req ."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the request has been canceled successfully,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the error status of the request will be set to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_CANCELED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and normal asynchronous notification will be performed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The request cannot be canceled if it is currently being processed;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in that case, it will be handled as if"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_cancel ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has never been called."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " req"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL, an attempt is made to cancel all outstanding requests"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "that the process has made."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo_a ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns 0 if all of the requests have been enqueued successfully,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or one of the following nonzero error codes:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_AGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The resources necessary to enqueue the look-up requests were not available."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The application may check the error status of each"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "request to determine which ones failed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_MEMORY"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Out of memory."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_SYSTEM"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mode"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is invalid."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_suspend ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function returns 0 if at least one of the listed requests has been completed."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Otherwise, it returns one of the following nonzero error codes:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_AGAIN"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The given timeout expired before any of the requests could be completed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_ALLDONE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "There were no actual requests given to the function."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_INTR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A signal has interrupted the function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note that this interruption might have been"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "caused by signal notification of some completed look-up request."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_error ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function can return"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_INPROGRESS"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for an unfinished look-up request,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "0 for a successfully completed look-up"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(as described above), one of the error codes that could be returned by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or the error code"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_CANCELED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "if the request has been canceled explicitly before it could be finished."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_cancel ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function can return one of these values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_CANCELED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The request has been canceled successfully."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_NOTCANCELED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The request has not been canceled."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " EAI_ALLDONE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The request has already completed."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_strerror (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function translates these error codes to a human readable string,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "suitable for error reporting."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lbw31 lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo_a (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_suspend (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_error (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " gai_cancel ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".sp",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " 1"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "These functions are GNU extensions;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "they first appeared in glibc in version 2.2.3."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The interface of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo_a ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "was modeled after the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lio_listio (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "interface."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Two examples are provided: a simple example that resolves"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "several requests in parallel synchronously, and a complex example"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "showing some of the asynchronous capabilities."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Synchronous example"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below simply resolves several hostnames in parallel,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "giving a speed-up compared to resolving the hostnames sequentially using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The program might be used like this:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out ftp.us.kernel.org enoent.linuxfoundation.org gnu.cz"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "ftp.us.kernel.org: 128.30.2.36"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "enoent.linuxfoundation.org: Name or service not known"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "gnu.cz: 87.236.197.13"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Here is the program source code"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <netdb.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int i, ret;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct gaicb *reqs[argc "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char host[NI_MAXHOST];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo *res;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc < 2) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"Usage: %s HOST..."
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", argv[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (i = 0; i < argc "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1; i++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        reqs[i] = malloc(sizeof(*reqs[0]));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (reqs[i] == NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            perror(\"malloc\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        memset(reqs[i], 0, sizeof(*reqs[0]));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        reqs[i]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_name = argv[i + 1];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = getaddrinfo_a(GAI_WAIT, reqs, argc "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1, NULL);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret != 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"getaddrinfo_a() failed: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (i = 0; i < argc "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1; i++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"%s: \", reqs[i]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_name);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ret = gai_error(reqs[i]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (ret == 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            res = reqs[i]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_result;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            ret = getnameinfo(res"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addr, res"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addrlen,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    host, sizeof(host),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                    NULL, 0, NI_NUMERICHOST);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (ret != 0) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                fprintf(stderr, \"getnameinfo() failed: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            puts(host);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        } else {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            puts(gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Asynchronous example"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "This example shows a simple interactive"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo_a ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "front-end."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The notification facility is not demonstrated."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "An example session might look like this:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "$ "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "B./a.out"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "> a ftp.us.kernel.org enoent.linuxfoundation.org gnu.cz"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "> c 2"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[2] gnu.cz: Request not canceled"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "> w 0 1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[00] ftp.us.kernel.org: Finished"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "> l"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[00] ftp.us.kernel.org: 216.165.129.139"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[01] enoent.linuxfoundation.org: Processing request in progress"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[02] gnu.cz: 87.236.197.13"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "> l"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[00] ftp.us.kernel.org: 216.165.129.139"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[01] enoent.linuxfoundation.org: Name or service not known"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "[02] gnu.cz: 87.236.197.13"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program source is as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <netdb.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <string.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static struct gaicb **reqs = NULL;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static int nreqs = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static char *"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "getcmd(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    static char buf[256];"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    fputs(\"> \", stdout); fflush(stdout);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (fgets(buf, sizeof(buf), stdin) == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return NULL;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (buf[strlen(buf) "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1] == "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ")"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        buf[strlen(buf) "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1] = 0;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    return buf;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* Add requests for specified hostnames */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "add_requests(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int nreqs_base = nreqs;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *host;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int ret;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    while ((host = strtok(NULL, \" \"))) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        nreqs++;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        reqs = realloc(reqs, nreqs * sizeof(reqs[0]));"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        reqs[nreqs "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1] = calloc(1, sizeof(*reqs[0]));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        reqs[nreqs "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " 1]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_name = strdup(host);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* Queue nreqs_base..nreqs requests. */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = getaddrinfo_a(GAI_NOWAIT, &reqs[nreqs_base],"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        nreqs "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " nreqs_base, NULL);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        fprintf(stderr, \"getaddrinfo_a() failed: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* Wait until at least one of specified requests completes */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "wait_requests(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int i, ret, n;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct gaicb const **wait_reqs = calloc(nreqs, sizeof(*wait_reqs));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                /* NULL elements are ignored by gai_suspend(). */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    while ((id = strtok(NULL, \" \")) != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        n = atoi(id);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (n >= nreqs) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            printf(\"Bad request number: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", id);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            return;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        wait_reqs[n] = reqs[n];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    ret = gai_suspend(wait_reqs, nreqs, NULL);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (ret) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"gai_suspend(): %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        return;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (i = 0; i < nreqs; i++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (wait_reqs[i] == NULL)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        ret = gai_error(reqs[i]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (ret == EAI_INPROGRESS)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            continue;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        printf(\"[%02d] %s: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", i, reqs[i]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_name,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               ret == 0 ? \"Finished\" : gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* Cancel specified requests */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cancel_requests(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *id;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int ret, n;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    while ((id = strtok(NULL, \" \")) != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        n = atoi(id);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (n >= nreqs) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            printf(\"Bad request number: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", id);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            return;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        ret = gai_cancel(reqs[n]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"[%s] %s: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", id, reqs[atoi(id)]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_name,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "               gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "/* List all requests */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "list_requests(void)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int i, ret;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char host[NI_MAXHOST];"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct addrinfo *res;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    for (i = 0; i < nreqs; i++) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        printf(\"[%02d] %s: \", i, reqs[i]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_name);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        ret = gai_error(reqs[i]);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (!ret) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            res = reqs[i]"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ar_result;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "            ret = getnameinfo(res"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addr, res"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": ">ai_addrlen,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                              host, sizeof(host),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                              NULL, 0, NI_NUMERICHOST);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            if (ret) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                fprintf(stderr, \"getnameinfo() failed: %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\","
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                        gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                exit(EXIT_FAILURE);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            puts(host);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        } else {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            puts(gai_strerror(ret));"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *cmdline;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    char *cmd;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    while ((cmdline = getcmd()) != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        cmd = strtok(cmdline, \" \");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        if (cmd == NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            list_requests();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        } else {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            switch (cmd[0]) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "a"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ":"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                add_requests();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "w"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ":"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                wait_requests();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "c"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ":"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                cancel_requests();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            case "
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": "l"
        },
        {
          "type": "ESCAPE",
          "content": "\\(aq"
        },
        {
          "type": "TEXT",
          "content": ":"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                list_requests();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            default:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                fprintf(stderr, \"Bad command: %c"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", cmd[0]);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "                break;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " getaddrinfo (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " inet (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lio_listio (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hostname (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ip (7),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " sigevent (7)"
        }
      ]
    ]
  }
]
