[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"     <mtk.manpages@gmail.com>"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(VERBATIM)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to make and distribute verbatim copies of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual provided the copyright notice and this permission notice are"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" preserved on all copies."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Permission is granted to copy and distribute modified versions of this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual under the conditions for verbatim copying, provided that the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" entire resulting derived work is distributed under the terms of a"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" permission notice identical to this one."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Since the Linux kernel and libraries are constantly changing, this"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" manual page may be incorrect or out-of-date.  The author(s) assume no"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" responsibility for errors or omissions, or for damages resulting from"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the use of the information contained herein.  The author(s) may not"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" have taken the same level of care in the production of this manual,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" which is licensed free of charge, as they might when working"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" professionally."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Formatted or processed versions of this manual, if unaccompanied by"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" the source, must acknowledge the copyright and authors of this work."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " PTHREAD_ATTR_INIT 3 2017-09-15 \"Linux\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "pthread_attr_init, pthread_attr_destroy "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " initialize and destroy"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread attributes object"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " #include <pthread.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int pthread_attr_init(pthread_attr_t *\" attr );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".BI",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"int pthread_attr_destroy(pthread_attr_t *\" attr );"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Compile and link with "
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "I"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "pthread"
        },
        {
          "type": "ESCAPE",
          "content": "\\f"
        },
        {
          "type": "TEXT",
          "content": "P."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_init ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function initializes the thread attributes object pointed to by"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "with default attribute values."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "After this call, individual attributes of the object can be set"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "using various related functions (listed under SEE ALSO),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and then the object can be used in one or more"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_create (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "calls that create threads."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Calling"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_init ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on a thread attributes object that has already been initialized"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "results in undefined behavior."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When a thread attributes object is no longer required,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it should be destroyed using the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_destroy ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Destroying a thread attributes object has no effect"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on threads that were created using that object."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Once a thread attributes object has been destroyed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "it can be reinitialized using"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_init ()."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Any other use of a destroyed thread attributes object"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "has undefined results."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " RETURN VALUE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "On success, these functions return 0;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on error, they return a nonzero error number."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX.1 documents an"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " ENOMEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "error for"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_init ();"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "on Linux these functions always succeed"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(but portable and future-proof applications should nevertheless"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "handle a possible error return)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ATTRIBUTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "For an explanation of the terms used in this section, see"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attributes (7)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "allbox;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lbw22 lb lb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "l l l."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Interface\tAttribute\tValue"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T{"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_init (),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_destroy ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "T}\tThread safety\tMT-Safe"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TE",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " CONFORMING TO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "POSIX.1-2001, POSIX.1-2008."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NOTES"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_t"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "type should be treated as opaque:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "any access to the object other than via pthreads functions"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is nonportable and produces undefined results."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " EXAMPLE"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The program below optionally makes use of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_init ()"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and various related functions to initialize a thread attributes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "object that is used to create a single thread."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Once created, the thread uses the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_getattr_np (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "function (a nonstandard GNU extension) to retrieve the thread's"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "attributes, and then displays those attributes."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the program is run with no command-line argument,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "then it passes NULL as the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " attr"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument of"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_create (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "so that the thread is created with default attributes."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Running the program on Linux/x86-32 with the NPTL threading implementation,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "we see the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Results from glibc 2.8, SUSE 11.0; Oct 2008"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ulimit "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "s\" \"       # No stack limit ==> default stack size is 2 MB\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "unlimited"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ./a.out\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thread attributes:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Detach state        = PTHREAD_CREATE_JOINABLE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Scope               = PTHREAD_SCOPE_SYSTEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Inherit scheduler   = PTHREAD_INHERIT_SCHED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Scheduling policy   = SCHED_OTHER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Scheduling priority = 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Guard size          = 4096 bytes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Stack address       = 0x40196000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Stack size          = 0x201000 bytes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "When we supply a stack size as a command-line argument,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the program initializes a thread attributes object,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "sets various attributes in that object,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and passes a pointer to the object in the call to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_create (3)."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Running the program on Linux/x86-32 with the NPTL threading implementation,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "we see the following:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Results from glibc 2.8, SUSE 11.0; Oct 2008"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".RB",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"$\" \" ./a.out 0x3000000\""
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "posix_memalign() allocated at 0x40197000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Thread attributes:"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Detach state        = PTHREAD_CREATE_DETACHED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Scope               = PTHREAD_SCOPE_SYSTEM"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Inherit scheduler   = PTHREAD_EXPLICIT_SCHED"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Scheduling policy   = SCHED_OTHER"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Scheduling priority = 0"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Guard size          = 0 bytes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Stack address       = 0x40197000"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        Stack size          = 0x3000000 bytes"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SS",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " Program source"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "ESCAPE",
          "content": "\\&"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#define _GNU_SOURCE     /* To get pthread_getattr_np() declaration */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <pthread.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdio.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <stdlib.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <unistd.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <errno.h>"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#define handle_error_en(en, msg) "
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "display_pthread_attr(pthread_attr_t *attr, char *prefix)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int s, i;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    size_t v;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    void *stkaddr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    struct sched_param sp;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getdetachstate(attr, &i);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getdetachstate\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sDetach state        = %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == PTHREAD_CREATE_DETACHED) ? \"PTHREAD_CREATE_DETACHED\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == PTHREAD_CREATE_JOINABLE) ? \"PTHREAD_CREATE_JOINABLE\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            \"???\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getscope(attr, &i);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getscope\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sScope               = %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == PTHREAD_SCOPE_SYSTEM)  ? \"PTHREAD_SCOPE_SYSTEM\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == PTHREAD_SCOPE_PROCESS) ? \"PTHREAD_SCOPE_PROCESS\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            \"???\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getinheritsched(attr, &i);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getinheritsched\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sInherit scheduler   = %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == PTHREAD_INHERIT_SCHED)  ? \"PTHREAD_INHERIT_SCHED\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == PTHREAD_EXPLICIT_SCHED) ? \"PTHREAD_EXPLICIT_SCHED\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            \"???\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getschedpolicy(attr, &i);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getschedpolicy\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sScheduling policy   = %s"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == SCHED_OTHER) ? \"SCHED_OTHER\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == SCHED_FIFO)  ? \"SCHED_FIFO\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            (i == SCHED_RR)    ? \"SCHED_RR\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            \"???\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getschedparam(attr, &sp);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getschedparam\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sScheduling priority = %d"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix, sp.sched_priority);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getguardsize(attr, &v);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getguardsize\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sGuard size          = %zu bytes"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix, v);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_attr_getstack(attr, &stkaddr, &v);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_attr_getstack\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sStack address       = %p"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix, stkaddr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    printf(\"%sStack size          = 0x%zx bytes"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", prefix, v);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "static void *"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "thread_start(void *arg)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int s;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pthread_attr_t gattr;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* pthread_getattr_np() is a non"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "standard GNU extension that"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       retrieves the attributes of the thread specified in its"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       first argument */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_getattr_np(pthread_self(), &gattr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_getattr_np\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    printf(\"Thread attributes:"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    display_pthread_attr(&gattr, \""
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "t\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    exit(EXIT_SUCCESS);         /* Terminate all threads */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "int"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "main(int argc, char *argv[])"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "{"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pthread_t thr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pthread_attr_t attr;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    pthread_attr_t *attrp;      /* NULL or &attr */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int s;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    attrp = NULL;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    /* If a command"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "line argument was supplied, use it to set the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       stack"
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": "size attribute and set a few other thread attributes,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "       and set attrp pointing to thread attributes object */"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (argc > 1) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        int stack_size;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        void *sp;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        attrp = &attr;"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        s = pthread_attr_init(&attr);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            handle_error_en(s, \"pthread_attr_init\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        s = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            handle_error_en(s, \"pthread_attr_setdetachstate\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        s = pthread_attr_setinheritsched(&attr, PTHREAD_EXPLICIT_SCHED);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            handle_error_en(s, \"pthread_attr_setinheritsched\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        stack_size = strtoul(argv[1], NULL, 0);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        s = posix_memalign(&sp, sysconf(_SC_PAGESIZE), stack_size);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            handle_error_en(s, \"posix_memalign\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        printf(\"posix_memalign() allocated at %p"
        },
        {
          "type": "ESCAPE",
          "content": "\\\\"
        },
        {
          "type": "TEXT",
          "content": "n\", sp);"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "        s = pthread_attr_setstack(&attr, sp, stack_size);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            handle_error_en(s, \"pthread_attr_setstack\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    s = pthread_create(&thr, attrp, &thread_start, NULL);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        handle_error_en(s, \"pthread_create\");"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    if (attrp != NULL) {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        s = pthread_attr_destroy(attrp);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "        if (s != 0)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "            handle_error_en(s, \"pthread_attr_destroy\");"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    }"
        }
      ]
    ]
  },
  {
    "type": "empty",
    "lines": [
      [

      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "    pause();    /* Terminates when other thread calls exit() */"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "}"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ad",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " l"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nh",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setaffinity_np (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setdetachstate (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setguardsize (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setinheritsched (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setschedparam (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setschedpolicy (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setscope (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setstack (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setstackaddr (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_attr_setstacksize (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_create (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_getattr_np (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthread_setattr_default_np (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " pthreads (7)"
        }
      ]
    ]
  }
]
