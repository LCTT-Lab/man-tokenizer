[
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Copyright (c) 1990, 1993"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tThe Regents of the University of California.  All rights reserved."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_START(BSD_4_CLAUSE_UCB)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Redistribution and use in source and binary forms, with or without"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" modification, are permitted provided that the following conditions"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" are met:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 1. Redistributions of source code must retain the above copyright"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    notice, this list of conditions and the following disclaimer."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 2. Redistributions in binary form must reproduce the above copyright"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    notice, this list of conditions and the following disclaimer in the"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    documentation and/or other materials provided with the distribution."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 3. All advertising materials mentioning features or use of this software"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    must display the following acknowledgement:"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tThis product includes software developed by the University of"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\tCalifornia, Berkeley and its contributors."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" 4. Neither the name of the University nor the names of its contributors"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    may be used to endorse or promote products derived from this software"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"    without specific prior written permission."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" SUCH DAMAGE."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" %%%LICENSE_END"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\"\t@(#)btree.3\t8.4 (Berkeley) 8/18/94"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\""
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TH",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " BTREE 3 2017-09-15 \"\" \"Linux Programmer's Manual\""
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\".UC 7"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " NAME"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "btree "
        },
        {
          "type": "ESCAPE",
          "content": "\\-"
        },
        {
          "type": "TEXT",
          "content": " btree database access method"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SYNOPSIS"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".nf",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ft",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " B"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "#include <sys/types.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "#include <db.h>"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".ft",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".fi",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " DESCRIPTION"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"Note well\" :"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This page documents interfaces provided in glibc up until version 2.1."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since version 2.2, glibc no longer provides these interfaces."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Probably, you are looking for the APIs provided by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " libdb"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "library instead."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The routine"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dbopen (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is the library interface to database files."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "One of the supported file formats is btree files."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The general description of the database access methods is in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dbopen (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "this manual page describes only the btree-specific information."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The btree data structure is a sorted, balanced tree structure storing"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "associated key/data pairs."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The btree access-method-specific data structure provided to"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dbopen (3)"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is defined in the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " <db.h>"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "include file as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " +4n"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": ".EX"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "typedef struct {"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    unsigned long flags;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    unsigned int  cachesize;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int           maxkeypage;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int           minkeypage;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    unsigned int  psize;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int         (*compare)(const DBT *key1, const DBT *key2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    size_t      (*prefix)(const DBT *key1, const DBT *key2);"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "    int           lorder;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "} BTREEINFO;"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": ".EE"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".in",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The elements of this structure are as follows:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The flag value is specified by ORing any of the following values:"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RS",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R_DUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Permit duplicate keys in the tree, that is,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "permit insertion if the key to be"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "inserted already exists in the tree."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The default behavior, as described in"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dbopen (3),"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is to overwrite a matching key when inserting a new key or to fail if"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R_NOOVERWRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is specified."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R_DUP"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is overridden by the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R_NOOVERWRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag, and if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R_NOOVERWRITE"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is specified, attempts to insert duplicate keys into"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "the tree will fail."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".IP",
          "translatable": true
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the database contains duplicate keys, the order of retrieval of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "key/data pairs is undefined if the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " get"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "routine is used, however,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " seq"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "routine calls with the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " R_CURSOR"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag set will always return the logical"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "\"first\" of any group of duplicate keys."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".RE",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cachesize"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "A suggested maximum size (in bytes) of the memory cache."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This value is"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " only"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "advisory, and the access method will allocate more memory rather than fail."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Since every search examines the root page of the tree, caching the most"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "recently used pages substantially improves access time."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "In addition, physical writes are delayed as long as possible, so a moderate"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "cache can reduce the number of I/O operations significantly."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Obviously, using a cache increases (but only increases) the likelihood of"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "corruption or lost data if the system crashes while a tree is being modified."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " cachesize"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 0 (no size is specified), a default cache is used."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " maxkeypage"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The maximum number of keys which will be stored on any single page."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Not currently implemented."
        }
      ]
    ]
  },
  {
    "type": "comment",
    "lines": [
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" The maximum number of keys which will be stored on any single page."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" Because of the way the btree data structure works,"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I maxkeypage"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" must always be greater than or equal to 2."
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" If"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" .I maxkeypage"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" is 0 (no maximum number of keys is specified), the page fill factor is"
        }
      ],
      [
        {
          "type": "COMMENT_BLOCK",
          "content": ".\\\" made as large as possible (which is almost invariably what is wanted)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " minkeypage"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The minimum number of keys which will be stored on any single page."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This value is used to determine which keys will be stored on overflow"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "pages, that is, if a key or data item is longer than the pagesize divided"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "by the minkeypage value, it will be stored on overflow pages instead"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "of in the page itself."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " minkeypage"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 0 (no minimum number of keys is specified), a value of 2 is used."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " psize"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Page size is the size (in bytes) of the pages used for nodes in the tree."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The minimum page size is 512 bytes and the maximum page size is 64"
        },
        {
          "type": "ESCAPE",
          "content": "\\ "
        },
        {
          "type": "TEXT",
          "content": "KiB."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " psize"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 0 (no page size is specified), a page size is chosen based on the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "underlying filesystem I/O block size."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " compare"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Compare is the key comparison function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "It must return an integer less than, equal to, or greater than zero if the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "first key argument is considered to be respectively less than, equal to,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "or greater than the second key argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The same comparison function must be used on a given tree every time it"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is opened."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " compare"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL (no comparison function is specified), the keys are compared"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "lexically, with shorter keys considered less than longer keys."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prefix"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Prefix is the prefix comparison function."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If specified, this routine must return the number of bytes of the second key"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "argument which are necessary to determine that it is greater than the first"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "key argument."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If the keys are equal, the key length should be returned."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Note, the usefulness of this routine is very data-dependent, but, in some"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "data sets can produce significantly reduced tree sizes and search times."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prefix"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL (no prefix function is specified),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " and"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "no comparison function is specified, a default lexical comparison routine"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is used."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " prefix"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is NULL and a comparison routine is specified, no prefix comparison is"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "done."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".TP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lorder"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The byte order for integers in the stored database metadata."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The number should represent the order as an integer; for example,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "big endian order would be the number 4,321."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "If"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lorder"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "is 0 (no order is specified), the current host order is used."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "If the file already exists (and the"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".B",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " O_TRUNC"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "flag is not specified), the"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "values specified for the arguments"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " flags ,"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " lorder"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "and"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " psize"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "are ignored"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "in favor of the values used when the tree was created."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Forward sequential scans of a tree are from the least key to the greatest."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Space freed up by deleting key/data pairs from the tree is never reclaimed,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "although it is normally made available for reuse."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This means that the btree storage structure is grow-only."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "The only solutions are to avoid excessive deletions, or to create a fresh"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "tree periodically from a scan of an existing one."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Searches, insertions, and deletions in a btree will all complete in"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "O lg base N where base is the average fill factor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Often, inserting ordered data into btrees results in a low fill factor."
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "This implementation has been modified to make ordered insertion the best"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "case, resulting in a much better than normal page fill factor."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " ERRORS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "The"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " btree"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "access method routines may fail and set"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".I",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " errno"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "for any of the errors specified for the library routine"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dbopen (3)."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " BUGS"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "TEXT",
          "content": "Only big and little endian byte order is supported."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".SH",
          "translatable": true
        },
        {
          "type": "TEXT",
          "content": " SEE ALSO"
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " dbopen (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " hash (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " mpool (3),"
        }
      ],
      [
        {
          "type": "MACRO_INLINE",
          "content": ".BR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " recno (3)"
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"The Ubiquitous B-tree\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Douglas Comer, ACM Comput. Surv. 11, 2 (June 1979), 121-138."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"Prefix B-trees\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "Bayer and Unterauer, ACM Transactions on Database Systems, Vol. 2, 1"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "(March 1977), 11-26."
        }
      ]
    ]
  },
  {
    "type": "macro",
    "lines": [
      [
        {
          "type": "MACRO_BLOCK",
          "content": ".PP",
          "translatable": false
        }
      ]
    ]
  },
  {
    "type": "content",
    "lines": [
      [
        {
          "type": "MACRO_INLINE",
          "content": ".IR",
          "translatable": false
        },
        {
          "type": "TEXT",
          "content": " \"The Art of Computer Programming Vol. 3: Sorting and Searching\" ,"
        }
      ],
      [
        {
          "type": "TEXT",
          "content": "D.E. Knuth, 1968, pp 471-480."
        }
      ]
    ]
  }
]
